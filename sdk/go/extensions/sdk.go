// Package extensions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package extensions

// DebugResponse defines model for DebugResponse.
type DebugResponse struct {
	Info string `json:"info"`
}

// Documentation defines model for Documentation.
type Documentation struct {
	// Body Anything the extension wants to explain to the user. This text is inserted into the documentation a user can look up about the extension. Supports AsciiDoc.
	Body string `json:"body"`

	// ConfigParams Each extension has configuration parameters that can be passed in at extension startup. These parameters should control extension behavior for it's entire lifetime.
	ConfigParams []Parameter `json:"config_params"`

	// PipelineSubscriptionParams Each extension has pipeline subscription parameters that are passed in by a pipeline when it attempts to subscribe to an extension. This controls how the extension treats that specific pipeline subscription.
	PipelineSubscriptionParams []Parameter `json:"pipeline_subscription_params"`
}

// Error Error information from a response.
type Error struct {
	ErrorCode *string `json:"error_code,omitempty"`
	Message   string  `json:"message"`
	RequestId string  `json:"request_id"`
}

// ExternalEventRequest defines model for ExternalEventRequest.
type ExternalEventRequest struct {
	// Body The bytes of the response body for the external request.
	Body []uint8 `json:"body"`

	// Headers The headers for the incoming external request.
	Headers map[string]string `json:"headers"`
}

// InfoResponse defines model for InfoResponse.
type InfoResponse struct {
	// Documentation Documentation about how to use the extension.
	Documentation Documentation `json:"documentation"`

	// ExtensionId The unique extension identifier
	ExtensionId string `json:"extension_id"`
}

// Parameter defines model for Parameter.
type Parameter struct {
	Documentation string `json:"documentation"`
	Key           string `json:"key"`
	Required      bool   `json:"required"`
}

// SubscriptionRequest defines model for SubscriptionRequest.
type SubscriptionRequest struct {
	// NamespaceId The unique identifier for the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId The unique identifier for the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineSubscriptionId A unique name created by the pipeline owner to differentiate this pipeline subscription to the extension from any others to the same extension.
	PipelineSubscriptionId string `json:"pipeline_subscription_id"`

	// PipelineSubscriptionParams Each extension has pipeline subscription parameters that are passed in by a pipeline when it attempts to subscribe to an extension. This controls how the extension treats that specific pipeline subscription.
	PipelineSubscriptionParams map[string]string `json:"pipeline_subscription_params"`
}

// UnsubscriptionRequest defines model for UnsubscriptionRequest.
type UnsubscriptionRequest struct {
	// NamespaceId The unique identifier for the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId The unique identifier for the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// PipelineSubscriptionId A unique name created by the pipeline owner to differentiate this pipeline subscription to the extension from any others to the same extension.
	PipelineSubscriptionId string `json:"pipeline_subscription_id"`
}

// ExternalEventJSONRequestBody defines body for ExternalEvent for application/json ContentType.
type ExternalEventJSONRequestBody = ExternalEventRequest

// UnsubscribeJSONRequestBody defines body for Unsubscribe for application/json ContentType.
type UnsubscribeJSONRequestBody = UnsubscriptionRequest

// SubscribeJSONRequestBody defines body for Subscribe for application/json ContentType.
type SubscribeJSONRequestBody = SubscriptionRequest
