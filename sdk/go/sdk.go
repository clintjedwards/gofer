// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for Action.
const (
	Delete Action = "delete"
	Read   Action = "read"
	Write  Action = "write"
)

// Defines values for ConfigState0.
const (
	ConfigState0Unknown ConfigState0 = "unknown"
)

// Defines values for ConfigState1.
const (
	Unreleased ConfigState1 = "unreleased"
)

// Defines values for ConfigState2.
const (
	Live ConfigState2 = "live"
)

// Defines values for ConfigState3.
const (
	Deprecated ConfigState3 = "deprecated"
)

// Defines values for Kind0.
const (
	Kind0Any Kind0 = "any"
)

// Defines values for PipelineState.
const (
	PipelineStateActive   PipelineState = "active"
	PipelineStateDisabled PipelineState = "disabled"
	PipelineStateUnknown  PipelineState = "unknown"
)

// Defines values for RequiredParentStatus.
const (
	RequiredParentStatusAny     RequiredParentStatus = "any"
	RequiredParentStatusFailure RequiredParentStatus = "failure"
	RequiredParentStatusSuccess RequiredParentStatus = "success"
	RequiredParentStatusUnknown RequiredParentStatus = "unknown"
)

// Defines values for RequiredParentStatus2.
const (
	RequiredParentStatus2Any     RequiredParentStatus2 = "Any"
	RequiredParentStatus2Failure RequiredParentStatus2 = "Failure"
	RequiredParentStatus2Success RequiredParentStatus2 = "Success"
	RequiredParentStatus2Unknown RequiredParentStatus2 = "Unknown"
)

// Defines values for UpdateSubscriptionStatus.
const (
	UpdateSubscriptionStatusActive   UpdateSubscriptionStatus = "active"
	UpdateSubscriptionStatusDisabled UpdateSubscriptionStatus = "disabled"
)

// Defines values for VariableSource0.
const (
	VariableSource0Unknown VariableSource0 = "unknown"
)

// Defines values for VariableSource1.
const (
	PipelineConfig VariableSource1 = "pipeline_config"
)

// Defines values for VariableSource2.
const (
	System VariableSource2 = "system"
)

// Defines values for VariableSource3.
const (
	RunOptions VariableSource3 = "run_options"
)

// Defines values for VariableSource4.
const (
	VariableSource4Extension VariableSource4 = "extension"
)

// Defines values for DeploymentState0.
const (
	DeploymentState0Complete DeploymentState0 = "Complete"
	DeploymentState0Running  DeploymentState0 = "Running"
)

// Defines values for DeploymentState1.
const (
	DeploymentState1Unknown DeploymentState1 = "Unknown"
)

// Defines values for DeploymentStatus0.
const (
	DeploymentStatus0Unknown DeploymentStatus0 = "Unknown"
)

// Defines values for DeploymentStatus1.
const (
	DeploymentStatus1Failed DeploymentStatus1 = "Failed"
)

// Defines values for DeploymentStatus2.
const (
	DeploymentStatus2Successful DeploymentStatus2 = "Successful"
)

// Defines values for DeploymentStatusReasonType.
const (
	DeploymentStatusReasonTypeUnknown DeploymentStatusReasonType = "Unknown"
)

// Defines values for ExtensionState0.
const (
	ExtensionState0Unknown ExtensionState0 = "unknown"
)

// Defines values for ExtensionState1.
const (
	ExtensionState1Processing ExtensionState1 = "processing"
)

// Defines values for ExtensionState2.
const (
	ExtensionState2Running ExtensionState2 = "running"
)

// Defines values for ExtensionState3.
const (
	Exited ExtensionState3 = "exited"
)

// Defines values for ExtensionStatus0.
const (
	ExtensionStatus0Unknown ExtensionStatus0 = "unknown"
)

// Defines values for ExtensionStatus1.
const (
	Enabled ExtensionStatus1 = "enabled"
)

// Defines values for ExtensionStatus2.
const (
	ExtensionStatus2Disabled ExtensionStatus2 = "disabled"
)

// Defines values for RunState0.
const (
	RunState0Unknown RunState0 = "unknown"
)

// Defines values for RunState1.
const (
	Pending RunState1 = "pending"
)

// Defines values for RunState2.
const (
	RunState2Running RunState2 = "running"
)

// Defines values for RunState3.
const (
	RunState3Complete RunState3 = "complete"
)

// Defines values for RunStatus0.
const (
	RunStatus0Unknown RunStatus0 = "unknown"
)

// Defines values for RunStatus1.
const (
	RunStatus1Failed RunStatus1 = "failed"
)

// Defines values for RunStatus2.
const (
	RunStatus2Successful RunStatus2 = "successful"
)

// Defines values for RunStatus3.
const (
	RunStatus3Cancelled RunStatus3 = "cancelled"
)

// Defines values for RunStatusReasonType0.
const (
	RunStatusReasonType0Unknown RunStatusReasonType0 = "unknown"
)

// Defines values for RunStatusReasonType1.
const (
	RunStatusReasonType1AbnormalExit RunStatusReasonType1 = "abnormal_exit"
)

// Defines values for RunStatusReasonType2.
const (
	RunStatusReasonType2SchedulerError RunStatusReasonType2 = "scheduler_error"
)

// Defines values for RunStatusReasonType3.
const (
	RunStatusReasonType3FailedPrecondition RunStatusReasonType3 = "failed_precondition"
)

// Defines values for RunStatusReasonType4.
const (
	UserCancelled RunStatusReasonType4 = "user_cancelled"
)

// Defines values for RunStatusReasonType5.
const (
	AdminCancelled RunStatusReasonType5 = "admin_cancelled"
)

// Defines values for SubscriptionStatus.
const (
	SubscriptionStatusActive   SubscriptionStatus = "active"
	SubscriptionStatusDisabled SubscriptionStatus = "disabled"
	SubscriptionStatusError    SubscriptionStatus = "error"
	SubscriptionStatusUnknown  SubscriptionStatus = "unknown"
)

// Defines values for SubscriptionStatusReasonType.
const (
	SubscriptionStatusReasonTypeFailed   SubscriptionStatusReasonType = "failed"
	SubscriptionStatusReasonTypeNotFound SubscriptionStatusReasonType = "not_found"
	SubscriptionStatusReasonTypeUnknown  SubscriptionStatusReasonType = "unknown"
)

// Defines values for TaskExecutionState0.
const (
	TaskExecutionState0Complete TaskExecutionState0 = "complete"
)

// Defines values for TaskExecutionState1.
const (
	TaskExecutionState1Unknown TaskExecutionState1 = "unknown"
)

// Defines values for TaskExecutionState2.
const (
	TaskExecutionState2Processing TaskExecutionState2 = "processing"
)

// Defines values for TaskExecutionState3.
const (
	Waiting TaskExecutionState3 = "waiting"
)

// Defines values for TaskExecutionState4.
const (
	TaskExecutionState4Running TaskExecutionState4 = "running"
)

// Defines values for TaskExecutionStatus0.
const (
	TaskExecutionStatus0Unknown TaskExecutionStatus0 = "unknown"
)

// Defines values for TaskExecutionStatus1.
const (
	Failed TaskExecutionStatus1 = "failed"
)

// Defines values for TaskExecutionStatus2.
const (
	Successful TaskExecutionStatus2 = "successful"
)

// Defines values for TaskExecutionStatus3.
const (
	TaskExecutionStatus3Cancelled TaskExecutionStatus3 = "cancelled"
)

// Defines values for TaskExecutionStatus4.
const (
	Skipped TaskExecutionStatus4 = "skipped"
)

// Defines values for TaskExecutionStatusReasonType0.
const (
	Unknown TaskExecutionStatusReasonType0 = "unknown"
)

// Defines values for TaskExecutionStatusReasonType1.
const (
	TaskExecutionStatusReasonType1AbnormalExit TaskExecutionStatusReasonType1 = "abnormal_exit"
)

// Defines values for TaskExecutionStatusReasonType2.
const (
	TaskExecutionStatusReasonType2SchedulerError TaskExecutionStatusReasonType2 = "scheduler_error"
)

// Defines values for TaskExecutionStatusReasonType3.
const (
	TaskExecutionStatusReasonType3FailedPrecondition TaskExecutionStatusReasonType3 = "failed_precondition"
)

// Defines values for TaskExecutionStatusReasonType4.
const (
	Cancelled TaskExecutionStatusReasonType4 = "cancelled"
)

// Defines values for TaskExecutionStatusReasonType5.
const (
	Orphaned TaskExecutionStatusReasonType5 = "orphaned"
)

// Action defines model for Action.
type Action string

// Config A representation of the user's configuration settings for a particular pipeline.
type Config struct {
	// Deprecated Time in epoch milliseconds when this pipeline config was not longer used.
	Deprecated uint64 `json:"deprecated"`

	// Description Description of pipeline's purpose and other details.
	Description string `json:"description"`

	// Name Human readable name for pipeline.
	Name string `json:"name"`

	// NamespaceId Unique identifier of the target namespace.
	NamespaceId string `json:"namespace_id"`

	// Parallelism The amount of runs allowed to happen at any given time.
	Parallelism uint64 `json:"parallelism"`

	// PipelineId Unique identifier of the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// Registered Time in epoch milliseconds when this pipeline config was registered.
	Registered uint64 `json:"registered"`

	// State The deployment state of the config. This is used to determine the state of this particular config and if it is currently being used or not.
	State ConfigState `json:"state"`

	// Tasks Tasks associated with this pipeline.
	Tasks map[string]Task `json:"tasks"`

	// Version The iteration number for this pipeline's configs.
	Version uint64 `json:"version"`
}

// ConfigState defines model for ConfigState.
type ConfigState struct {
	union json.RawMessage
}

// ConfigState0 defines model for ConfigState.0.
type ConfigState0 string

// ConfigState1 Has never been deployed.
type ConfigState1 string

// ConfigState2 Currently deployed.
type ConfigState2 string

// ConfigState3 Has previously been deployed and is now defunct.
type ConfigState3 string

// CreateNamespaceRequest defines model for CreateNamespaceRequest.
type CreateNamespaceRequest struct {
	// Description Short description about what the namespace is used for.
	Description string `json:"description"`

	// Id The unique identifier for the namespace. Only accepts alphanumeric chars with hyphens. No spaces.
	Id string `json:"id"`

	// Name Humanized name for the namespace.
	Name string `json:"name"`
}

// CreateNamespaceResponse defines model for CreateNamespaceResponse.
type CreateNamespaceResponse struct {
	// Namespace Information about the namespace created.
	Namespace Namespace `json:"namespace"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	// Description Short description about what the role is used for.
	Description string `json:"description"`

	// Id The unique identifier for the role. Only accepts alphanumeric chars with hyphens. No spaces.
	Id string `json:"id"`

	// Permissions Permissions that the role allows.
	Permissions []Permission `json:"permissions"`
}

// CreateRoleResponse defines model for CreateRoleResponse.
type CreateRoleResponse struct {
	// Role Information about the role created.
	Role Role `json:"role"`
}

// CreateSubscriptionRequest defines model for CreateSubscriptionRequest.
type CreateSubscriptionRequest struct {
	ExtensionId    string            `json:"extension_id"`
	Settings       map[string]string `json:"settings"`
	SubscriptionId string            `json:"subscription_id"`
}

// CreateSubscriptionResponse defines model for CreateSubscriptionResponse.
type CreateSubscriptionResponse struct {
	// Subscription Information about the subscription created.
	Subscription Subscription `json:"subscription"`
}

// CreateTokenRequest defines model for CreateTokenRequest.
type CreateTokenRequest struct {
	// Expires The amount of time the token is valid for in seconds. An expiry of 0 means that token does not expire.
	Expires uint64 `json:"expires"`

	// Metadata Various other bits of data you can attach to tokens. This is used by Gofer to track some details about tokens, but can also be used by users to attach bits of information that would make the token easier to programmatically manage.
	Metadata *map[string]string `json:"metadata"`

	// Roles The list of roles to apply to the token.
	Roles []string `json:"roles"`

	// User The plaintext username of the token user.
	User string `json:"user"`
}

// CreateTokenResponse defines model for CreateTokenResponse.
type CreateTokenResponse struct {
	// Secret The actual token created. API Tokens should be protected in the same fashion as passwords.
	Secret string `json:"secret"`

	// TokenDetails Information about the token created.
	TokenDetails Token `json:"token_details"`
}

// DebugResponse defines model for DebugResponse.
type DebugResponse struct {
	Info string `json:"info"`
}

// DeployPipelineConfigResponse defines model for DeployPipelineConfigResponse.
type DeployPipelineConfigResponse struct {
	// Deployment Information about the pipeline created.
	Deployment Deployment `json:"deployment"`
}

// Deployment A deployment represents a transition between two pipeline versions.
type Deployment struct {
	// DeploymentId Unique identifier for the deployment.
	DeploymentId uint64 `json:"deployment_id"`

	// EndVersion Version of the pipeline being promoted.
	EndVersion uint64 `json:"end_version"`

	// Ended Time of deployment end in epoch milliseconds.
	Ended uint64 `json:"ended"`

	// Logs The event logs from the deployment.
	Logs []Event `json:"logs"`

	// NamespaceId Unique identifier for the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId Unique identifier for the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// StartVersion Version of the pipeline is being deprecated.
	StartVersion uint64 `json:"start_version"`

	// Started Time of deployment start in epoch milliseconds.
	Started uint64 `json:"started"`

	// State The current state of the deployment as it exists within Gofer's operating model.
	State DeploymentState `json:"state"`

	// Status The final status of the deployment.
	Status DeploymentStatus `json:"status"`

	// StatusReason Details about a deployment's specific status
	StatusReason *DeploymentStatusReason `json:"status_reason"`
}

// Documentation defines model for Documentation.
type Documentation struct {
	// Body Anything the extension wants to explain to the user. This text is inserted into the documentation a user can look up about the extension. Supports AsciiDoc.
	Body string `json:"body"`

	// ConfigParams Each extension has configuration parameters that can be passed in at extension startup. These parameters should control extension behavior for it's entire lifetime.
	ConfigParams []Parameter `json:"config_params"`

	// PipelineSubscriptionParams Each extension has pipeline subscription parameters that are passed in by a pipeline when it attempts to subscribe to an extension. This controls how the extension treats that specific pipeline subscription.
	PipelineSubscriptionParams []Parameter `json:"pipeline_subscription_params"`
}

// Error Error information from a response.
type Error struct {
	ErrorCode *string `json:"error_code,omitempty"`
	Message   string  `json:"message"`
	RequestId string  `json:"request_id"`
}

// Event A single event
type Event struct {
	// Emitted Time event was performed in epoch milliseconds.
	Emitted uint64 `json:"emitted"`

	// Id Unique identifier for event.
	Id string `json:"id"`

	// Kind The type of event it is.
	Kind Kind `json:"kind"`
}

// Extension An Extension is the way that pipelines add extra functionality to themselves. Pipelines can "subscribe" to extensions and extensions then act on behalf of that pipeline.
type Extension struct {
	// Documentation Extension given documentation usually in markdown.
	Documentation Documentation `json:"documentation"`

	// Registration Metadata about the extension as it is registered within Gofer.
	Registration Registration `json:"registration"`

	// Started The start time of the extension in epoch milliseconds.
	Started uint64 `json:"started"`

	// State The current state of the extension as it exists within Gofer's operating model.
	State ExtensionState `json:"state"`

	// Url The network address used to communicate with the extension by the main process.
	Url string `json:"url"`
}

// GetDeploymentResponse defines model for GetDeploymentResponse.
type GetDeploymentResponse struct {
	// Deployment The target deployment.
	Deployment Deployment `json:"deployment"`
}

// GetEventResponse defines model for GetEventResponse.
type GetEventResponse struct {
	// Event The target event.
	Event Event `json:"event"`
}

// GetExtensionObjectResponse defines model for GetExtensionObjectResponse.
type GetExtensionObjectResponse struct {
	// Object The requested object data.
	Object []uint8 `json:"object"`
}

// GetExtensionResponse defines model for GetExtensionResponse.
type GetExtensionResponse struct {
	// Extension The extension requested.
	Extension Extension `json:"extension"`
}

// GetGlobalSecretResponse defines model for GetGlobalSecretResponse.
type GetGlobalSecretResponse struct {
	// Metadata The target secret metadata.
	Metadata Secret `json:"metadata"`

	// Secret The actual secret, only included if "include_secret" param is true.
	Secret *string `json:"secret"`
}

// GetNamespaceResponse defines model for GetNamespaceResponse.
type GetNamespaceResponse struct {
	// Namespace The target namespace.
	Namespace Namespace `json:"namespace"`
}

// GetPipelineConfigResponse defines model for GetPipelineConfigResponse.
type GetPipelineConfigResponse struct {
	// Config The target pipeline config.
	Config Config `json:"config"`
}

// GetPipelineObjectResponse defines model for GetPipelineObjectResponse.
type GetPipelineObjectResponse struct {
	// Object The requested object data.
	Object []uint8 `json:"object"`
}

// GetPipelineResponse defines model for GetPipelineResponse.
type GetPipelineResponse struct {
	// Pipeline The metadata for the pipeline.
	Pipeline Metadata `json:"pipeline"`
}

// GetPipelineSecretResponse defines model for GetPipelineSecretResponse.
type GetPipelineSecretResponse struct {
	// Metadata The target secret metadata.
	Metadata Secret `json:"metadata"`

	// Secret The actual secret, only included if "include_secret" param is true.
	Secret *string `json:"secret"`
}

// GetRoleResponse defines model for GetRoleResponse.
type GetRoleResponse struct {
	// Role The target role.
	Role Role `json:"role"`
}

// GetRunObjectResponse defines model for GetRunObjectResponse.
type GetRunObjectResponse struct {
	// Object The requested object data.
	Object []uint8 `json:"object"`
}

// GetRunResponse defines model for GetRunResponse.
type GetRunResponse struct {
	// Run The run requested.
	Run Run `json:"run"`
}

// GetSubscriptionResponse defines model for GetSubscriptionResponse.
type GetSubscriptionResponse struct {
	// Subscription The metadata for the subscription.
	Subscription Subscription `json:"subscription"`
}

// GetSystemMetadataResponse defines model for GetSystemMetadataResponse.
type GetSystemMetadataResponse struct {
	// Commit The commit of the current build.
	Commit string `json:"commit"`

	// Semver The semver version of the current build.
	Semver string `json:"semver"`
}

// GetSystemPreferencesResponse defines model for GetSystemPreferencesResponse.
type GetSystemPreferencesResponse struct {
	BootstrapTokenCreated   bool `json:"bootstrap_token_created"`
	IgnorePipelineRunEvents bool `json:"ignore_pipeline_run_events"`
}

// GetTaskExecutionResponse defines model for GetTaskExecutionResponse.
type GetTaskExecutionResponse struct {
	// TaskExecution The task execution requested.
	TaskExecution TaskExecution `json:"task_execution"`
}

// GetTokenByIDResponse defines model for GetTokenByIDResponse.
type GetTokenByIDResponse struct {
	// Token The target token.
	Token Token `json:"token"`
}

// Initiator defines model for Initiator.
type Initiator struct {
	// Id The unique identifier for the token that initiated the request.
	Id string `json:"id"`

	// User The plaintext username for of the token.
	User string `json:"user"`
}

// InstallExtensionRequest defines model for InstallExtensionRequest.
type InstallExtensionRequest struct {
	// AdditionalRoles Additional roles to add to the extension. This allows operators to extend extension access to things that otherwise the extension might not be able to do with it's default role.
	AdditionalRoles *[]string `json:"additional_roles"`

	// Id A unique id for the extension. Since this needs to only be unique across extensions simply using the extension's name usually suffices.
	Id string `json:"id"`

	// Image The container image this extension should use.
	Image string `json:"image"`

	// RegistryAuth Registry auth credentials
	RegistryAuth *RegistryAuth `json:"registry_auth"`

	// Settings Each extension has a list of settings it takes to configure how it runs. You can usually find this in the documentation.
	Settings map[string]string `json:"settings"`
}

// InstallExtensionResponse defines model for InstallExtensionResponse.
type InstallExtensionResponse struct {
	// Extension An Extension is the way that pipelines add extra functionality to themselves. Pipelines can "subscribe" to extensions and extensions then act on behalf of that pipeline.
	Extension Extension `json:"extension"`
}

// Kind defines model for Kind.
type Kind struct {
	union json.RawMessage
}

// Kind0 The Any kind is a special event kind that denotes the caller wants to listen for any event. It should not be used as a normal event type(for example do not publish anything with it). It is internal only and not passed back on event streaming.
type Kind0 string

// Kind1 defines model for .
type Kind1 struct {
	CreatedNamespace struct {
		NamespaceId string `json:"namespace_id"`
	} `json:"created_namespace"`
}

// Kind2 defines model for .
type Kind2 struct {
	DeletedNamespace struct {
		NamespaceId string `json:"namespace_id"`
	} `json:"deleted_namespace"`
}

// Kind3 defines model for .
type Kind3 struct {
	DisabledPipeline struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
	} `json:"disabled_pipeline"`
}

// Kind4 defines model for .
type Kind4 struct {
	EnabledPipeline struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
	} `json:"enabled_pipeline"`
}

// Kind5 defines model for .
type Kind5 struct {
	CreatedPipeline struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
	} `json:"created_pipeline"`
}

// Kind6 defines model for .
type Kind6 struct {
	DeletedPipeline struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
	} `json:"deleted_pipeline"`
}

// Kind7 defines model for .
type Kind7 struct {
	StartedDeployment struct {
		EndVersion   uint64 `json:"end_version"`
		NamespaceId  string `json:"namespace_id"`
		PipelineId   string `json:"pipeline_id"`
		StartVersion uint64 `json:"start_version"`
	} `json:"started_deployment"`
}

// Kind8 defines model for .
type Kind8 struct {
	CompletedDeployment struct {
		EndVersion   uint64 `json:"end_version"`
		NamespaceId  string `json:"namespace_id"`
		PipelineId   string `json:"pipeline_id"`
		StartVersion uint64 `json:"start_version"`
	} `json:"completed_deployment"`
}

// Kind9 defines model for .
type Kind9 struct {
	StartedRun struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
		RunId       uint64 `json:"run_id"`
	} `json:"started_run"`
}

// Kind10 defines model for .
type Kind10 struct {
	CompletedRun struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
		RunId       uint64 `json:"run_id"`

		// Status The current status of the run. Status is described as if the run succeeded or not.
		Status RunStatus `json:"status"`
	} `json:"completed_run"`
}

// Kind11 defines model for .
type Kind11 struct {
	StartedRunCancellation struct {
		NamespaceId string `json:"namespace_id"`
		PipelineId  string `json:"pipeline_id"`
		RunId       uint64 `json:"run_id"`
	} `json:"started_run_cancellation"`
}

// Kind12 defines model for .
type Kind12 struct {
	CreatedTaskExecution struct {
		NamespaceId     string `json:"namespace_id"`
		PipelineId      string `json:"pipeline_id"`
		RunId           uint64 `json:"run_id"`
		TaskExecutionId string `json:"task_execution_id"`
	} `json:"created_task_execution"`
}

// Kind13 defines model for .
type Kind13 struct {
	StartedTaskExecution struct {
		NamespaceId     string `json:"namespace_id"`
		PipelineId      string `json:"pipeline_id"`
		RunId           uint64 `json:"run_id"`
		TaskExecutionId string `json:"task_execution_id"`
	} `json:"started_task_execution"`
}

// Kind14 defines model for .
type Kind14 struct {
	CompletedTaskExecution struct {
		NamespaceId     string              `json:"namespace_id"`
		PipelineId      string              `json:"pipeline_id"`
		RunId           uint64              `json:"run_id"`
		Status          TaskExecutionStatus `json:"status"`
		TaskExecutionId string              `json:"task_execution_id"`
	} `json:"completed_task_execution"`
}

// Kind15 defines model for .
type Kind15 struct {
	StartedTaskExecutionCancellation struct {
		NamespaceId     string `json:"namespace_id"`
		PipelineId      string `json:"pipeline_id"`
		RunId           uint64 `json:"run_id"`
		TaskExecutionId string `json:"task_execution_id"`
		Timeout         uint64 `json:"timeout"`
	} `json:"started_task_execution_cancellation"`
}

// Kind16 defines model for .
type Kind16 struct {
	InstalledExtension struct {
		Id    string `json:"id"`
		Image string `json:"image"`
	} `json:"installed_extension"`
}

// Kind17 defines model for .
type Kind17 struct {
	UninstalledExtension struct {
		Id    string `json:"id"`
		Image string `json:"image"`
	} `json:"uninstalled_extension"`
}

// Kind18 defines model for .
type Kind18 struct {
	EnabledExtension struct {
		Id    string `json:"id"`
		Image string `json:"image"`
	} `json:"enabled_extension"`
}

// Kind19 defines model for .
type Kind19 struct {
	DisabledExtension struct {
		Id    string `json:"id"`
		Image string `json:"image"`
	} `json:"disabled_extension"`
}

// Kind20 defines model for .
type Kind20 struct {
	PipelineExtensionSubscriptionRegistered struct {
		ExtensionId    string `json:"extension_id"`
		NamespaceId    string `json:"namespace_id"`
		PipelineId     string `json:"pipeline_id"`
		SubscriptionId string `json:"subscription_id"`
	} `json:"pipeline_extension_subscription_registered"`
}

// Kind21 defines model for .
type Kind21 struct {
	PipelineExtensionSubscriptionUnregistered struct {
		ExtensionId    string `json:"extension_id"`
		NamespaceId    string `json:"namespace_id"`
		PipelineId     string `json:"pipeline_id"`
		SubscriptionId string `json:"subscription_id"`
	} `json:"pipeline_extension_subscription_unregistered"`
}

// Kind22 defines model for .
type Kind22 struct {
	CreatedRole struct {
		RoleId string `json:"role_id"`
	} `json:"created_role"`
}

// Kind23 defines model for .
type Kind23 struct {
	DeletedRole struct {
		RoleId string `json:"role_id"`
	} `json:"deleted_role"`
}

// ListDeploymentsResponse defines model for ListDeploymentsResponse.
type ListDeploymentsResponse struct {
	// Deployments A list of all deployments.
	Deployments []Deployment `json:"deployments"`
}

// ListExtensionObjectsResponse defines model for ListExtensionObjectsResponse.
type ListExtensionObjectsResponse struct {
	// Objects A list of all extension objects.
	Objects []Object `json:"objects"`
}

// ListExtensionSubscriptionsResponse defines model for ListExtensionSubscriptionsResponse.
type ListExtensionSubscriptionsResponse struct {
	// Subscriptions A list of all pipeline subscriptions for the given extension.
	Subscriptions []Subscription `json:"subscriptions"`
}

// ListExtensionsResponse defines model for ListExtensionsResponse.
type ListExtensionsResponse struct {
	// Extensions A list of all extensions.
	Extensions []Extension `json:"extensions"`
}

// ListGlobalSecretsResponse defines model for ListGlobalSecretsResponse.
type ListGlobalSecretsResponse struct {
	// Secrets A list of all global secrets.
	Secrets []Secret `json:"secrets"`
}

// ListNamespacesResponse defines model for ListNamespacesResponse.
type ListNamespacesResponse struct {
	// Namespaces A list of all namespaces.
	Namespaces []Namespace `json:"namespaces"`
}

// ListPipelineConfigsResponse defines model for ListPipelineConfigsResponse.
type ListPipelineConfigsResponse struct {
	// Configs A list of all pipelines configs.
	Configs []Config `json:"configs"`
}

// ListPipelineObjectsResponse defines model for ListPipelineObjectsResponse.
type ListPipelineObjectsResponse struct {
	// Objects A list of all pipeline objects.
	Objects []Object `json:"objects"`
}

// ListPipelineSecretsResponse defines model for ListPipelineSecretsResponse.
type ListPipelineSecretsResponse struct {
	// Secrets A list of all pipeline secrets.
	Secrets []Secret `json:"secrets"`
}

// ListPipelinesResponse defines model for ListPipelinesResponse.
type ListPipelinesResponse struct {
	// Pipelines A list of all pipelines metadata.
	Pipelines []Metadata `json:"pipelines"`
}

// ListRolesResponse defines model for ListRolesResponse.
type ListRolesResponse struct {
	// Roles A list of all roles.
	Roles []Role `json:"roles"`
}

// ListRunObjectsResponse defines model for ListRunObjectsResponse.
type ListRunObjectsResponse struct {
	// Objects A list of all run objects.
	Objects []Object `json:"objects"`
}

// ListRunsResponse defines model for ListRunsResponse.
type ListRunsResponse struct {
	// Runs A list of all runs.
	Runs []Run `json:"runs"`
}

// ListSubscriptionsResponse defines model for ListSubscriptionsResponse.
type ListSubscriptionsResponse struct {
	// Subscriptions A list of all pipeline subscriptions.
	Subscriptions []Subscription `json:"subscriptions"`
}

// ListTaskExecutionsResponse defines model for ListTaskExecutionsResponse.
type ListTaskExecutionsResponse struct {
	// TaskExecutions A list of all task executions.
	TaskExecutions []TaskExecution `json:"task_executions"`
}

// ListTokensResponse defines model for ListTokensResponse.
type ListTokensResponse struct {
	// Tokens A list of all tokens.
	Tokens []Token `json:"tokens"`
}

// Metadata Details about the pipeline itself, not including the configuration that the user can change. All these values are changed by the system or never changed at all. This sits in contrast to the config which the user can change freely.
type Metadata struct {
	// Created Time of pipeline creation in epoch milliseconds.
	Created uint64 `json:"created"`

	// Modified Time pipeline was updated to a new version in epoch milliseconds.
	Modified uint64 `json:"modified"`

	// NamespaceId Unique identifier of the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId Unique identifier of the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// State The current running state of the pipeline. This is used to determine if the pipeline should run or not.
	State PipelineState `json:"state"`
}

// Namespace A namespace represents a grouping of pipelines. Normally it is used to divide teams or logically different sections of workloads. It is the highest level unit as it sits above pipelines in the hierarchy of Gofer.
type Namespace struct {
	// Created Time in epoch milliseconds when namespace was created.
	Created uint64 `json:"created"`

	// Description Short description about what the namespace is used for.
	Description string `json:"description"`

	// Id Unique identifier for the namespace.
	Id string `json:"id"`

	// Modified Time in epoch milliseconds when namespace would expire.
	Modified uint64 `json:"modified"`

	// Name Humanized name for the namespace.
	Name string `json:"name"`
}

// Object defines model for Object.
type Object struct {
	// Created Time in epoch milliseconds that this object was registered.
	Created uint64 `json:"created"`

	// Key The identifier for the object value.
	Key string `json:"key"`
}

// Parameter defines model for Parameter.
type Parameter struct {
	Documentation string `json:"documentation"`
	Key           string `json:"key"`
	Required      bool   `json:"required"`
}

// Permission Permission is exactly like ['InternalPermission'] except it abstracts away the type specification of the permissions. This is used to interface with the user via the API.
//
// The ['InternalPermissions'] object cannot be used due to issues with openapi and the generation of the ['Resource'] types. Instead we replace the enum system with a simple string declaration and manually do the translation between the two types.
type Permission struct {
	// Actions Actions are specific operations a user is allowed to perform for those resources. Endpoints will define which "action" they belong under.
	Actions []Action `json:"actions"`

	// Resources Which resource to target. A resource refers to a particular group of endpoints. Resources might also have specific objects being targeted. (Denoted by a '(target)')
	//
	// The current list of resources:
	//
	// "all" "configs" "deployments" "events" "extensions:(target)" "namespaces:(target)" "objects" "permissions" "pipelines:(target)" "runs" "secrets" "subscriptions" "system" "task_executions" "tokens"
	//
	// Example: ["configs", "namespaces:^default$", "pipelines:.*"]
	Resources []string `json:"resources"`
}

// Pipeline `Pipeline` represents a sequence of tasks, where each task is a discrete unit of work encapsulated within a container. This structure allows you to organize and define the workflow for the tasks you want to execute.
//
// # Example
//
// The following example demonstrates how to create a simple pipeline in Gofer, which is familiar to those experienced with CI/CD tooling. It outlines how to define a simple task within a pipeline, use a standard Ubuntu container, and execute a basic command.
//
// This simple example serves as a foundation, illustrating the pattern of defining tasks as building blocks of a pipeline. In practice, you would create custom containers designed specifically for the tasks in your Gofer workflows, keeping your pipeline configuration clean and focused on orchestration rather than embedding complex logic.
//
// ```ignore // Create a new pipeline with a name and a descriptive label. Pipeline::new("simple", "Simple Pipeline") .description("This pipeline demonstrates a simple Gofer pipeline that pulls in a container and runs a command. \ This pattern will be familiar to those experienced with CI/CD tools. \ Tasks in this pipeline are individual containers that can depend on other tasks, illustrating the modular nature of Gofer.") // Adding a single task to the pipeline. .tasks(vec![ Task::new("simple_task", "ubuntu:latest") .description("This task uses the Ubuntu container to print a 'Hello World' message.") .command(vec!["echo".to_string(), "Hello from Gofer!".to_string()]) ]) .finish() // Finalize and validate the pipeline setup. .unwrap(); // Handle potential errors during pipeline creation. ```
type Pipeline struct {
	// Description Short description of what the pipeline is used for.
	Description *string `json:"description"`

	// Id Unique user defined identifier.
	Id string `json:"id"`

	// Name Humanized name, meant for display.
	Name string `json:"name"`

	// Parallelism Controls how many runs can be active at any single time. 0 defaults to whatever the global Gofer setting is.
	Parallelism int64 `json:"parallelism"`

	// Tasks A mapping of pipeline owned tasks.
	Tasks []Task2 `json:"tasks"`
}

// Pipeline2 A collection of logically grouped tasks. A task is a unit of work wrapped in a docker container. Pipeline is a secondary level unit being contained within namespaces and containing runs.
type Pipeline2 struct {
	// Config User controlled data for the targeted pipeline.
	Config Config `json:"config"`

	// Metadata Macro level details on the targeted pipeline.
	Metadata Metadata `json:"metadata"`
}

// PipelineState defines model for PipelineState.
type PipelineState string

// PutExtensionObjectRequest defines model for PutExtensionObjectRequest.
type PutExtensionObjectRequest struct {
	// Content The bytes for the object.
	Content []uint8 `json:"content"`

	// Force Overwrite a value of a object if it already exists.
	Force bool `json:"force"`

	// Key The name for the object you would like to store.
	Key string `json:"key"`
}

// PutExtensionObjectResponse defines model for PutExtensionObjectResponse.
type PutExtensionObjectResponse struct {
	// Object Information about the object created.
	Object Object `json:"object"`
}

// PutGlobalSecretRequest defines model for PutGlobalSecretRequest.
type PutGlobalSecretRequest struct {
	// Content The actual plaintext secret.
	Content string `json:"content"`

	// Force Overwrite a value of a secret if it already exists.
	Force bool `json:"force"`

	// Key The name for the secret you would like to store.
	Key string `json:"key"`

	// Namespaces The namespaces you want this secret to be accessible by. Accepts Regexes.
	Namespaces []string `json:"namespaces"`
}

// PutGlobalSecretResponse defines model for PutGlobalSecretResponse.
type PutGlobalSecretResponse struct {
	// Secret Information about the secret created.
	Secret Secret `json:"secret"`
}

// PutPipelineObjectRequest defines model for PutPipelineObjectRequest.
type PutPipelineObjectRequest struct {
	// Content The bytes for the object.
	Content []uint8 `json:"content"`

	// Force Overwrite a value of a object if it already exists.
	Force bool `json:"force"`

	// Key The name for the object you would like to store.
	Key string `json:"key"`
}

// PutPipelineObjectResponse defines model for PutPipelineObjectResponse.
type PutPipelineObjectResponse struct {
	// Object Information about the object created.
	Object Object `json:"object"`
}

// PutPipelineSecretRequest defines model for PutPipelineSecretRequest.
type PutPipelineSecretRequest struct {
	// Content The actual plaintext secret.
	Content string `json:"content"`

	// Force Overwrite a value of a secret if it already exists.
	Force bool `json:"force"`

	// Key The name for the secret you would like to store.
	Key string `json:"key"`
}

// PutPipelineSecretResponse defines model for PutPipelineSecretResponse.
type PutPipelineSecretResponse struct {
	// Secret Information about the secret created.
	Secret Secret `json:"secret"`
}

// PutRunObjectRequest defines model for PutRunObjectRequest.
type PutRunObjectRequest struct {
	// Content The bytes for the object.
	Content []uint8 `json:"content"`

	// Force Overwrite a value of a object if it already exists.
	Force bool `json:"force"`

	// Key The name for the object you would like to store.
	Key string `json:"key"`
}

// PutRunObjectResponse defines model for PutRunObjectResponse.
type PutRunObjectResponse struct {
	// Object Information about the object created.
	Object Object `json:"object"`
}

// RegisterPipelineConfigRequest defines model for RegisterPipelineConfigRequest.
type RegisterPipelineConfigRequest struct {
	// Config The pipeline configuration. This is usually supplied by the CLI which translates written code into this format.
	Config Pipeline `json:"config"`
}

// RegisterPipelineConfigResponse defines model for RegisterPipelineConfigResponse.
type RegisterPipelineConfigResponse struct {
	// Pipeline The current pipeline.
	Pipeline Pipeline2 `json:"pipeline"`
}

// Registration When installing a new extension, we allow the extension installer to pass a bunch of settings that allow us to go get that extension on future startups.
type Registration struct {
	// AdditionalRoles Additional roles allow the operator to add additional roles to the extension token. This allow extensions to have greater ranges of permissioning than the default.
	AdditionalRoles []string `json:"additional_roles"`

	// Created Time of registration creation in epoch milliseconds.
	Created uint64 `json:"created"`

	// ExtensionId Unique identifier for the extension.
	ExtensionId string `json:"extension_id"`

	// Image Which container image this extension should run.
	Image string `json:"image"`

	// Modified Time of last modification in epoch milliseconds.
	Modified uint64 `json:"modified"`

	// RegistryAuth Auth credentials for the image's registry.
	RegistryAuth *RegistryAuth `json:"registry_auth"`

	// Settings Extensions allow configuration through env vars passed to them through this field. Refer to the extension's documentation for setting values.
	Settings []Variable `json:"settings"`

	// Status Whether the extension is enabled or not; extensions can be disabled to prevent use by admins.
	Status ExtensionStatus `json:"status"`
}

// RegistryAuth Authentication information for container registries.
type RegistryAuth struct {
	Pass string `json:"pass"`
	User string `json:"user"`
}

// RegistryAuth2 defines model for RegistryAuth2.
type RegistryAuth2 struct {
	Pass string `json:"pass"`
	User string `json:"user"`
}

// RequiredParentStatus defines model for RequiredParentStatus.
type RequiredParentStatus string

// RequiredParentStatus2 defines model for RequiredParentStatus2.
type RequiredParentStatus2 string

// Role Role is exactly like ['InternalRole'] except it abstracts away the type specification of the permissions. This is used to interface with the user via the API.
//
// The ['InternalRole'] object cannot be used due to issues with openapi and the generation of the ['Resource'] types. Instead we replace the complicated enum system with a simple string declaration and manually do the translation between the two types.
type Role struct {
	Description string `json:"description"`

	// Id Alphanumeric with dashes only
	Id          string       `json:"id"`
	Permissions []Permission `json:"permissions"`

	// SystemRole If this role was created by Gofer itself. System roles cannot be modified.
	SystemRole bool `json:"system_role"`
}

// Run A run is one or more tasks being executed on behalf of some extension. Run is a third level unit containing tasks and being contained in a pipeline.
type Run struct {
	// Ended Time of run end in epoch milliseconds.
	Ended uint64 `json:"ended"`

	// Initiator Information about what started the run.
	Initiator Initiator `json:"initiator"`

	// NamespaceId Unique identifier of the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineConfigVersion Which version of the pipeline did this run execute.
	PipelineConfigVersion uint64 `json:"pipeline_config_version"`

	// PipelineId Unique identifier of the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// RunId Unique identifier of the target run.
	RunId uint64 `json:"run_id"`

	// Started Time of run start in epoch milliseconds.
	Started uint64 `json:"started"`

	// State The current state of the run within the Gofer execution model. Describes if the run is in progress or not.
	State RunState `json:"state"`

	// Status The final result of the run.
	Status RunStatus `json:"status"`

	// StatusReason More information on the circumstances around a particular run's status.
	StatusReason *RunStatusReason `json:"status_reason"`

	// StoreObjectsExpired Whether run level objects are deleted.
	StoreObjectsExpired bool `json:"store_objects_expired"`

	// TokenId The unique identifier for Gofer's auto-inject token. This feature is so that users can easily use Gofer's API with a ready injected token into the run just-in-time. If this is None this run had no tasks with the `inject_api_token` setting enabled.
	//
	// These tokens automatically expire after a pre-determined time.
	TokenId *string `json:"token_id"`

	// Variables Run level environment variables to be passed to each task execution.
	Variables []Variable `json:"variables"`
}

// Secret defines model for Secret.
type Secret struct {
	// Created Time in epoch milliseconds that this secret was registered.
	Created uint64 `json:"created"`

	// Key The identifier for the secret value.
	Key string `json:"key"`

	// Namespaces The namespaces this secret is allowed to be accessed from. Accepts regexes.
	Namespaces []string `json:"namespaces"`
}

// StartRunRequest defines model for StartRunRequest.
type StartRunRequest struct {
	Variables map[string]string `json:"variables"`
}

// StartRunResponse defines model for StartRunResponse.
type StartRunResponse struct {
	// Run Information about the run started.
	Run Run `json:"run"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	// ExtensionId Unique identifier of the target extension.
	ExtensionId string `json:"extension_id"`

	// NamespaceId Unique identifier of the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId Unique identifier of the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// Settings The extension's pipeline configuration settings.
	Settings map[string]string `json:"settings"`

	// Status The state of the subscription.
	Status SubscriptionStatus `json:"status"`

	// StatusReason A further description about the status.
	StatusReason *SubscriptionStatusReason `json:"status_reason"`

	// SubscriptionId A unique label differentiating this subscription from other subscriptions.
	SubscriptionId string `json:"subscription_id"`
}

// Task A task represents a particular workload within a pipeline. Tasks are composable within a larger pipeline, meaning they can be run before, after, or alongside other tasks. Tasks represent the lowest level of the Gofer hierarchy and is what Gofer references to see how a user might want their workload handled.
type Task struct {
	// Command Command to run on init of container; follows normal docker convention of command: https://docs.docker.com/reference/dockerfile/#cmd
	Command *[]string `json:"command"`

	// DependsOn Which other tasks (by id) this task depends on.
	DependsOn map[string]RequiredParentStatus `json:"depends_on"`

	// Description Short description about the workload.
	Description string `json:"description"`

	// Entrypoint Command to run on init of container; follows normal docker convention for entrypoint: https://docs.docker.com/reference/dockerfile/#entrypoint
	Entrypoint *[]string `json:"entrypoint"`

	// Id Unique identifier for the task.
	Id string `json:"id"`

	// Image Which container image to run for this specific task.
	//
	// Example: "ubuntu:latest"
	Image string `json:"image"`

	// InjectApiToken Whether to inject a run specific Gofer API key. Useful for using Gofer API within the container.
	InjectApiToken bool `json:"inject_api_token"`

	// RegistryAuth Auth credentials for the image's registry
	RegistryAuth *RegistryAuth `json:"registry_auth"`

	// Variables Variables which will be passed in as env vars to the task.
	Variables []Variable `json:"variables"`
}

// Task2 Represents a single task within a [`Pipeline`]. A task is a unit of work that operates within its own container. Each task defines the operations to be performed and the container environment in which these operations will run.
//
// # Example Usage ```ignore // Define a new task within a pipeline. let task = Task { id: "example_task".to_string(), description: Some("This task executes a simple print command in an Ubuntu container.".to_string()), image: "ubuntu:latest".to_string(), registry_auth: None, depends_on: HashMap::new(), // No dependencies, so it starts immediately when the pipeline runs. variables: HashMap::from([("KEY", "value".to_string())]), entrypoint: None, // Use the image's default entrypoint. command: Some(vec!["echo".to_string(), "Hello World!".to_string()]), inject_api_token: false, }; ```
type Task2 struct {
	Command        *[]string                        `json:"command"`
	DependsOn      map[string]RequiredParentStatus2 `json:"depends_on"`
	Description    *string                          `json:"description"`
	Entrypoint     *[]string                        `json:"entrypoint"`
	Id             string                           `json:"id"`
	Image          string                           `json:"image"`
	InjectApiToken bool                             `json:"inject_api_token"`
	RegistryAuth   *RegistryAuth2                   `json:"registry_auth"`
	Variables      map[string]string                `json:"variables"`
}

// TaskExecution a task execution is a specific execution of a task/container. It represents a 4th level unit in the hierarchy. namespace -> pipeline -> run -> task execution. It is the last and most specific object in Gofer's execution model.
type TaskExecution struct {
	// Created Time of task execution creation in epoch milliseconds.
	Created uint64 `json:"created"`

	// Ended Time of task execution end in epoch milliseconds.
	Ended uint64 `json:"ended"`

	// ExitCode The exit code of the task execution completion if it is finished.
	ExitCode *uint8 `json:"exit_code"`

	// LogsExpired Whether the logs have past their retention time.
	LogsExpired bool `json:"logs_expired"`

	// LogsRemoved If the logs for this execution have been removed. This can be due to user request or automatic action based on expiry time.
	LogsRemoved bool `json:"logs_removed"`

	// NamespaceId Unique identifier of the target namespace.
	NamespaceId string `json:"namespace_id"`

	// PipelineId Unique identifier of the target pipeline.
	PipelineId string `json:"pipeline_id"`

	// RunId Unique identifier of the target run.
	RunId uint64 `json:"run_id"`

	// Started Time of task execution start in epoch milliseconds.
	Started uint64 `json:"started"`

	// State The current state of the task execution within the Gofer execution model. Describes if the execution is in progress or not.
	State TaskExecutionState `json:"state"`

	// Status The final result of the task execution.
	Status TaskExecutionStatus `json:"status"`

	// StatusReason More information on the circumstances around a particular task execution's status.
	StatusReason *TaskExecutionStatusReason `json:"status_reason"`

	// Task Information about the underlying task this task execution ran.
	Task Task `json:"task"`

	// TaskId Unique identifier of the current task being executed.
	TaskId string `json:"task_id"`

	// Variables The environment variables injected during this particular task execution.
	Variables []Variable `json:"variables"`
}

// Token Gofer API Token.
//
// The hash field is skipped during serialization to prevent it from being exposed to the user. This isn't a foolproof practice, but it'll work for now.
type Token struct {
	// Created Time in epoch milliseconds when token was created.
	Created uint64 `json:"created"`

	// Disabled If the token is inactive or not; disabled tokens cannot be used for requests.
	Disabled bool `json:"disabled"`

	// Expires Time in epoch milliseconds when token would expire. An expiry of 0 means that token does not expire.
	Expires uint64 `json:"expires"`

	// Id Unique identifier for token.
	Id string `json:"id"`

	// Metadata Extra information about this token in label form
	Metadata map[string]string `json:"metadata"`

	// Roles The role ids for the current token.
	Roles []string `json:"roles"`

	// User The user of the token in plaintext.
	User string `json:"user"`
}

// UpdateExtensionRequest defines model for UpdateExtensionRequest.
type UpdateExtensionRequest struct {
	Enable bool `json:"enable"`
}

// UpdateNamespaceRequest defines model for UpdateNamespaceRequest.
type UpdateNamespaceRequest struct {
	// Description Short description about what the namespace is used for.
	Description *string `json:"description"`

	// Name Humanized name for the namespace.
	Name *string `json:"name"`
}

// UpdateNamespaceResponse defines model for UpdateNamespaceResponse.
type UpdateNamespaceResponse struct {
	// Namespace Information about the namespace updated.
	Namespace Namespace `json:"namespace"`
}

// UpdatePipelineRequest defines model for UpdatePipelineRequest.
type UpdatePipelineRequest struct {
	State *PipelineState `json:"state"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	// Description Short description about what the role is used for.
	Description *string `json:"description"`

	// Permissions Permissions that the role allows.
	Permissions *[]Permission `json:"permissions"`
}

// UpdateRoleResponse defines model for UpdateRoleResponse.
type UpdateRoleResponse struct {
	// Role Information about the role updated.
	Role Role `json:"role"`
}

// UpdateSubscriptionRequest defines model for UpdateSubscriptionRequest.
type UpdateSubscriptionRequest struct {
	Status *UpdateSubscriptionStatus `json:"status"`
}

// UpdateSubscriptionStatus defines model for UpdateSubscriptionStatus.
type UpdateSubscriptionStatus string

// UpdateSystemPreferencesRequest defines model for UpdateSystemPreferencesRequest.
type UpdateSystemPreferencesRequest struct {
	IgnorePipelineRunEvents *bool `json:"ignore_pipeline_run_events"`
}

// UpdateSystemPreferencesResponse defines model for UpdateSystemPreferencesResponse.
type UpdateSystemPreferencesResponse = map[string]interface{}

// UpdateTokenRequest defines model for UpdateTokenRequest.
type UpdateTokenRequest struct {
	Disabled *bool `json:"disabled"`
}

// Variable A variable is a key value pair that is used either at a run or task level. The variable is inserted as an environment variable to an eventual task execution. It can be owned by different parts of the system which control where the potentially sensitive variables might show up.
type Variable struct {
	Key    string         `json:"key"`
	Source VariableSource `json:"source"`
	Value  string         `json:"value"`
}

// VariableSource defines model for VariableSource.
type VariableSource struct {
	union json.RawMessage
}

// VariableSource0 defines model for VariableSource.0.
type VariableSource0 string

// VariableSource1 From the user's own pipeline configuration.
type VariableSource1 string

// VariableSource2 From the Gofer API executor itself.
type VariableSource2 string

// VariableSource3 Injected at the beginning of a particular run.
type VariableSource3 string

// VariableSource4 Injected by a subscribed extension.
type VariableSource4 string

// WhoAmIResponse defines model for WhoAmIResponse.
type WhoAmIResponse struct {
	// Token The target token.
	Token Token `json:"token"`
}

// DeploymentState defines model for deployment_state.
type DeploymentState struct {
	union json.RawMessage
}

// DeploymentState0 defines model for DeploymentState.0.
type DeploymentState0 string

// DeploymentState1 Should never be in this state.
type DeploymentState1 string

// DeploymentStatus defines model for deployment_status.
type DeploymentStatus struct {
	union json.RawMessage
}

// DeploymentStatus0 Should only be in this state if the deployment is not yet complete.
type DeploymentStatus0 string

// DeploymentStatus1 Has encountered an issue, either container issue or scheduling issue.
type DeploymentStatus1 string

// DeploymentStatus2 Finished with a proper exit code.
type DeploymentStatus2 string

// DeploymentStatusReason defines model for deployment_status_reason.
type DeploymentStatusReason struct {
	// Description A description of why the deployment might have failed and what was going on at the time.
	Description string `json:"description"`

	// Reason The specific type of deployment failure.
	Reason DeploymentStatusReasonType `json:"reason"`
}

// DeploymentStatusReasonType defines model for deployment_status_reason_type.
type DeploymentStatusReasonType string

// ExtensionState defines model for extension_state.
type ExtensionState struct {
	union json.RawMessage
}

// ExtensionState0 Should never be in this state.
type ExtensionState0 string

// ExtensionState1 Pre-scheduling validation and prep.
type ExtensionState1 string

// ExtensionState2 Currently running as reported by scheduler.
type ExtensionState2 string

// ExtensionState3 Extension has exited; usually because of an error.
type ExtensionState3 string

// ExtensionStatus defines model for extension_status.
type ExtensionStatus struct {
	union json.RawMessage
}

// ExtensionStatus0 Cannot determine status of Extension; should never be in this status.
type ExtensionStatus0 string

// ExtensionStatus1 Installed and able to be used by pipelines.
type ExtensionStatus1 string

// ExtensionStatus2 Not available to be used by pipelines, either through lack of installation or being disabled by an admin.
type ExtensionStatus2 string

// RunState The current state of the run. The state is described as the progress of the run towards completion.
type RunState struct {
	union json.RawMessage
}

// RunState0 defines model for RunState.0.
type RunState0 string

// RunState1 Before the tasks in a run are sent to the scheduler it must complete various steps like validation checking. This state represents that step where the run and task executions are pre-checked.
type RunState1 string

// RunState2 Currently running.
type RunState2 string

// RunState3 All tasks have been resolved and the run is no longer being executed.
type RunState3 string

// RunStatus The current status of the run. Status is described as if the run succeeded or not.
type RunStatus struct {
	union json.RawMessage
}

// RunStatus0 Could not determine the current state of the status. Should only be in this state if the run has not yet completed.
type RunStatus0 string

// RunStatus1 One or more tasks in run have failed.
type RunStatus1 string

// RunStatus2 All tasks in a run have completed with a non-failure state.
type RunStatus2 string

// RunStatus3 One or more tasks in a run have been cancelled.
type RunStatus3 string

// RunStatusReason defines model for run_status_reason.
type RunStatusReason struct {
	// Description A description of why the run might have failed and what was going on at the time.
	Description string `json:"description"`

	// Reason The specific type of run failure.
	Reason RunStatusReasonType `json:"reason"`
}

// RunStatusReasonType defines model for run_status_reason_type.
type RunStatusReasonType struct {
	union json.RawMessage
}

// RunStatusReasonType0 Gofer has no fucking clue how the run got into this state.
type RunStatusReasonType0 string

// RunStatusReasonType1 While executing the run, one or more tasks exited with an abnormal exit code.
type RunStatusReasonType1 string

// RunStatusReasonType2 While executing the run, one or more tasks returned errors from the scheduler or could not be scheduled.
type RunStatusReasonType2 string

// RunStatusReasonType3 The run could not be executed as requested due to user defined attributes given.
type RunStatusReasonType3 string

// RunStatusReasonType4 One or more tasks could not be completed due to a user cancelling the run.
type RunStatusReasonType4 string

// RunStatusReasonType5 One or more tasks could not be completed due to the system or admin cancelling the run.
type RunStatusReasonType5 string

// SubscriptionStatus defines model for subscription_status.
type SubscriptionStatus string

// SubscriptionStatusReason defines model for subscription_status_reason.
type SubscriptionStatusReason struct {
	// Description A description of why the subscription might have failed and what was going on at the time.
	Description string `json:"description"`

	// Reason The specific type of subscription failure.
	Reason SubscriptionStatusReasonType `json:"reason"`
}

// SubscriptionStatusReasonType defines model for subscription_status_reason_type.
type SubscriptionStatusReasonType string

// TaskExecutionState defines model for task_execution_state.
type TaskExecutionState struct {
	union json.RawMessage
}

// TaskExecutionState0 defines model for TaskExecutionState.0.
type TaskExecutionState0 string

// TaskExecutionState1 Should never be in this state.
type TaskExecutionState1 string

// TaskExecutionState2 Pre-scheduler validation and prep.
type TaskExecutionState2 string

// TaskExecutionState3 Waiting to be scheduled.
type TaskExecutionState3 string

// TaskExecutionState4 Currently running as reported by scheduler.
type TaskExecutionState4 string

// TaskExecutionStatus defines model for task_execution_status.
type TaskExecutionStatus struct {
	union json.RawMessage
}

// TaskExecutionStatus0 defines model for TaskExecutionStatus.0.
type TaskExecutionStatus0 string

// TaskExecutionStatus1 Has encountered an issue, either container issue or scheduling issue.
type TaskExecutionStatus1 string

// TaskExecutionStatus2 Finished with a proper exit code.
type TaskExecutionStatus2 string

// TaskExecutionStatus3 Cancelled mid run due to user requested cancellation.
type TaskExecutionStatus3 string

// TaskExecutionStatus4 Not run due to dependencies not being met.
type TaskExecutionStatus4 string

// TaskExecutionStatusReason defines model for task_execution_status_reason.
type TaskExecutionStatusReason struct {
	// Description A description of why the task execution might have failed and what was going on at the time.
	Description string `json:"description"`

	// Reason The specific type of task execution failure.
	Reason TaskExecutionStatusReasonType `json:"reason"`
}

// TaskExecutionStatusReasonType defines model for task_execution_status_reason_type.
type TaskExecutionStatusReasonType struct {
	union json.RawMessage
}

// TaskExecutionStatusReasonType0 Gofer has no fucking clue how the run got into this state.
type TaskExecutionStatusReasonType0 string

// TaskExecutionStatusReasonType1 A non-zero exit code has been received.
type TaskExecutionStatusReasonType1 string

// TaskExecutionStatusReasonType2 Encountered an error with the container scheduler.
type TaskExecutionStatusReasonType2 string

// TaskExecutionStatusReasonType3 User error in task execution parameters.
type TaskExecutionStatusReasonType3 string

// TaskExecutionStatusReasonType4 User invoked cancellation.k
type TaskExecutionStatusReasonType4 string

// TaskExecutionStatusReasonType5 Task execution was lost due to extreme internal error.
type TaskExecutionStatusReasonType5 string

// StreamEventsParams defines parameters for StreamEvents.
type StreamEventsParams struct {
	// History If set to true Gofer first exhausts events that have already passed before it starts to stream new events.
	History *bool `form:"history,omitempty" json:"history,omitempty"`

	// Reverse Reverses the order of events by the time they were emitted. By default Gofer lists events in ascending order; setting reverse to true causes events to be in descending order.
	Reverse *bool `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// ListRunsParams defines parameters for ListRuns.
type ListRunsParams struct {
	Limit   *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset  *uint64 `form:"offset,omitempty" json:"offset,omitempty"`
	Reverse *bool   `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// CancelTaskExecutionParams defines parameters for CancelTaskExecution.
type CancelTaskExecutionParams struct {
	// WaitFor Period of time to wait the task before forcing it to cancel. 0 means send SIGKILL instantly.
	WaitFor uint64 `form:"wait_for" json:"wait_for"`
}

// AttachTaskExecutionParams defines parameters for AttachTaskExecution.
type AttachTaskExecutionParams struct {
	Command string `form:"command" json:"command"`
}

// GetPipelineSecretParams defines parameters for GetPipelineSecret.
type GetPipelineSecretParams struct {
	// IncludeSecret Includes the actual plaintext secret in the response.
	IncludeSecret bool `form:"include_secret" json:"include_secret"`
}

// GetGlobalSecretParams defines parameters for GetGlobalSecret.
type GetGlobalSecretParams struct {
	// IncludeSecret Includes the actual plaintext secret in the response.
	IncludeSecret bool `form:"include_secret" json:"include_secret"`
}

// InstallExtensionJSONRequestBody defines body for InstallExtension for application/json ContentType.
type InstallExtensionJSONRequestBody = InstallExtensionRequest

// UpdateExtensionJSONRequestBody defines body for UpdateExtension for application/json ContentType.
type UpdateExtensionJSONRequestBody = UpdateExtensionRequest

// PutExtensionObjectJSONRequestBody defines body for PutExtensionObject for application/json ContentType.
type PutExtensionObjectJSONRequestBody = PutExtensionObjectRequest

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = CreateNamespaceRequest

// UpdateNamespaceJSONRequestBody defines body for UpdateNamespace for application/json ContentType.
type UpdateNamespaceJSONRequestBody = UpdateNamespaceRequest

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody = UpdatePipelineRequest

// RegisterConfigJSONRequestBody defines body for RegisterConfig for application/json ContentType.
type RegisterConfigJSONRequestBody = RegisterPipelineConfigRequest

// PutPipelineObjectJSONRequestBody defines body for PutPipelineObject for application/json ContentType.
type PutPipelineObjectJSONRequestBody = PutPipelineObjectRequest

// StartRunJSONRequestBody defines body for StartRun for application/json ContentType.
type StartRunJSONRequestBody = StartRunRequest

// PutRunObjectJSONRequestBody defines body for PutRunObject for application/json ContentType.
type PutRunObjectJSONRequestBody = PutRunObjectRequest

// PutPipelineSecretJSONRequestBody defines body for PutPipelineSecret for application/json ContentType.
type PutPipelineSecretJSONRequestBody = PutPipelineSecretRequest

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = CreateSubscriptionRequest

// UpdateSubscriptionJSONRequestBody defines body for UpdateSubscription for application/json ContentType.
type UpdateSubscriptionJSONRequestBody = UpdateSubscriptionRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// PutGlobalSecretJSONRequestBody defines body for PutGlobalSecret for application/json ContentType.
type PutGlobalSecretJSONRequestBody = PutGlobalSecretRequest

// UpdateSystemPreferencesJSONRequestBody defines body for UpdateSystemPreferences for application/json ContentType.
type UpdateSystemPreferencesJSONRequestBody = UpdateSystemPreferencesRequest

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = CreateTokenRequest

// UpdateTokenJSONRequestBody defines body for UpdateToken for application/json ContentType.
type UpdateTokenJSONRequestBody = UpdateTokenRequest

// AsConfigState0 returns the union data inside the ConfigState as a ConfigState0
func (t ConfigState) AsConfigState0() (ConfigState0, error) {
	var body ConfigState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigState0 overwrites any union data inside the ConfigState as the provided ConfigState0
func (t *ConfigState) FromConfigState0(v ConfigState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigState0 performs a merge with any union data inside the ConfigState, using the provided ConfigState0
func (t *ConfigState) MergeConfigState0(v ConfigState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigState1 returns the union data inside the ConfigState as a ConfigState1
func (t ConfigState) AsConfigState1() (ConfigState1, error) {
	var body ConfigState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigState1 overwrites any union data inside the ConfigState as the provided ConfigState1
func (t *ConfigState) FromConfigState1(v ConfigState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigState1 performs a merge with any union data inside the ConfigState, using the provided ConfigState1
func (t *ConfigState) MergeConfigState1(v ConfigState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigState2 returns the union data inside the ConfigState as a ConfigState2
func (t ConfigState) AsConfigState2() (ConfigState2, error) {
	var body ConfigState2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigState2 overwrites any union data inside the ConfigState as the provided ConfigState2
func (t *ConfigState) FromConfigState2(v ConfigState2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigState2 performs a merge with any union data inside the ConfigState, using the provided ConfigState2
func (t *ConfigState) MergeConfigState2(v ConfigState2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigState3 returns the union data inside the ConfigState as a ConfigState3
func (t ConfigState) AsConfigState3() (ConfigState3, error) {
	var body ConfigState3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigState3 overwrites any union data inside the ConfigState as the provided ConfigState3
func (t *ConfigState) FromConfigState3(v ConfigState3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigState3 performs a merge with any union data inside the ConfigState, using the provided ConfigState3
func (t *ConfigState) MergeConfigState3(v ConfigState3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfigState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfigState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsKind0 returns the union data inside the Kind as a Kind0
func (t Kind) AsKind0() (Kind0, error) {
	var body Kind0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind0 overwrites any union data inside the Kind as the provided Kind0
func (t *Kind) FromKind0(v Kind0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind0 performs a merge with any union data inside the Kind, using the provided Kind0
func (t *Kind) MergeKind0(v Kind0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind1 returns the union data inside the Kind as a Kind1
func (t Kind) AsKind1() (Kind1, error) {
	var body Kind1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind1 overwrites any union data inside the Kind as the provided Kind1
func (t *Kind) FromKind1(v Kind1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind1 performs a merge with any union data inside the Kind, using the provided Kind1
func (t *Kind) MergeKind1(v Kind1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind2 returns the union data inside the Kind as a Kind2
func (t Kind) AsKind2() (Kind2, error) {
	var body Kind2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind2 overwrites any union data inside the Kind as the provided Kind2
func (t *Kind) FromKind2(v Kind2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind2 performs a merge with any union data inside the Kind, using the provided Kind2
func (t *Kind) MergeKind2(v Kind2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind3 returns the union data inside the Kind as a Kind3
func (t Kind) AsKind3() (Kind3, error) {
	var body Kind3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind3 overwrites any union data inside the Kind as the provided Kind3
func (t *Kind) FromKind3(v Kind3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind3 performs a merge with any union data inside the Kind, using the provided Kind3
func (t *Kind) MergeKind3(v Kind3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind4 returns the union data inside the Kind as a Kind4
func (t Kind) AsKind4() (Kind4, error) {
	var body Kind4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind4 overwrites any union data inside the Kind as the provided Kind4
func (t *Kind) FromKind4(v Kind4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind4 performs a merge with any union data inside the Kind, using the provided Kind4
func (t *Kind) MergeKind4(v Kind4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind5 returns the union data inside the Kind as a Kind5
func (t Kind) AsKind5() (Kind5, error) {
	var body Kind5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind5 overwrites any union data inside the Kind as the provided Kind5
func (t *Kind) FromKind5(v Kind5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind5 performs a merge with any union data inside the Kind, using the provided Kind5
func (t *Kind) MergeKind5(v Kind5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind6 returns the union data inside the Kind as a Kind6
func (t Kind) AsKind6() (Kind6, error) {
	var body Kind6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind6 overwrites any union data inside the Kind as the provided Kind6
func (t *Kind) FromKind6(v Kind6) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind6 performs a merge with any union data inside the Kind, using the provided Kind6
func (t *Kind) MergeKind6(v Kind6) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind7 returns the union data inside the Kind as a Kind7
func (t Kind) AsKind7() (Kind7, error) {
	var body Kind7
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind7 overwrites any union data inside the Kind as the provided Kind7
func (t *Kind) FromKind7(v Kind7) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind7 performs a merge with any union data inside the Kind, using the provided Kind7
func (t *Kind) MergeKind7(v Kind7) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind8 returns the union data inside the Kind as a Kind8
func (t Kind) AsKind8() (Kind8, error) {
	var body Kind8
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind8 overwrites any union data inside the Kind as the provided Kind8
func (t *Kind) FromKind8(v Kind8) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind8 performs a merge with any union data inside the Kind, using the provided Kind8
func (t *Kind) MergeKind8(v Kind8) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind9 returns the union data inside the Kind as a Kind9
func (t Kind) AsKind9() (Kind9, error) {
	var body Kind9
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind9 overwrites any union data inside the Kind as the provided Kind9
func (t *Kind) FromKind9(v Kind9) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind9 performs a merge with any union data inside the Kind, using the provided Kind9
func (t *Kind) MergeKind9(v Kind9) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind10 returns the union data inside the Kind as a Kind10
func (t Kind) AsKind10() (Kind10, error) {
	var body Kind10
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind10 overwrites any union data inside the Kind as the provided Kind10
func (t *Kind) FromKind10(v Kind10) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind10 performs a merge with any union data inside the Kind, using the provided Kind10
func (t *Kind) MergeKind10(v Kind10) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind11 returns the union data inside the Kind as a Kind11
func (t Kind) AsKind11() (Kind11, error) {
	var body Kind11
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind11 overwrites any union data inside the Kind as the provided Kind11
func (t *Kind) FromKind11(v Kind11) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind11 performs a merge with any union data inside the Kind, using the provided Kind11
func (t *Kind) MergeKind11(v Kind11) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind12 returns the union data inside the Kind as a Kind12
func (t Kind) AsKind12() (Kind12, error) {
	var body Kind12
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind12 overwrites any union data inside the Kind as the provided Kind12
func (t *Kind) FromKind12(v Kind12) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind12 performs a merge with any union data inside the Kind, using the provided Kind12
func (t *Kind) MergeKind12(v Kind12) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind13 returns the union data inside the Kind as a Kind13
func (t Kind) AsKind13() (Kind13, error) {
	var body Kind13
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind13 overwrites any union data inside the Kind as the provided Kind13
func (t *Kind) FromKind13(v Kind13) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind13 performs a merge with any union data inside the Kind, using the provided Kind13
func (t *Kind) MergeKind13(v Kind13) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind14 returns the union data inside the Kind as a Kind14
func (t Kind) AsKind14() (Kind14, error) {
	var body Kind14
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind14 overwrites any union data inside the Kind as the provided Kind14
func (t *Kind) FromKind14(v Kind14) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind14 performs a merge with any union data inside the Kind, using the provided Kind14
func (t *Kind) MergeKind14(v Kind14) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind15 returns the union data inside the Kind as a Kind15
func (t Kind) AsKind15() (Kind15, error) {
	var body Kind15
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind15 overwrites any union data inside the Kind as the provided Kind15
func (t *Kind) FromKind15(v Kind15) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind15 performs a merge with any union data inside the Kind, using the provided Kind15
func (t *Kind) MergeKind15(v Kind15) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind16 returns the union data inside the Kind as a Kind16
func (t Kind) AsKind16() (Kind16, error) {
	var body Kind16
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind16 overwrites any union data inside the Kind as the provided Kind16
func (t *Kind) FromKind16(v Kind16) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind16 performs a merge with any union data inside the Kind, using the provided Kind16
func (t *Kind) MergeKind16(v Kind16) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind17 returns the union data inside the Kind as a Kind17
func (t Kind) AsKind17() (Kind17, error) {
	var body Kind17
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind17 overwrites any union data inside the Kind as the provided Kind17
func (t *Kind) FromKind17(v Kind17) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind17 performs a merge with any union data inside the Kind, using the provided Kind17
func (t *Kind) MergeKind17(v Kind17) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind18 returns the union data inside the Kind as a Kind18
func (t Kind) AsKind18() (Kind18, error) {
	var body Kind18
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind18 overwrites any union data inside the Kind as the provided Kind18
func (t *Kind) FromKind18(v Kind18) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind18 performs a merge with any union data inside the Kind, using the provided Kind18
func (t *Kind) MergeKind18(v Kind18) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind19 returns the union data inside the Kind as a Kind19
func (t Kind) AsKind19() (Kind19, error) {
	var body Kind19
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind19 overwrites any union data inside the Kind as the provided Kind19
func (t *Kind) FromKind19(v Kind19) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind19 performs a merge with any union data inside the Kind, using the provided Kind19
func (t *Kind) MergeKind19(v Kind19) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind20 returns the union data inside the Kind as a Kind20
func (t Kind) AsKind20() (Kind20, error) {
	var body Kind20
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind20 overwrites any union data inside the Kind as the provided Kind20
func (t *Kind) FromKind20(v Kind20) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind20 performs a merge with any union data inside the Kind, using the provided Kind20
func (t *Kind) MergeKind20(v Kind20) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind21 returns the union data inside the Kind as a Kind21
func (t Kind) AsKind21() (Kind21, error) {
	var body Kind21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind21 overwrites any union data inside the Kind as the provided Kind21
func (t *Kind) FromKind21(v Kind21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind21 performs a merge with any union data inside the Kind, using the provided Kind21
func (t *Kind) MergeKind21(v Kind21) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind22 returns the union data inside the Kind as a Kind22
func (t Kind) AsKind22() (Kind22, error) {
	var body Kind22
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind22 overwrites any union data inside the Kind as the provided Kind22
func (t *Kind) FromKind22(v Kind22) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind22 performs a merge with any union data inside the Kind, using the provided Kind22
func (t *Kind) MergeKind22(v Kind22) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKind23 returns the union data inside the Kind as a Kind23
func (t Kind) AsKind23() (Kind23, error) {
	var body Kind23
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKind23 overwrites any union data inside the Kind as the provided Kind23
func (t *Kind) FromKind23(v Kind23) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKind23 performs a merge with any union data inside the Kind, using the provided Kind23
func (t *Kind) MergeKind23(v Kind23) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Kind) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Kind) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVariableSource0 returns the union data inside the VariableSource as a VariableSource0
func (t VariableSource) AsVariableSource0() (VariableSource0, error) {
	var body VariableSource0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableSource0 overwrites any union data inside the VariableSource as the provided VariableSource0
func (t *VariableSource) FromVariableSource0(v VariableSource0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableSource0 performs a merge with any union data inside the VariableSource, using the provided VariableSource0
func (t *VariableSource) MergeVariableSource0(v VariableSource0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableSource1 returns the union data inside the VariableSource as a VariableSource1
func (t VariableSource) AsVariableSource1() (VariableSource1, error) {
	var body VariableSource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableSource1 overwrites any union data inside the VariableSource as the provided VariableSource1
func (t *VariableSource) FromVariableSource1(v VariableSource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableSource1 performs a merge with any union data inside the VariableSource, using the provided VariableSource1
func (t *VariableSource) MergeVariableSource1(v VariableSource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableSource2 returns the union data inside the VariableSource as a VariableSource2
func (t VariableSource) AsVariableSource2() (VariableSource2, error) {
	var body VariableSource2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableSource2 overwrites any union data inside the VariableSource as the provided VariableSource2
func (t *VariableSource) FromVariableSource2(v VariableSource2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableSource2 performs a merge with any union data inside the VariableSource, using the provided VariableSource2
func (t *VariableSource) MergeVariableSource2(v VariableSource2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableSource3 returns the union data inside the VariableSource as a VariableSource3
func (t VariableSource) AsVariableSource3() (VariableSource3, error) {
	var body VariableSource3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableSource3 overwrites any union data inside the VariableSource as the provided VariableSource3
func (t *VariableSource) FromVariableSource3(v VariableSource3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableSource3 performs a merge with any union data inside the VariableSource, using the provided VariableSource3
func (t *VariableSource) MergeVariableSource3(v VariableSource3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableSource4 returns the union data inside the VariableSource as a VariableSource4
func (t VariableSource) AsVariableSource4() (VariableSource4, error) {
	var body VariableSource4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableSource4 overwrites any union data inside the VariableSource as the provided VariableSource4
func (t *VariableSource) FromVariableSource4(v VariableSource4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableSource4 performs a merge with any union data inside the VariableSource, using the provided VariableSource4
func (t *VariableSource) MergeVariableSource4(v VariableSource4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VariableSource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VariableSource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeploymentState0 returns the union data inside the DeploymentState as a DeploymentState0
func (t DeploymentState) AsDeploymentState0() (DeploymentState0, error) {
	var body DeploymentState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeploymentState0 overwrites any union data inside the DeploymentState as the provided DeploymentState0
func (t *DeploymentState) FromDeploymentState0(v DeploymentState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeploymentState0 performs a merge with any union data inside the DeploymentState, using the provided DeploymentState0
func (t *DeploymentState) MergeDeploymentState0(v DeploymentState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeploymentState1 returns the union data inside the DeploymentState as a DeploymentState1
func (t DeploymentState) AsDeploymentState1() (DeploymentState1, error) {
	var body DeploymentState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeploymentState1 overwrites any union data inside the DeploymentState as the provided DeploymentState1
func (t *DeploymentState) FromDeploymentState1(v DeploymentState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeploymentState1 performs a merge with any union data inside the DeploymentState, using the provided DeploymentState1
func (t *DeploymentState) MergeDeploymentState1(v DeploymentState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeploymentState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeploymentState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeploymentStatus0 returns the union data inside the DeploymentStatus as a DeploymentStatus0
func (t DeploymentStatus) AsDeploymentStatus0() (DeploymentStatus0, error) {
	var body DeploymentStatus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeploymentStatus0 overwrites any union data inside the DeploymentStatus as the provided DeploymentStatus0
func (t *DeploymentStatus) FromDeploymentStatus0(v DeploymentStatus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeploymentStatus0 performs a merge with any union data inside the DeploymentStatus, using the provided DeploymentStatus0
func (t *DeploymentStatus) MergeDeploymentStatus0(v DeploymentStatus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeploymentStatus1 returns the union data inside the DeploymentStatus as a DeploymentStatus1
func (t DeploymentStatus) AsDeploymentStatus1() (DeploymentStatus1, error) {
	var body DeploymentStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeploymentStatus1 overwrites any union data inside the DeploymentStatus as the provided DeploymentStatus1
func (t *DeploymentStatus) FromDeploymentStatus1(v DeploymentStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeploymentStatus1 performs a merge with any union data inside the DeploymentStatus, using the provided DeploymentStatus1
func (t *DeploymentStatus) MergeDeploymentStatus1(v DeploymentStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeploymentStatus2 returns the union data inside the DeploymentStatus as a DeploymentStatus2
func (t DeploymentStatus) AsDeploymentStatus2() (DeploymentStatus2, error) {
	var body DeploymentStatus2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeploymentStatus2 overwrites any union data inside the DeploymentStatus as the provided DeploymentStatus2
func (t *DeploymentStatus) FromDeploymentStatus2(v DeploymentStatus2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeploymentStatus2 performs a merge with any union data inside the DeploymentStatus, using the provided DeploymentStatus2
func (t *DeploymentStatus) MergeDeploymentStatus2(v DeploymentStatus2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeploymentStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeploymentStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtensionState0 returns the union data inside the ExtensionState as a ExtensionState0
func (t ExtensionState) AsExtensionState0() (ExtensionState0, error) {
	var body ExtensionState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionState0 overwrites any union data inside the ExtensionState as the provided ExtensionState0
func (t *ExtensionState) FromExtensionState0(v ExtensionState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionState0 performs a merge with any union data inside the ExtensionState, using the provided ExtensionState0
func (t *ExtensionState) MergeExtensionState0(v ExtensionState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtensionState1 returns the union data inside the ExtensionState as a ExtensionState1
func (t ExtensionState) AsExtensionState1() (ExtensionState1, error) {
	var body ExtensionState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionState1 overwrites any union data inside the ExtensionState as the provided ExtensionState1
func (t *ExtensionState) FromExtensionState1(v ExtensionState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionState1 performs a merge with any union data inside the ExtensionState, using the provided ExtensionState1
func (t *ExtensionState) MergeExtensionState1(v ExtensionState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtensionState2 returns the union data inside the ExtensionState as a ExtensionState2
func (t ExtensionState) AsExtensionState2() (ExtensionState2, error) {
	var body ExtensionState2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionState2 overwrites any union data inside the ExtensionState as the provided ExtensionState2
func (t *ExtensionState) FromExtensionState2(v ExtensionState2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionState2 performs a merge with any union data inside the ExtensionState, using the provided ExtensionState2
func (t *ExtensionState) MergeExtensionState2(v ExtensionState2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtensionState3 returns the union data inside the ExtensionState as a ExtensionState3
func (t ExtensionState) AsExtensionState3() (ExtensionState3, error) {
	var body ExtensionState3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionState3 overwrites any union data inside the ExtensionState as the provided ExtensionState3
func (t *ExtensionState) FromExtensionState3(v ExtensionState3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionState3 performs a merge with any union data inside the ExtensionState, using the provided ExtensionState3
func (t *ExtensionState) MergeExtensionState3(v ExtensionState3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtensionState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtensionState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtensionStatus0 returns the union data inside the ExtensionStatus as a ExtensionStatus0
func (t ExtensionStatus) AsExtensionStatus0() (ExtensionStatus0, error) {
	var body ExtensionStatus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionStatus0 overwrites any union data inside the ExtensionStatus as the provided ExtensionStatus0
func (t *ExtensionStatus) FromExtensionStatus0(v ExtensionStatus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionStatus0 performs a merge with any union data inside the ExtensionStatus, using the provided ExtensionStatus0
func (t *ExtensionStatus) MergeExtensionStatus0(v ExtensionStatus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtensionStatus1 returns the union data inside the ExtensionStatus as a ExtensionStatus1
func (t ExtensionStatus) AsExtensionStatus1() (ExtensionStatus1, error) {
	var body ExtensionStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionStatus1 overwrites any union data inside the ExtensionStatus as the provided ExtensionStatus1
func (t *ExtensionStatus) FromExtensionStatus1(v ExtensionStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionStatus1 performs a merge with any union data inside the ExtensionStatus, using the provided ExtensionStatus1
func (t *ExtensionStatus) MergeExtensionStatus1(v ExtensionStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtensionStatus2 returns the union data inside the ExtensionStatus as a ExtensionStatus2
func (t ExtensionStatus) AsExtensionStatus2() (ExtensionStatus2, error) {
	var body ExtensionStatus2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtensionStatus2 overwrites any union data inside the ExtensionStatus as the provided ExtensionStatus2
func (t *ExtensionStatus) FromExtensionStatus2(v ExtensionStatus2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtensionStatus2 performs a merge with any union data inside the ExtensionStatus, using the provided ExtensionStatus2
func (t *ExtensionStatus) MergeExtensionStatus2(v ExtensionStatus2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtensionStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtensionStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunState0 returns the union data inside the RunState as a RunState0
func (t RunState) AsRunState0() (RunState0, error) {
	var body RunState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunState0 overwrites any union data inside the RunState as the provided RunState0
func (t *RunState) FromRunState0(v RunState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunState0 performs a merge with any union data inside the RunState, using the provided RunState0
func (t *RunState) MergeRunState0(v RunState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunState1 returns the union data inside the RunState as a RunState1
func (t RunState) AsRunState1() (RunState1, error) {
	var body RunState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunState1 overwrites any union data inside the RunState as the provided RunState1
func (t *RunState) FromRunState1(v RunState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunState1 performs a merge with any union data inside the RunState, using the provided RunState1
func (t *RunState) MergeRunState1(v RunState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunState2 returns the union data inside the RunState as a RunState2
func (t RunState) AsRunState2() (RunState2, error) {
	var body RunState2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunState2 overwrites any union data inside the RunState as the provided RunState2
func (t *RunState) FromRunState2(v RunState2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunState2 performs a merge with any union data inside the RunState, using the provided RunState2
func (t *RunState) MergeRunState2(v RunState2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunState3 returns the union data inside the RunState as a RunState3
func (t RunState) AsRunState3() (RunState3, error) {
	var body RunState3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunState3 overwrites any union data inside the RunState as the provided RunState3
func (t *RunState) FromRunState3(v RunState3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunState3 performs a merge with any union data inside the RunState, using the provided RunState3
func (t *RunState) MergeRunState3(v RunState3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStatus0 returns the union data inside the RunStatus as a RunStatus0
func (t RunStatus) AsRunStatus0() (RunStatus0, error) {
	var body RunStatus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatus0 overwrites any union data inside the RunStatus as the provided RunStatus0
func (t *RunStatus) FromRunStatus0(v RunStatus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatus0 performs a merge with any union data inside the RunStatus, using the provided RunStatus0
func (t *RunStatus) MergeRunStatus0(v RunStatus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatus1 returns the union data inside the RunStatus as a RunStatus1
func (t RunStatus) AsRunStatus1() (RunStatus1, error) {
	var body RunStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatus1 overwrites any union data inside the RunStatus as the provided RunStatus1
func (t *RunStatus) FromRunStatus1(v RunStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatus1 performs a merge with any union data inside the RunStatus, using the provided RunStatus1
func (t *RunStatus) MergeRunStatus1(v RunStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatus2 returns the union data inside the RunStatus as a RunStatus2
func (t RunStatus) AsRunStatus2() (RunStatus2, error) {
	var body RunStatus2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatus2 overwrites any union data inside the RunStatus as the provided RunStatus2
func (t *RunStatus) FromRunStatus2(v RunStatus2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatus2 performs a merge with any union data inside the RunStatus, using the provided RunStatus2
func (t *RunStatus) MergeRunStatus2(v RunStatus2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatus3 returns the union data inside the RunStatus as a RunStatus3
func (t RunStatus) AsRunStatus3() (RunStatus3, error) {
	var body RunStatus3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatus3 overwrites any union data inside the RunStatus as the provided RunStatus3
func (t *RunStatus) FromRunStatus3(v RunStatus3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatus3 performs a merge with any union data inside the RunStatus, using the provided RunStatus3
func (t *RunStatus) MergeRunStatus3(v RunStatus3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRunStatusReasonType0 returns the union data inside the RunStatusReasonType as a RunStatusReasonType0
func (t RunStatusReasonType) AsRunStatusReasonType0() (RunStatusReasonType0, error) {
	var body RunStatusReasonType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType0 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType0
func (t *RunStatusReasonType) FromRunStatusReasonType0(v RunStatusReasonType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType0 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType0
func (t *RunStatusReasonType) MergeRunStatusReasonType0(v RunStatusReasonType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatusReasonType1 returns the union data inside the RunStatusReasonType as a RunStatusReasonType1
func (t RunStatusReasonType) AsRunStatusReasonType1() (RunStatusReasonType1, error) {
	var body RunStatusReasonType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType1 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType1
func (t *RunStatusReasonType) FromRunStatusReasonType1(v RunStatusReasonType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType1 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType1
func (t *RunStatusReasonType) MergeRunStatusReasonType1(v RunStatusReasonType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatusReasonType2 returns the union data inside the RunStatusReasonType as a RunStatusReasonType2
func (t RunStatusReasonType) AsRunStatusReasonType2() (RunStatusReasonType2, error) {
	var body RunStatusReasonType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType2 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType2
func (t *RunStatusReasonType) FromRunStatusReasonType2(v RunStatusReasonType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType2 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType2
func (t *RunStatusReasonType) MergeRunStatusReasonType2(v RunStatusReasonType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatusReasonType3 returns the union data inside the RunStatusReasonType as a RunStatusReasonType3
func (t RunStatusReasonType) AsRunStatusReasonType3() (RunStatusReasonType3, error) {
	var body RunStatusReasonType3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType3 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType3
func (t *RunStatusReasonType) FromRunStatusReasonType3(v RunStatusReasonType3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType3 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType3
func (t *RunStatusReasonType) MergeRunStatusReasonType3(v RunStatusReasonType3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatusReasonType4 returns the union data inside the RunStatusReasonType as a RunStatusReasonType4
func (t RunStatusReasonType) AsRunStatusReasonType4() (RunStatusReasonType4, error) {
	var body RunStatusReasonType4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType4 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType4
func (t *RunStatusReasonType) FromRunStatusReasonType4(v RunStatusReasonType4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType4 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType4
func (t *RunStatusReasonType) MergeRunStatusReasonType4(v RunStatusReasonType4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunStatusReasonType5 returns the union data inside the RunStatusReasonType as a RunStatusReasonType5
func (t RunStatusReasonType) AsRunStatusReasonType5() (RunStatusReasonType5, error) {
	var body RunStatusReasonType5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunStatusReasonType5 overwrites any union data inside the RunStatusReasonType as the provided RunStatusReasonType5
func (t *RunStatusReasonType) FromRunStatusReasonType5(v RunStatusReasonType5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunStatusReasonType5 performs a merge with any union data inside the RunStatusReasonType, using the provided RunStatusReasonType5
func (t *RunStatusReasonType) MergeRunStatusReasonType5(v RunStatusReasonType5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunStatusReasonType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunStatusReasonType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskExecutionState0 returns the union data inside the TaskExecutionState as a TaskExecutionState0
func (t TaskExecutionState) AsTaskExecutionState0() (TaskExecutionState0, error) {
	var body TaskExecutionState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionState0 overwrites any union data inside the TaskExecutionState as the provided TaskExecutionState0
func (t *TaskExecutionState) FromTaskExecutionState0(v TaskExecutionState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionState0 performs a merge with any union data inside the TaskExecutionState, using the provided TaskExecutionState0
func (t *TaskExecutionState) MergeTaskExecutionState0(v TaskExecutionState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionState1 returns the union data inside the TaskExecutionState as a TaskExecutionState1
func (t TaskExecutionState) AsTaskExecutionState1() (TaskExecutionState1, error) {
	var body TaskExecutionState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionState1 overwrites any union data inside the TaskExecutionState as the provided TaskExecutionState1
func (t *TaskExecutionState) FromTaskExecutionState1(v TaskExecutionState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionState1 performs a merge with any union data inside the TaskExecutionState, using the provided TaskExecutionState1
func (t *TaskExecutionState) MergeTaskExecutionState1(v TaskExecutionState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionState2 returns the union data inside the TaskExecutionState as a TaskExecutionState2
func (t TaskExecutionState) AsTaskExecutionState2() (TaskExecutionState2, error) {
	var body TaskExecutionState2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionState2 overwrites any union data inside the TaskExecutionState as the provided TaskExecutionState2
func (t *TaskExecutionState) FromTaskExecutionState2(v TaskExecutionState2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionState2 performs a merge with any union data inside the TaskExecutionState, using the provided TaskExecutionState2
func (t *TaskExecutionState) MergeTaskExecutionState2(v TaskExecutionState2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionState3 returns the union data inside the TaskExecutionState as a TaskExecutionState3
func (t TaskExecutionState) AsTaskExecutionState3() (TaskExecutionState3, error) {
	var body TaskExecutionState3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionState3 overwrites any union data inside the TaskExecutionState as the provided TaskExecutionState3
func (t *TaskExecutionState) FromTaskExecutionState3(v TaskExecutionState3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionState3 performs a merge with any union data inside the TaskExecutionState, using the provided TaskExecutionState3
func (t *TaskExecutionState) MergeTaskExecutionState3(v TaskExecutionState3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionState4 returns the union data inside the TaskExecutionState as a TaskExecutionState4
func (t TaskExecutionState) AsTaskExecutionState4() (TaskExecutionState4, error) {
	var body TaskExecutionState4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionState4 overwrites any union data inside the TaskExecutionState as the provided TaskExecutionState4
func (t *TaskExecutionState) FromTaskExecutionState4(v TaskExecutionState4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionState4 performs a merge with any union data inside the TaskExecutionState, using the provided TaskExecutionState4
func (t *TaskExecutionState) MergeTaskExecutionState4(v TaskExecutionState4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaskExecutionState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaskExecutionState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskExecutionStatus0 returns the union data inside the TaskExecutionStatus as a TaskExecutionStatus0
func (t TaskExecutionStatus) AsTaskExecutionStatus0() (TaskExecutionStatus0, error) {
	var body TaskExecutionStatus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatus0 overwrites any union data inside the TaskExecutionStatus as the provided TaskExecutionStatus0
func (t *TaskExecutionStatus) FromTaskExecutionStatus0(v TaskExecutionStatus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatus0 performs a merge with any union data inside the TaskExecutionStatus, using the provided TaskExecutionStatus0
func (t *TaskExecutionStatus) MergeTaskExecutionStatus0(v TaskExecutionStatus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatus1 returns the union data inside the TaskExecutionStatus as a TaskExecutionStatus1
func (t TaskExecutionStatus) AsTaskExecutionStatus1() (TaskExecutionStatus1, error) {
	var body TaskExecutionStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatus1 overwrites any union data inside the TaskExecutionStatus as the provided TaskExecutionStatus1
func (t *TaskExecutionStatus) FromTaskExecutionStatus1(v TaskExecutionStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatus1 performs a merge with any union data inside the TaskExecutionStatus, using the provided TaskExecutionStatus1
func (t *TaskExecutionStatus) MergeTaskExecutionStatus1(v TaskExecutionStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatus2 returns the union data inside the TaskExecutionStatus as a TaskExecutionStatus2
func (t TaskExecutionStatus) AsTaskExecutionStatus2() (TaskExecutionStatus2, error) {
	var body TaskExecutionStatus2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatus2 overwrites any union data inside the TaskExecutionStatus as the provided TaskExecutionStatus2
func (t *TaskExecutionStatus) FromTaskExecutionStatus2(v TaskExecutionStatus2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatus2 performs a merge with any union data inside the TaskExecutionStatus, using the provided TaskExecutionStatus2
func (t *TaskExecutionStatus) MergeTaskExecutionStatus2(v TaskExecutionStatus2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatus3 returns the union data inside the TaskExecutionStatus as a TaskExecutionStatus3
func (t TaskExecutionStatus) AsTaskExecutionStatus3() (TaskExecutionStatus3, error) {
	var body TaskExecutionStatus3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatus3 overwrites any union data inside the TaskExecutionStatus as the provided TaskExecutionStatus3
func (t *TaskExecutionStatus) FromTaskExecutionStatus3(v TaskExecutionStatus3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatus3 performs a merge with any union data inside the TaskExecutionStatus, using the provided TaskExecutionStatus3
func (t *TaskExecutionStatus) MergeTaskExecutionStatus3(v TaskExecutionStatus3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatus4 returns the union data inside the TaskExecutionStatus as a TaskExecutionStatus4
func (t TaskExecutionStatus) AsTaskExecutionStatus4() (TaskExecutionStatus4, error) {
	var body TaskExecutionStatus4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatus4 overwrites any union data inside the TaskExecutionStatus as the provided TaskExecutionStatus4
func (t *TaskExecutionStatus) FromTaskExecutionStatus4(v TaskExecutionStatus4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatus4 performs a merge with any union data inside the TaskExecutionStatus, using the provided TaskExecutionStatus4
func (t *TaskExecutionStatus) MergeTaskExecutionStatus4(v TaskExecutionStatus4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaskExecutionStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaskExecutionStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskExecutionStatusReasonType0 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType0
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType0() (TaskExecutionStatusReasonType0, error) {
	var body TaskExecutionStatusReasonType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType0 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType0
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType0(v TaskExecutionStatusReasonType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType0 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType0
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType0(v TaskExecutionStatusReasonType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatusReasonType1 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType1
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType1() (TaskExecutionStatusReasonType1, error) {
	var body TaskExecutionStatusReasonType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType1 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType1
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType1(v TaskExecutionStatusReasonType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType1 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType1
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType1(v TaskExecutionStatusReasonType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatusReasonType2 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType2
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType2() (TaskExecutionStatusReasonType2, error) {
	var body TaskExecutionStatusReasonType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType2 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType2
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType2(v TaskExecutionStatusReasonType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType2 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType2
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType2(v TaskExecutionStatusReasonType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatusReasonType3 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType3
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType3() (TaskExecutionStatusReasonType3, error) {
	var body TaskExecutionStatusReasonType3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType3 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType3
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType3(v TaskExecutionStatusReasonType3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType3 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType3
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType3(v TaskExecutionStatusReasonType3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatusReasonType4 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType4
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType4() (TaskExecutionStatusReasonType4, error) {
	var body TaskExecutionStatusReasonType4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType4 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType4
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType4(v TaskExecutionStatusReasonType4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType4 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType4
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType4(v TaskExecutionStatusReasonType4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskExecutionStatusReasonType5 returns the union data inside the TaskExecutionStatusReasonType as a TaskExecutionStatusReasonType5
func (t TaskExecutionStatusReasonType) AsTaskExecutionStatusReasonType5() (TaskExecutionStatusReasonType5, error) {
	var body TaskExecutionStatusReasonType5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskExecutionStatusReasonType5 overwrites any union data inside the TaskExecutionStatusReasonType as the provided TaskExecutionStatusReasonType5
func (t *TaskExecutionStatusReasonType) FromTaskExecutionStatusReasonType5(v TaskExecutionStatusReasonType5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskExecutionStatusReasonType5 performs a merge with any union data inside the TaskExecutionStatusReasonType, using the provided TaskExecutionStatusReasonType5
func (t *TaskExecutionStatusReasonType) MergeTaskExecutionStatusReasonType5(v TaskExecutionStatusReasonType5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaskExecutionStatusReasonType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaskExecutionStatusReasonType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// StreamEvents request
	StreamEvents(ctx context.Context, params *StreamEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEvent request
	DeleteEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvent request
	GetEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExtensions request
	ListExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallExtensionWithBody request with any body
	InstallExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallExtension(ctx context.Context, body InstallExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UninstallExtension request
	UninstallExtension(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtension request
	GetExtension(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateExtensionWithBody request with any body
	UpdateExtensionWithBody(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateExtension(ctx context.Context, extensionId string, body UpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensionDebugInfo request
	GetExtensionDebugInfo(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensionLogs request
	GetExtensionLogs(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExtensionObjects request
	ListExtensionObjects(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutExtensionObjectWithBody request with any body
	PutExtensionObjectWithBody(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutExtensionObject(ctx context.Context, extensionId string, body PutExtensionObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExtensionObject request
	DeleteExtensionObject(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensionObject request
	GetExtensionObject(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExtensionSubscriptions request
	ListExtensionSubscriptions(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNamespaces request
	ListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNamespaceWithBody request with any body
	CreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNamespace(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNamespace request
	DeleteNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNamespace request
	GetNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNamespaceWithBody request with any body
	UpdateNamespaceWithBody(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNamespace(ctx context.Context, namespaceId string, body UpdateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelines request
	ListPipelines(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipeline request
	DeletePipeline(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipeline request
	GetPipeline(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineWithBody request with any body
	UpdatePipelineWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePipeline(ctx context.Context, namespaceId string, pipelineId string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConfigs request
	ListConfigs(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterConfigWithBody request with any body
	RegisterConfigWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterConfig(ctx context.Context, namespaceId string, pipelineId string, body RegisterConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfig request
	DeleteConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployConfig request
	DeployConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeployments request
	ListDeployments(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployment request
	GetDeployment(ctx context.Context, namespaceId string, pipelineId string, deploymentId uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineObjects request
	ListPipelineObjects(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPipelineObjectWithBody request with any body
	PutPipelineObjectWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPipelineObject(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineObject request
	DeletePipelineObject(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineObject request
	GetPipelineObject(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRuns request
	ListRuns(ctx context.Context, namespaceId string, pipelineId string, params *ListRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRunWithBody request with any body
	StartRunWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartRun(ctx context.Context, namespaceId string, pipelineId string, body StartRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelRun request
	CancelRun(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRun request
	GetRun(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRunObjects request
	ListRunObjects(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRunObjectWithBody request with any body
	PutRunObjectWithBody(ctx context.Context, namespaceId string, pipelineId string, runId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, body PutRunObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRunObject request
	DeleteRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunObject request
	GetRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTaskExecutions request
	ListTaskExecutions(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelTaskExecution request
	CancelTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *CancelTaskExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskExecution request
	GetTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachTaskExecution request
	AttachTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *AttachTaskExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogs request
	DeleteLogs(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogs request
	GetLogs(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPipelineSecrets request
	ListPipelineSecrets(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPipelineSecretWithBody request with any body
	PutPipelineSecretWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPipelineSecret(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineSecret request
	DeletePipelineSecret(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineSecret request
	GetPipelineSecret(ctx context.Context, namespaceId string, pipelineId string, key string, params *GetPipelineSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubscriptions request
	ListSubscriptions(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubscriptionWithBody request with any body
	CreateSubscriptionWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubscription(ctx context.Context, namespaceId string, pipelineId string, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubscription request
	DeleteSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubscription request
	GetSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSubscriptionWithBody request with any body
	UpdateSubscriptionWithBody(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, body UpdateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, roleId string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGlobalSecrets request
	ListGlobalSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGlobalSecretWithBody request with any body
	PutGlobalSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGlobalSecret(ctx context.Context, body PutGlobalSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGlobalSecret request
	DeleteGlobalSecret(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalSecret request
	GetGlobalSecret(ctx context.Context, key string, params *GetGlobalSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemPreferences request
	GetSystemPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSystemPreferencesWithBody request with any body
	UpdateSystemPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSystemPreferences(ctx context.Context, body UpdateSystemPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetadata request
	GetMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTokens request
	ListTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTokenWithBody request with any body
	CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBootstrapToken request
	CreateBootstrapToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Whoami request
	Whoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteToken request
	DeleteToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenById request
	GetTokenById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTokenWithBody request with any body
	UpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateToken(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) StreamEvents(ctx context.Context, params *StreamEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExtensions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExtensionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallExtensionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallExtensionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallExtension(ctx context.Context, body InstallExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallExtensionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UninstallExtension(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUninstallExtensionRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtension(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExtensionWithBody(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExtensionRequestWithBody(c.Server, extensionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExtension(ctx context.Context, extensionId string, body UpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExtensionRequest(c.Server, extensionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensionDebugInfo(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionDebugInfoRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensionLogs(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionLogsRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExtensionObjects(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExtensionObjectsRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExtensionObjectWithBody(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExtensionObjectRequestWithBody(c.Server, extensionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExtensionObject(ctx context.Context, extensionId string, body PutExtensionObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExtensionObjectRequest(c.Server, extensionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExtensionObject(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExtensionObjectRequest(c.Server, extensionId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensionObject(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionObjectRequest(c.Server, extensionId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExtensionSubscriptions(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExtensionSubscriptionsRequest(c.Server, extensionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNamespaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNamespacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNamespaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNamespaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNamespace(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNamespaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNamespaceRequest(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespace(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceRequest(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNamespaceWithBody(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNamespaceRequestWithBody(c.Server, namespaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNamespace(ctx context.Context, namespaceId string, body UpdateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNamespaceRequest(c.Server, namespaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelines(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelinesRequest(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipeline(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipeline(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipeline(ctx context.Context, namespaceId string, pipelineId string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConfigs(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConfigsRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterConfigWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterConfigRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterConfig(ctx context.Context, namespaceId string, pipelineId string, body RegisterConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterConfigRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigRequest(c.Server, namespaceId, pipelineId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server, namespaceId, pipelineId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployConfig(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployConfigRequest(c.Server, namespaceId, pipelineId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeployments(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentsRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployment(ctx context.Context, namespaceId string, pipelineId string, deploymentId uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, namespaceId, pipelineId, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineObjects(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineObjectsRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPipelineObjectWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPipelineObjectRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPipelineObject(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPipelineObjectRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineObject(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineObjectRequest(c.Server, namespaceId, pipelineId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineObject(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineObjectRequest(c.Server, namespaceId, pipelineId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRuns(ctx context.Context, namespaceId string, pipelineId string, params *ListRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunsRequest(c.Server, namespaceId, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRunWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRunRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRun(ctx context.Context, namespaceId string, pipelineId string, body StartRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRunRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelRun(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelRunRequest(c.Server, namespaceId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRun(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequest(c.Server, namespaceId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRunObjects(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunObjectsRequest(c.Server, namespaceId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRunObjectWithBody(ctx context.Context, namespaceId string, pipelineId string, runId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRunObjectRequestWithBody(c.Server, namespaceId, pipelineId, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, body PutRunObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRunObjectRequest(c.Server, namespaceId, pipelineId, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRunObjectRequest(c.Server, namespaceId, pipelineId, runId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunObject(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunObjectRequest(c.Server, namespaceId, pipelineId, runId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTaskExecutions(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTaskExecutionsRequest(c.Server, namespaceId, pipelineId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *CancelTaskExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelTaskExecutionRequest(c.Server, namespaceId, pipelineId, runId, taskId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskExecutionRequest(c.Server, namespaceId, pipelineId, runId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachTaskExecution(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *AttachTaskExecutionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachTaskExecutionRequest(c.Server, namespaceId, pipelineId, runId, taskId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogs(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogsRequest(c.Server, namespaceId, pipelineId, runId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogs(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequest(c.Server, namespaceId, pipelineId, runId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPipelineSecrets(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPipelineSecretsRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPipelineSecretWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPipelineSecretRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPipelineSecret(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPipelineSecretRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineSecret(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineSecretRequest(c.Server, namespaceId, pipelineId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineSecret(ctx context.Context, namespaceId string, pipelineId string, key string, params *GetPipelineSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineSecretRequest(c.Server, namespaceId, pipelineId, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubscriptions(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubscriptionsRequest(c.Server, namespaceId, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubscriptionWithBody(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequestWithBody(c.Server, namespaceId, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubscription(ctx context.Context, namespaceId string, pipelineId string, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequest(c.Server, namespaceId, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubscriptionRequest(c.Server, namespaceId, pipelineId, extensionId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubscriptionRequest(c.Server, namespaceId, pipelineId, extensionId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubscriptionWithBody(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubscriptionRequestWithBody(c.Server, namespaceId, pipelineId, extensionId, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubscription(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, body UpdateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubscriptionRequest(c.Server, namespaceId, pipelineId, extensionId, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, roleId string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGlobalSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGlobalSecretsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGlobalSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGlobalSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGlobalSecret(ctx context.Context, body PutGlobalSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGlobalSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGlobalSecret(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGlobalSecretRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalSecret(ctx context.Context, key string, params *GetGlobalSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalSecretRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemPreferencesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSystemPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSystemPreferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSystemPreferences(ctx context.Context, body UpdateSystemPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSystemPreferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBootstrapToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBootstrapTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Whoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWhoamiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateToken(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewStreamEventsRequest generates requests for StreamEvents
func NewStreamEventsRequest(server string, params *StreamEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.History != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "history", runtime.ParamLocationQuery, *params.History); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEventRequest generates requests for DeleteEvent
func NewDeleteEventRequest(server string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventRequest generates requests for GetEvent
func NewGetEventRequest(server string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExtensionsRequest generates requests for ListExtensions
func NewListExtensionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallExtensionRequest calls the generic InstallExtension builder with application/json body
func NewInstallExtensionRequest(server string, body InstallExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallExtensionRequestWithBody(server, "application/json", bodyReader)
}

// NewInstallExtensionRequestWithBody generates requests for InstallExtension with any type of body
func NewInstallExtensionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUninstallExtensionRequest generates requests for UninstallExtension
func NewUninstallExtensionRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtensionRequest generates requests for GetExtension
func NewGetExtensionRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateExtensionRequest calls the generic UpdateExtension builder with application/json body
func NewUpdateExtensionRequest(server string, extensionId string, body UpdateExtensionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateExtensionRequestWithBody(server, extensionId, "application/json", bodyReader)
}

// NewUpdateExtensionRequestWithBody generates requests for UpdateExtension with any type of body
func NewUpdateExtensionRequestWithBody(server string, extensionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExtensionDebugInfoRequest generates requests for GetExtensionDebugInfo
func NewGetExtensionDebugInfoRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/debug", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtensionLogsRequest generates requests for GetExtensionLogs
func NewGetExtensionLogsRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExtensionObjectsRequest generates requests for ListExtensionObjects
func NewListExtensionObjectsRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutExtensionObjectRequest calls the generic PutExtensionObject builder with application/json body
func NewPutExtensionObjectRequest(server string, extensionId string, body PutExtensionObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExtensionObjectRequestWithBody(server, extensionId, "application/json", bodyReader)
}

// NewPutExtensionObjectRequestWithBody generates requests for PutExtensionObject with any type of body
func NewPutExtensionObjectRequestWithBody(server string, extensionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExtensionObjectRequest generates requests for DeleteExtensionObject
func NewDeleteExtensionObjectRequest(server string, extensionId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtensionObjectRequest generates requests for GetExtensionObject
func NewGetExtensionObjectRequest(server string, extensionId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExtensionSubscriptionsRequest generates requests for ListExtensionSubscriptions
func NewListExtensionSubscriptionsRequest(server string, extensionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/extensions/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNamespacesRequest generates requests for ListNamespaces
func NewListNamespacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNamespaceRequest calls the generic CreateNamespace builder with application/json body
func NewCreateNamespaceRequest(server string, body CreateNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNamespaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNamespaceRequestWithBody generates requests for CreateNamespace with any type of body
func NewCreateNamespaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNamespaceRequest generates requests for DeleteNamespace
func NewDeleteNamespaceRequest(server string, namespaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNamespaceRequest generates requests for GetNamespace
func NewGetNamespaceRequest(server string, namespaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNamespaceRequest calls the generic UpdateNamespace builder with application/json body
func NewUpdateNamespaceRequest(server string, namespaceId string, body UpdateNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNamespaceRequestWithBody(server, namespaceId, "application/json", bodyReader)
}

// NewUpdateNamespaceRequestWithBody generates requests for UpdateNamespace with any type of body
func NewUpdateNamespaceRequestWithBody(server string, namespaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPipelinesRequest generates requests for ListPipelines
func NewListPipelinesRequest(server string, namespaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePipelineRequest generates requests for DeletePipeline
func NewDeletePipelineRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineRequest generates requests for GetPipeline
func NewGetPipelineRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineRequest calls the generic UpdatePipeline builder with application/json body
func NewUpdatePipelineRequest(server string, namespaceId string, pipelineId string, body UpdatePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePipelineRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewUpdatePipelineRequestWithBody generates requests for UpdatePipeline with any type of body
func NewUpdatePipelineRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConfigsRequest generates requests for ListConfigs
func NewListConfigsRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/configs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterConfigRequest calls the generic RegisterConfig builder with application/json body
func NewRegisterConfigRequest(server string, namespaceId string, pipelineId string, body RegisterConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterConfigRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewRegisterConfigRequestWithBody generates requests for RegisterConfig with any type of body
func NewRegisterConfigRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/configs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConfigRequest generates requests for DeleteConfig
func NewDeleteConfigRequest(server string, namespaceId string, pipelineId string, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/configs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string, namespaceId string, pipelineId string, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/configs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeployConfigRequest generates requests for DeployConfig
func NewDeployConfigRequest(server string, namespaceId string, pipelineId string, version int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/configs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentsRequest generates requests for ListDeployments
func NewListDeploymentsRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/deployments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, namespaceId string, pipelineId string, deploymentId uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployment_id", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/deployments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineObjectsRequest generates requests for ListPipelineObjects
func NewListPipelineObjectsRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/objects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPipelineObjectRequest calls the generic PutPipelineObject builder with application/json body
func NewPutPipelineObjectRequest(server string, namespaceId string, pipelineId string, body PutPipelineObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPipelineObjectRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewPutPipelineObjectRequestWithBody generates requests for PutPipelineObject with any type of body
func NewPutPipelineObjectRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/objects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineObjectRequest generates requests for DeletePipelineObject
func NewDeletePipelineObjectRequest(server string, namespaceId string, pipelineId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/objects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineObjectRequest generates requests for GetPipelineObject
func NewGetPipelineObjectRequest(server string, namespaceId string, pipelineId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/objects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunsRequest generates requests for ListRuns
func NewListRunsRequest(server string, namespaceId string, pipelineId string, params *ListRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRunRequest calls the generic StartRun builder with application/json body
func NewStartRunRequest(server string, namespaceId string, pipelineId string, body StartRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartRunRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewStartRunRequestWithBody generates requests for StartRun with any type of body
func NewStartRunRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelRunRequest generates requests for CancelRun
func NewCancelRunRequest(server string, namespaceId string, pipelineId string, runId uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunRequest generates requests for GetRun
func NewGetRunRequest(server string, namespaceId string, pipelineId string, runId uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunObjectsRequest generates requests for ListRunObjects
func NewListRunObjectsRequest(server string, namespaceId string, pipelineId string, runId uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/objects", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRunObjectRequest calls the generic PutRunObject builder with application/json body
func NewPutRunObjectRequest(server string, namespaceId string, pipelineId string, runId uint64, body PutRunObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRunObjectRequestWithBody(server, namespaceId, pipelineId, runId, "application/json", bodyReader)
}

// NewPutRunObjectRequestWithBody generates requests for PutRunObject with any type of body
func NewPutRunObjectRequestWithBody(server string, namespaceId string, pipelineId string, runId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/objects", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRunObjectRequest generates requests for DeleteRunObject
func NewDeleteRunObjectRequest(server string, namespaceId string, pipelineId string, runId uint64, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/objects/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunObjectRequest generates requests for GetRunObject
func NewGetRunObjectRequest(server string, namespaceId string, pipelineId string, runId uint64, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/objects/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTaskExecutionsRequest generates requests for ListTaskExecutions
func NewListTaskExecutionsRequest(server string, namespaceId string, pipelineId string, runId uint64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelTaskExecutionRequest generates requests for CancelTaskExecution
func NewCancelTaskExecutionRequest(server string, namespaceId string, pipelineId string, runId uint64, taskId string, params *CancelTaskExecutionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wait_for", runtime.ParamLocationQuery, params.WaitFor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskExecutionRequest generates requests for GetTaskExecution
func NewGetTaskExecutionRequest(server string, namespaceId string, pipelineId string, runId uint64, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachTaskExecutionRequest generates requests for AttachTaskExecution
func NewAttachTaskExecutionRequest(server string, namespaceId string, pipelineId string, runId uint64, taskId string, params *AttachTaskExecutionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks/%s/attach", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "command", runtime.ParamLocationQuery, params.Command); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteLogsRequest generates requests for DeleteLogs
func NewDeleteLogsRequest(server string, namespaceId string, pipelineId string, runId uint64, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks/%s/logs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogsRequest generates requests for GetLogs
func NewGetLogsRequest(server string, namespaceId string, pipelineId string, runId uint64, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/runs/%s/tasks/%s/logs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPipelineSecretsRequest generates requests for ListPipelineSecrets
func NewListPipelineSecretsRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/secrets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPipelineSecretRequest calls the generic PutPipelineSecret builder with application/json body
func NewPutPipelineSecretRequest(server string, namespaceId string, pipelineId string, body PutPipelineSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPipelineSecretRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewPutPipelineSecretRequestWithBody generates requests for PutPipelineSecret with any type of body
func NewPutPipelineSecretRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/secrets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineSecretRequest generates requests for DeletePipelineSecret
func NewDeletePipelineSecretRequest(server string, namespaceId string, pipelineId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/secrets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineSecretRequest generates requests for GetPipelineSecret
func NewGetPipelineSecretRequest(server string, namespaceId string, pipelineId string, key string, params *GetPipelineSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/secrets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_secret", runtime.ParamLocationQuery, params.IncludeSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSubscriptionsRequest generates requests for ListSubscriptions
func NewListSubscriptionsRequest(server string, namespaceId string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubscriptionRequest calls the generic CreateSubscription builder with application/json body
func NewCreateSubscriptionRequest(server string, namespaceId string, pipelineId string, body CreateSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubscriptionRequestWithBody(server, namespaceId, pipelineId, "application/json", bodyReader)
}

// NewCreateSubscriptionRequestWithBody generates requests for CreateSubscription with any type of body
func NewCreateSubscriptionRequestWithBody(server string, namespaceId string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubscriptionRequest generates requests for DeleteSubscription
func NewDeleteSubscriptionRequest(server string, namespaceId string, pipelineId string, extensionId string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/subscriptions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionRequest generates requests for GetSubscription
func NewGetSubscriptionRequest(server string, namespaceId string, pipelineId string, extensionId string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/subscriptions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSubscriptionRequest calls the generic UpdateSubscription builder with application/json body
func NewUpdateSubscriptionRequest(server string, namespaceId string, pipelineId string, extensionId string, subscriptionId string, body UpdateSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSubscriptionRequestWithBody(server, namespaceId, pipelineId, extensionId, subscriptionId, "application/json", bodyReader)
}

// NewUpdateSubscriptionRequestWithBody generates requests for UpdateSubscription with any type of body
func NewUpdateSubscriptionRequestWithBody(server string, namespaceId string, pipelineId string, extensionId string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace_id", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipeline_id", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension_id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/namespaces/%s/pipelines/%s/subscriptions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, roleId string, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, roleId, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListGlobalSecretsRequest generates requests for ListGlobalSecrets
func NewListGlobalSecretsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secrets/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGlobalSecretRequest calls the generic PutGlobalSecret builder with application/json body
func NewPutGlobalSecretRequest(server string, body PutGlobalSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGlobalSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGlobalSecretRequestWithBody generates requests for PutGlobalSecret with any type of body
func NewPutGlobalSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secrets/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGlobalSecretRequest generates requests for DeleteGlobalSecret
func NewDeleteGlobalSecretRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secrets/global/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlobalSecretRequest generates requests for GetGlobalSecret
func NewGetGlobalSecretRequest(server string, key string, params *GetGlobalSecretParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/secrets/global/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_secret", runtime.ParamLocationQuery, params.IncludeSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemPreferencesRequest generates requests for GetSystemPreferences
func NewGetSystemPreferencesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSystemPreferencesRequest calls the generic UpdateSystemPreferences builder with application/json body
func NewUpdateSystemPreferencesRequest(server string, body UpdateSystemPreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSystemPreferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSystemPreferencesRequestWithBody generates requests for UpdateSystemPreferences with any type of body
func NewUpdateSystemPreferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMetadataRequest generates requests for GetMetadata
func NewGetMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTokensRequest generates requests for ListTokens
func NewListTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTokenRequest calls the generic CreateToken builder with application/json body
func NewCreateTokenRequest(server string, body CreateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenRequestWithBody generates requests for CreateToken with any type of body
func NewCreateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateBootstrapTokenRequest generates requests for CreateBootstrapToken
func NewCreateBootstrapTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens/bootstrap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWhoamiRequest generates requests for Whoami
func NewWhoamiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens/whoami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTokenRequest generates requests for DeleteToken
func NewDeleteTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenByIdRequest generates requests for GetTokenById
func NewGetTokenByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTokenRequest calls the generic UpdateToken builder with application/json body
func NewUpdateTokenRequest(server string, id string, body UpdateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTokenRequestWithBody generates requests for UpdateToken with any type of body
func NewUpdateTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// StreamEventsWithResponse request
	StreamEventsWithResponse(ctx context.Context, params *StreamEventsParams, reqEditors ...RequestEditorFn) (*StreamEventsResp, error)

	// DeleteEventWithResponse request
	DeleteEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*DeleteEventResp, error)

	// GetEventWithResponse request
	GetEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetEventResp, error)

	// ListExtensionsWithResponse request
	ListExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExtensionsResp, error)

	// InstallExtensionWithBodyWithResponse request with any body
	InstallExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallExtensionResp, error)

	InstallExtensionWithResponse(ctx context.Context, body InstallExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallExtensionResp, error)

	// UninstallExtensionWithResponse request
	UninstallExtensionWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*UninstallExtensionResp, error)

	// GetExtensionWithResponse request
	GetExtensionWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionResp, error)

	// UpdateExtensionWithBodyWithResponse request with any body
	UpdateExtensionWithBodyWithResponse(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExtensionResp, error)

	UpdateExtensionWithResponse(ctx context.Context, extensionId string, body UpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExtensionResp, error)

	// GetExtensionDebugInfoWithResponse request
	GetExtensionDebugInfoWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionDebugInfoResp, error)

	// GetExtensionLogsWithResponse request
	GetExtensionLogsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionLogsResp, error)

	// ListExtensionObjectsWithResponse request
	ListExtensionObjectsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*ListExtensionObjectsResp, error)

	// PutExtensionObjectWithBodyWithResponse request with any body
	PutExtensionObjectWithBodyWithResponse(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExtensionObjectResp, error)

	PutExtensionObjectWithResponse(ctx context.Context, extensionId string, body PutExtensionObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExtensionObjectResp, error)

	// DeleteExtensionObjectWithResponse request
	DeleteExtensionObjectWithResponse(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*DeleteExtensionObjectResp, error)

	// GetExtensionObjectWithResponse request
	GetExtensionObjectWithResponse(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*GetExtensionObjectResp, error)

	// ListExtensionSubscriptionsWithResponse request
	ListExtensionSubscriptionsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*ListExtensionSubscriptionsResp, error)

	// ListNamespacesWithResponse request
	ListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNamespacesResp, error)

	// CreateNamespaceWithBodyWithResponse request with any body
	CreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceResp, error)

	CreateNamespaceWithResponse(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceResp, error)

	// DeleteNamespaceWithResponse request
	DeleteNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*DeleteNamespaceResp, error)

	// GetNamespaceWithResponse request
	GetNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*GetNamespaceResp, error)

	// UpdateNamespaceWithBodyWithResponse request with any body
	UpdateNamespaceWithBodyWithResponse(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNamespaceResp, error)

	UpdateNamespaceWithResponse(ctx context.Context, namespaceId string, body UpdateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNamespaceResp, error)

	// ListPipelinesWithResponse request
	ListPipelinesWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*ListPipelinesResp, error)

	// DeletePipelineWithResponse request
	DeletePipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*DeletePipelineResp, error)

	// GetPipelineWithResponse request
	GetPipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*GetPipelineResp, error)

	// UpdatePipelineWithBodyWithResponse request with any body
	UpdatePipelineWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResp, error)

	UpdatePipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineResp, error)

	// ListConfigsWithResponse request
	ListConfigsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListConfigsResp, error)

	// RegisterConfigWithBodyWithResponse request with any body
	RegisterConfigWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterConfigResp, error)

	RegisterConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, body RegisterConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterConfigResp, error)

	// DeleteConfigWithResponse request
	DeleteConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*DeleteConfigResp, error)

	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*GetConfigResp, error)

	// DeployConfigWithResponse request
	DeployConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*DeployConfigResp, error)

	// ListDeploymentsWithResponse request
	ListDeploymentsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListDeploymentsResp, error)

	// GetDeploymentWithResponse request
	GetDeploymentWithResponse(ctx context.Context, namespaceId string, pipelineId string, deploymentId uint64, reqEditors ...RequestEditorFn) (*GetDeploymentResp, error)

	// ListPipelineObjectsWithResponse request
	ListPipelineObjectsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListPipelineObjectsResp, error)

	// PutPipelineObjectWithBodyWithResponse request with any body
	PutPipelineObjectWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPipelineObjectResp, error)

	PutPipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPipelineObjectResp, error)

	// DeletePipelineObjectWithResponse request
	DeletePipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*DeletePipelineObjectResp, error)

	// GetPipelineObjectWithResponse request
	GetPipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*GetPipelineObjectResp, error)

	// ListRunsWithResponse request
	ListRunsWithResponse(ctx context.Context, namespaceId string, pipelineId string, params *ListRunsParams, reqEditors ...RequestEditorFn) (*ListRunsResp, error)

	// StartRunWithBodyWithResponse request with any body
	StartRunWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRunResp, error)

	StartRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, body StartRunJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRunResp, error)

	// CancelRunWithResponse request
	CancelRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*CancelRunResp, error)

	// GetRunWithResponse request
	GetRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*GetRunResp, error)

	// ListRunObjectsWithResponse request
	ListRunObjectsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*ListRunObjectsResp, error)

	// PutRunObjectWithBodyWithResponse request with any body
	PutRunObjectWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRunObjectResp, error)

	PutRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, body PutRunObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRunObjectResp, error)

	// DeleteRunObjectWithResponse request
	DeleteRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*DeleteRunObjectResp, error)

	// GetRunObjectWithResponse request
	GetRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*GetRunObjectResp, error)

	// ListTaskExecutionsWithResponse request
	ListTaskExecutionsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*ListTaskExecutionsResp, error)

	// CancelTaskExecutionWithResponse request
	CancelTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *CancelTaskExecutionParams, reqEditors ...RequestEditorFn) (*CancelTaskExecutionResp, error)

	// GetTaskExecutionWithResponse request
	GetTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*GetTaskExecutionResp, error)

	// AttachTaskExecutionWithResponse request
	AttachTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *AttachTaskExecutionParams, reqEditors ...RequestEditorFn) (*AttachTaskExecutionResp, error)

	// DeleteLogsWithResponse request
	DeleteLogsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*DeleteLogsResp, error)

	// GetLogsWithResponse request
	GetLogsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*GetLogsResp, error)

	// ListPipelineSecretsWithResponse request
	ListPipelineSecretsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListPipelineSecretsResp, error)

	// PutPipelineSecretWithBodyWithResponse request with any body
	PutPipelineSecretWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPipelineSecretResp, error)

	PutPipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPipelineSecretResp, error)

	// DeletePipelineSecretWithResponse request
	DeletePipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*DeletePipelineSecretResp, error)

	// GetPipelineSecretWithResponse request
	GetPipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, params *GetPipelineSecretParams, reqEditors ...RequestEditorFn) (*GetPipelineSecretResp, error)

	// ListSubscriptionsWithResponse request
	ListSubscriptionsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListSubscriptionsResp, error)

	// CreateSubscriptionWithBodyWithResponse request with any body
	CreateSubscriptionWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionResp, error)

	CreateSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionResp, error)

	// DeleteSubscriptionWithResponse request
	DeleteSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResp, error)

	// GetSubscriptionWithResponse request
	GetSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*GetSubscriptionResp, error)

	// UpdateSubscriptionWithBodyWithResponse request with any body
	UpdateSubscriptionWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubscriptionResp, error)

	UpdateSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, body UpdateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubscriptionResp, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRolesResp, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResp, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResp, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*DeleteRoleResp, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetRoleResp, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error)

	UpdateRoleWithResponse(ctx context.Context, roleId string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error)

	// ListGlobalSecretsWithResponse request
	ListGlobalSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGlobalSecretsResp, error)

	// PutGlobalSecretWithBodyWithResponse request with any body
	PutGlobalSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGlobalSecretResp, error)

	PutGlobalSecretWithResponse(ctx context.Context, body PutGlobalSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGlobalSecretResp, error)

	// DeleteGlobalSecretWithResponse request
	DeleteGlobalSecretWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteGlobalSecretResp, error)

	// GetGlobalSecretWithResponse request
	GetGlobalSecretWithResponse(ctx context.Context, key string, params *GetGlobalSecretParams, reqEditors ...RequestEditorFn) (*GetGlobalSecretResp, error)

	// GetSystemPreferencesWithResponse request
	GetSystemPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemPreferencesResp, error)

	// UpdateSystemPreferencesWithBodyWithResponse request with any body
	UpdateSystemPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSystemPreferencesResp, error)

	UpdateSystemPreferencesWithResponse(ctx context.Context, body UpdateSystemPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSystemPreferencesResp, error)

	// GetMetadataWithResponse request
	GetMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetadataResp, error)

	// ListTokensWithResponse request
	ListTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTokensResp, error)

	// CreateTokenWithBodyWithResponse request with any body
	CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResp, error)

	CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResp, error)

	// CreateBootstrapTokenWithResponse request
	CreateBootstrapTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateBootstrapTokenResp, error)

	// WhoamiWithResponse request
	WhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoamiResp, error)

	// DeleteTokenWithResponse request
	DeleteTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTokenResp, error)

	// GetTokenByIdWithResponse request
	GetTokenByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTokenByIdResp, error)

	// UpdateTokenWithBodyWithResponse request with any body
	UpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResp, error)

	UpdateTokenWithResponse(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResp, error)
}

type StreamEventsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StreamEventsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamEventsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEventResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEventResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEventResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetEventResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExtensionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExtensionsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListExtensionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExtensionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallExtensionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InstallExtensionResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r InstallExtensionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallExtensionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UninstallExtensionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UninstallExtensionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UninstallExtensionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetExtensionResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetExtensionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateExtensionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateExtensionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateExtensionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionDebugInfoResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DebugResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetExtensionDebugInfoResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionDebugInfoResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionLogsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExtensionLogsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionLogsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExtensionObjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExtensionObjectsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListExtensionObjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExtensionObjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExtensionObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PutExtensionObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r PutExtensionObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExtensionObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExtensionObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteExtensionObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExtensionObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetExtensionObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetExtensionObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExtensionSubscriptionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExtensionSubscriptionsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListExtensionSubscriptionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExtensionSubscriptionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNamespacesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListNamespacesResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListNamespacesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNamespaceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateNamespaceResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CreateNamespaceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNamespaceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNamespaceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteNamespaceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNamespaceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNamespaceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetNamespaceResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetNamespaceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNamespaceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNamespaceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateNamespaceResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateNamespaceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNamespaceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelinesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPipelinesResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListPipelinesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelinesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPipelineResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConfigsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPipelineConfigsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListConfigsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConfigsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterConfigResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterPipelineConfigResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r RegisterConfigResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterConfigResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteConfigResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPipelineConfigResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetConfigResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployConfigResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeployPipelineConfigResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeployConfigResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployConfigResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDeploymentsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploymentsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDeploymentResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineObjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPipelineObjectsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListPipelineObjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineObjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPipelineObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PutPipelineObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r PutPipelineObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPipelineObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPipelineObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRunsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListRunsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRunResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StartRunResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r StartRunResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRunResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelRunResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CancelRunResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelRunResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRunResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetRunResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunObjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRunObjectsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListRunObjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunObjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRunObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PutRunObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r PutRunObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRunObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRunObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRunObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRunObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunObjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRunObjectResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetRunObjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunObjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTaskExecutionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTaskExecutionsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListTaskExecutionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTaskExecutionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelTaskExecutionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CancelTaskExecutionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelTaskExecutionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskExecutionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskExecutionResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskExecutionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskExecutionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachTaskExecutionResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AttachTaskExecutionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachTaskExecutionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteLogsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogsResp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLogsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPipelineSecretsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPipelineSecretsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListPipelineSecretsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPipelineSecretsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPipelineSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PutPipelineSecretResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r PutPipelineSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPipelineSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPipelineSecretResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubscriptionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSubscriptionsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListSubscriptionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubscriptionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateSubscriptionResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CreateSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSubscriptionResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSubscriptionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSubscriptionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSubscriptionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRolesResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListRolesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateRoleResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CreateRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRoleResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateRoleResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGlobalSecretsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListGlobalSecretsResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListGlobalSecretsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGlobalSecretsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGlobalSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PutGlobalSecretResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r PutGlobalSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGlobalSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGlobalSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGlobalSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGlobalSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalSecretResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGlobalSecretResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetGlobalSecretResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalSecretResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemPreferencesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSystemPreferencesResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetSystemPreferencesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemPreferencesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSystemPreferencesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateSystemPreferencesResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSystemPreferencesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSystemPreferencesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetadataResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSystemMetadataResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetMetadataResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetadataResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTokensResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokensResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListTokensResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTokensResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateTokenResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CreateTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBootstrapTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateTokenResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r CreateBootstrapTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBootstrapTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WhoamiResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WhoAmIResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r WhoamiResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WhoamiResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenByIdResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTokenByIDResponse
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r GetTokenByIdResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenByIdResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// StreamEventsWithResponse request returning *StreamEventsResp
func (c *ClientWithResponses) StreamEventsWithResponse(ctx context.Context, params *StreamEventsParams, reqEditors ...RequestEditorFn) (*StreamEventsResp, error) {
	rsp, err := c.StreamEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamEventsResp(rsp)
}

// DeleteEventWithResponse request returning *DeleteEventResp
func (c *ClientWithResponses) DeleteEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*DeleteEventResp, error) {
	rsp, err := c.DeleteEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEventResp(rsp)
}

// GetEventWithResponse request returning *GetEventResp
func (c *ClientWithResponses) GetEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetEventResp, error) {
	rsp, err := c.GetEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventResp(rsp)
}

// ListExtensionsWithResponse request returning *ListExtensionsResp
func (c *ClientWithResponses) ListExtensionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListExtensionsResp, error) {
	rsp, err := c.ListExtensions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExtensionsResp(rsp)
}

// InstallExtensionWithBodyWithResponse request with arbitrary body returning *InstallExtensionResp
func (c *ClientWithResponses) InstallExtensionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallExtensionResp, error) {
	rsp, err := c.InstallExtensionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallExtensionResp(rsp)
}

func (c *ClientWithResponses) InstallExtensionWithResponse(ctx context.Context, body InstallExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallExtensionResp, error) {
	rsp, err := c.InstallExtension(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallExtensionResp(rsp)
}

// UninstallExtensionWithResponse request returning *UninstallExtensionResp
func (c *ClientWithResponses) UninstallExtensionWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*UninstallExtensionResp, error) {
	rsp, err := c.UninstallExtension(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUninstallExtensionResp(rsp)
}

// GetExtensionWithResponse request returning *GetExtensionResp
func (c *ClientWithResponses) GetExtensionWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionResp, error) {
	rsp, err := c.GetExtension(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionResp(rsp)
}

// UpdateExtensionWithBodyWithResponse request with arbitrary body returning *UpdateExtensionResp
func (c *ClientWithResponses) UpdateExtensionWithBodyWithResponse(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExtensionResp, error) {
	rsp, err := c.UpdateExtensionWithBody(ctx, extensionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExtensionResp(rsp)
}

func (c *ClientWithResponses) UpdateExtensionWithResponse(ctx context.Context, extensionId string, body UpdateExtensionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExtensionResp, error) {
	rsp, err := c.UpdateExtension(ctx, extensionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExtensionResp(rsp)
}

// GetExtensionDebugInfoWithResponse request returning *GetExtensionDebugInfoResp
func (c *ClientWithResponses) GetExtensionDebugInfoWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionDebugInfoResp, error) {
	rsp, err := c.GetExtensionDebugInfo(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionDebugInfoResp(rsp)
}

// GetExtensionLogsWithResponse request returning *GetExtensionLogsResp
func (c *ClientWithResponses) GetExtensionLogsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*GetExtensionLogsResp, error) {
	rsp, err := c.GetExtensionLogs(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionLogsResp(rsp)
}

// ListExtensionObjectsWithResponse request returning *ListExtensionObjectsResp
func (c *ClientWithResponses) ListExtensionObjectsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*ListExtensionObjectsResp, error) {
	rsp, err := c.ListExtensionObjects(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExtensionObjectsResp(rsp)
}

// PutExtensionObjectWithBodyWithResponse request with arbitrary body returning *PutExtensionObjectResp
func (c *ClientWithResponses) PutExtensionObjectWithBodyWithResponse(ctx context.Context, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExtensionObjectResp, error) {
	rsp, err := c.PutExtensionObjectWithBody(ctx, extensionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExtensionObjectResp(rsp)
}

func (c *ClientWithResponses) PutExtensionObjectWithResponse(ctx context.Context, extensionId string, body PutExtensionObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExtensionObjectResp, error) {
	rsp, err := c.PutExtensionObject(ctx, extensionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExtensionObjectResp(rsp)
}

// DeleteExtensionObjectWithResponse request returning *DeleteExtensionObjectResp
func (c *ClientWithResponses) DeleteExtensionObjectWithResponse(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*DeleteExtensionObjectResp, error) {
	rsp, err := c.DeleteExtensionObject(ctx, extensionId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExtensionObjectResp(rsp)
}

// GetExtensionObjectWithResponse request returning *GetExtensionObjectResp
func (c *ClientWithResponses) GetExtensionObjectWithResponse(ctx context.Context, extensionId string, key string, reqEditors ...RequestEditorFn) (*GetExtensionObjectResp, error) {
	rsp, err := c.GetExtensionObject(ctx, extensionId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionObjectResp(rsp)
}

// ListExtensionSubscriptionsWithResponse request returning *ListExtensionSubscriptionsResp
func (c *ClientWithResponses) ListExtensionSubscriptionsWithResponse(ctx context.Context, extensionId string, reqEditors ...RequestEditorFn) (*ListExtensionSubscriptionsResp, error) {
	rsp, err := c.ListExtensionSubscriptions(ctx, extensionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExtensionSubscriptionsResp(rsp)
}

// ListNamespacesWithResponse request returning *ListNamespacesResp
func (c *ClientWithResponses) ListNamespacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNamespacesResp, error) {
	rsp, err := c.ListNamespaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNamespacesResp(rsp)
}

// CreateNamespaceWithBodyWithResponse request with arbitrary body returning *CreateNamespaceResp
func (c *ClientWithResponses) CreateNamespaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNamespaceResp, error) {
	rsp, err := c.CreateNamespaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNamespaceResp(rsp)
}

func (c *ClientWithResponses) CreateNamespaceWithResponse(ctx context.Context, body CreateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNamespaceResp, error) {
	rsp, err := c.CreateNamespace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNamespaceResp(rsp)
}

// DeleteNamespaceWithResponse request returning *DeleteNamespaceResp
func (c *ClientWithResponses) DeleteNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*DeleteNamespaceResp, error) {
	rsp, err := c.DeleteNamespace(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNamespaceResp(rsp)
}

// GetNamespaceWithResponse request returning *GetNamespaceResp
func (c *ClientWithResponses) GetNamespaceWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*GetNamespaceResp, error) {
	rsp, err := c.GetNamespace(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceResp(rsp)
}

// UpdateNamespaceWithBodyWithResponse request with arbitrary body returning *UpdateNamespaceResp
func (c *ClientWithResponses) UpdateNamespaceWithBodyWithResponse(ctx context.Context, namespaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNamespaceResp, error) {
	rsp, err := c.UpdateNamespaceWithBody(ctx, namespaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNamespaceResp(rsp)
}

func (c *ClientWithResponses) UpdateNamespaceWithResponse(ctx context.Context, namespaceId string, body UpdateNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNamespaceResp, error) {
	rsp, err := c.UpdateNamespace(ctx, namespaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNamespaceResp(rsp)
}

// ListPipelinesWithResponse request returning *ListPipelinesResp
func (c *ClientWithResponses) ListPipelinesWithResponse(ctx context.Context, namespaceId string, reqEditors ...RequestEditorFn) (*ListPipelinesResp, error) {
	rsp, err := c.ListPipelines(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelinesResp(rsp)
}

// DeletePipelineWithResponse request returning *DeletePipelineResp
func (c *ClientWithResponses) DeletePipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*DeletePipelineResp, error) {
	rsp, err := c.DeletePipeline(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineResp(rsp)
}

// GetPipelineWithResponse request returning *GetPipelineResp
func (c *ClientWithResponses) GetPipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*GetPipelineResp, error) {
	rsp, err := c.GetPipeline(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineResp(rsp)
}

// UpdatePipelineWithBodyWithResponse request with arbitrary body returning *UpdatePipelineResp
func (c *ClientWithResponses) UpdatePipelineWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineResp, error) {
	rsp, err := c.UpdatePipelineWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResp(rsp)
}

func (c *ClientWithResponses) UpdatePipelineWithResponse(ctx context.Context, namespaceId string, pipelineId string, body UpdatePipelineJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineResp, error) {
	rsp, err := c.UpdatePipeline(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineResp(rsp)
}

// ListConfigsWithResponse request returning *ListConfigsResp
func (c *ClientWithResponses) ListConfigsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListConfigsResp, error) {
	rsp, err := c.ListConfigs(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConfigsResp(rsp)
}

// RegisterConfigWithBodyWithResponse request with arbitrary body returning *RegisterConfigResp
func (c *ClientWithResponses) RegisterConfigWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterConfigResp, error) {
	rsp, err := c.RegisterConfigWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterConfigResp(rsp)
}

func (c *ClientWithResponses) RegisterConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, body RegisterConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterConfigResp, error) {
	rsp, err := c.RegisterConfig(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterConfigResp(rsp)
}

// DeleteConfigWithResponse request returning *DeleteConfigResp
func (c *ClientWithResponses) DeleteConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*DeleteConfigResp, error) {
	rsp, err := c.DeleteConfig(ctx, namespaceId, pipelineId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigResp(rsp)
}

// GetConfigWithResponse request returning *GetConfigResp
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*GetConfigResp, error) {
	rsp, err := c.GetConfig(ctx, namespaceId, pipelineId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResp(rsp)
}

// DeployConfigWithResponse request returning *DeployConfigResp
func (c *ClientWithResponses) DeployConfigWithResponse(ctx context.Context, namespaceId string, pipelineId string, version int64, reqEditors ...RequestEditorFn) (*DeployConfigResp, error) {
	rsp, err := c.DeployConfig(ctx, namespaceId, pipelineId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployConfigResp(rsp)
}

// ListDeploymentsWithResponse request returning *ListDeploymentsResp
func (c *ClientWithResponses) ListDeploymentsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListDeploymentsResp, error) {
	rsp, err := c.ListDeployments(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentsResp(rsp)
}

// GetDeploymentWithResponse request returning *GetDeploymentResp
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, namespaceId string, pipelineId string, deploymentId uint64, reqEditors ...RequestEditorFn) (*GetDeploymentResp, error) {
	rsp, err := c.GetDeployment(ctx, namespaceId, pipelineId, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResp(rsp)
}

// ListPipelineObjectsWithResponse request returning *ListPipelineObjectsResp
func (c *ClientWithResponses) ListPipelineObjectsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListPipelineObjectsResp, error) {
	rsp, err := c.ListPipelineObjects(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineObjectsResp(rsp)
}

// PutPipelineObjectWithBodyWithResponse request with arbitrary body returning *PutPipelineObjectResp
func (c *ClientWithResponses) PutPipelineObjectWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPipelineObjectResp, error) {
	rsp, err := c.PutPipelineObjectWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPipelineObjectResp(rsp)
}

func (c *ClientWithResponses) PutPipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPipelineObjectResp, error) {
	rsp, err := c.PutPipelineObject(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPipelineObjectResp(rsp)
}

// DeletePipelineObjectWithResponse request returning *DeletePipelineObjectResp
func (c *ClientWithResponses) DeletePipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*DeletePipelineObjectResp, error) {
	rsp, err := c.DeletePipelineObject(ctx, namespaceId, pipelineId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineObjectResp(rsp)
}

// GetPipelineObjectWithResponse request returning *GetPipelineObjectResp
func (c *ClientWithResponses) GetPipelineObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*GetPipelineObjectResp, error) {
	rsp, err := c.GetPipelineObject(ctx, namespaceId, pipelineId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineObjectResp(rsp)
}

// ListRunsWithResponse request returning *ListRunsResp
func (c *ClientWithResponses) ListRunsWithResponse(ctx context.Context, namespaceId string, pipelineId string, params *ListRunsParams, reqEditors ...RequestEditorFn) (*ListRunsResp, error) {
	rsp, err := c.ListRuns(ctx, namespaceId, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunsResp(rsp)
}

// StartRunWithBodyWithResponse request with arbitrary body returning *StartRunResp
func (c *ClientWithResponses) StartRunWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartRunResp, error) {
	rsp, err := c.StartRunWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRunResp(rsp)
}

func (c *ClientWithResponses) StartRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, body StartRunJSONRequestBody, reqEditors ...RequestEditorFn) (*StartRunResp, error) {
	rsp, err := c.StartRun(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRunResp(rsp)
}

// CancelRunWithResponse request returning *CancelRunResp
func (c *ClientWithResponses) CancelRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*CancelRunResp, error) {
	rsp, err := c.CancelRun(ctx, namespaceId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelRunResp(rsp)
}

// GetRunWithResponse request returning *GetRunResp
func (c *ClientWithResponses) GetRunWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*GetRunResp, error) {
	rsp, err := c.GetRun(ctx, namespaceId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunResp(rsp)
}

// ListRunObjectsWithResponse request returning *ListRunObjectsResp
func (c *ClientWithResponses) ListRunObjectsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*ListRunObjectsResp, error) {
	rsp, err := c.ListRunObjects(ctx, namespaceId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunObjectsResp(rsp)
}

// PutRunObjectWithBodyWithResponse request with arbitrary body returning *PutRunObjectResp
func (c *ClientWithResponses) PutRunObjectWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRunObjectResp, error) {
	rsp, err := c.PutRunObjectWithBody(ctx, namespaceId, pipelineId, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRunObjectResp(rsp)
}

func (c *ClientWithResponses) PutRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, body PutRunObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRunObjectResp, error) {
	rsp, err := c.PutRunObject(ctx, namespaceId, pipelineId, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRunObjectResp(rsp)
}

// DeleteRunObjectWithResponse request returning *DeleteRunObjectResp
func (c *ClientWithResponses) DeleteRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*DeleteRunObjectResp, error) {
	rsp, err := c.DeleteRunObject(ctx, namespaceId, pipelineId, runId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRunObjectResp(rsp)
}

// GetRunObjectWithResponse request returning *GetRunObjectResp
func (c *ClientWithResponses) GetRunObjectWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, key string, reqEditors ...RequestEditorFn) (*GetRunObjectResp, error) {
	rsp, err := c.GetRunObject(ctx, namespaceId, pipelineId, runId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunObjectResp(rsp)
}

// ListTaskExecutionsWithResponse request returning *ListTaskExecutionsResp
func (c *ClientWithResponses) ListTaskExecutionsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, reqEditors ...RequestEditorFn) (*ListTaskExecutionsResp, error) {
	rsp, err := c.ListTaskExecutions(ctx, namespaceId, pipelineId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTaskExecutionsResp(rsp)
}

// CancelTaskExecutionWithResponse request returning *CancelTaskExecutionResp
func (c *ClientWithResponses) CancelTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *CancelTaskExecutionParams, reqEditors ...RequestEditorFn) (*CancelTaskExecutionResp, error) {
	rsp, err := c.CancelTaskExecution(ctx, namespaceId, pipelineId, runId, taskId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelTaskExecutionResp(rsp)
}

// GetTaskExecutionWithResponse request returning *GetTaskExecutionResp
func (c *ClientWithResponses) GetTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*GetTaskExecutionResp, error) {
	rsp, err := c.GetTaskExecution(ctx, namespaceId, pipelineId, runId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskExecutionResp(rsp)
}

// AttachTaskExecutionWithResponse request returning *AttachTaskExecutionResp
func (c *ClientWithResponses) AttachTaskExecutionWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, params *AttachTaskExecutionParams, reqEditors ...RequestEditorFn) (*AttachTaskExecutionResp, error) {
	rsp, err := c.AttachTaskExecution(ctx, namespaceId, pipelineId, runId, taskId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachTaskExecutionResp(rsp)
}

// DeleteLogsWithResponse request returning *DeleteLogsResp
func (c *ClientWithResponses) DeleteLogsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*DeleteLogsResp, error) {
	rsp, err := c.DeleteLogs(ctx, namespaceId, pipelineId, runId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogsResp(rsp)
}

// GetLogsWithResponse request returning *GetLogsResp
func (c *ClientWithResponses) GetLogsWithResponse(ctx context.Context, namespaceId string, pipelineId string, runId uint64, taskId string, reqEditors ...RequestEditorFn) (*GetLogsResp, error) {
	rsp, err := c.GetLogs(ctx, namespaceId, pipelineId, runId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResp(rsp)
}

// ListPipelineSecretsWithResponse request returning *ListPipelineSecretsResp
func (c *ClientWithResponses) ListPipelineSecretsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListPipelineSecretsResp, error) {
	rsp, err := c.ListPipelineSecrets(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPipelineSecretsResp(rsp)
}

// PutPipelineSecretWithBodyWithResponse request with arbitrary body returning *PutPipelineSecretResp
func (c *ClientWithResponses) PutPipelineSecretWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPipelineSecretResp, error) {
	rsp, err := c.PutPipelineSecretWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPipelineSecretResp(rsp)
}

func (c *ClientWithResponses) PutPipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, body PutPipelineSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPipelineSecretResp, error) {
	rsp, err := c.PutPipelineSecret(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPipelineSecretResp(rsp)
}

// DeletePipelineSecretWithResponse request returning *DeletePipelineSecretResp
func (c *ClientWithResponses) DeletePipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, reqEditors ...RequestEditorFn) (*DeletePipelineSecretResp, error) {
	rsp, err := c.DeletePipelineSecret(ctx, namespaceId, pipelineId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineSecretResp(rsp)
}

// GetPipelineSecretWithResponse request returning *GetPipelineSecretResp
func (c *ClientWithResponses) GetPipelineSecretWithResponse(ctx context.Context, namespaceId string, pipelineId string, key string, params *GetPipelineSecretParams, reqEditors ...RequestEditorFn) (*GetPipelineSecretResp, error) {
	rsp, err := c.GetPipelineSecret(ctx, namespaceId, pipelineId, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineSecretResp(rsp)
}

// ListSubscriptionsWithResponse request returning *ListSubscriptionsResp
func (c *ClientWithResponses) ListSubscriptionsWithResponse(ctx context.Context, namespaceId string, pipelineId string, reqEditors ...RequestEditorFn) (*ListSubscriptionsResp, error) {
	rsp, err := c.ListSubscriptions(ctx, namespaceId, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSubscriptionsResp(rsp)
}

// CreateSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateSubscriptionResp
func (c *ClientWithResponses) CreateSubscriptionWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionResp, error) {
	rsp, err := c.CreateSubscriptionWithBody(ctx, namespaceId, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResp(rsp)
}

func (c *ClientWithResponses) CreateSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionResp, error) {
	rsp, err := c.CreateSubscription(ctx, namespaceId, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResp(rsp)
}

// DeleteSubscriptionWithResponse request returning *DeleteSubscriptionResp
func (c *ClientWithResponses) DeleteSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResp, error) {
	rsp, err := c.DeleteSubscription(ctx, namespaceId, pipelineId, extensionId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubscriptionResp(rsp)
}

// GetSubscriptionWithResponse request returning *GetSubscriptionResp
func (c *ClientWithResponses) GetSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, reqEditors ...RequestEditorFn) (*GetSubscriptionResp, error) {
	rsp, err := c.GetSubscription(ctx, namespaceId, pipelineId, extensionId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionResp(rsp)
}

// UpdateSubscriptionWithBodyWithResponse request with arbitrary body returning *UpdateSubscriptionResp
func (c *ClientWithResponses) UpdateSubscriptionWithBodyWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubscriptionResp, error) {
	rsp, err := c.UpdateSubscriptionWithBody(ctx, namespaceId, pipelineId, extensionId, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubscriptionResp(rsp)
}

func (c *ClientWithResponses) UpdateSubscriptionWithResponse(ctx context.Context, namespaceId string, pipelineId string, extensionId string, subscriptionId string, body UpdateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubscriptionResp, error) {
	rsp, err := c.UpdateSubscription(ctx, namespaceId, pipelineId, extensionId, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubscriptionResp(rsp)
}

// ListRolesWithResponse request returning *ListRolesResp
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRolesResp, error) {
	rsp, err := c.ListRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResp(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResp
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResp, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResp(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResp, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResp(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResp
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*DeleteRoleResp, error) {
	rsp, err := c.DeleteRole(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResp(rsp)
}

// GetRoleWithResponse request returning *GetRoleResp
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetRoleResp, error) {
	rsp, err := c.GetRole(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResp(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResp
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResp(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, roleId string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResp, error) {
	rsp, err := c.UpdateRole(ctx, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResp(rsp)
}

// ListGlobalSecretsWithResponse request returning *ListGlobalSecretsResp
func (c *ClientWithResponses) ListGlobalSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGlobalSecretsResp, error) {
	rsp, err := c.ListGlobalSecrets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGlobalSecretsResp(rsp)
}

// PutGlobalSecretWithBodyWithResponse request with arbitrary body returning *PutGlobalSecretResp
func (c *ClientWithResponses) PutGlobalSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGlobalSecretResp, error) {
	rsp, err := c.PutGlobalSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGlobalSecretResp(rsp)
}

func (c *ClientWithResponses) PutGlobalSecretWithResponse(ctx context.Context, body PutGlobalSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGlobalSecretResp, error) {
	rsp, err := c.PutGlobalSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGlobalSecretResp(rsp)
}

// DeleteGlobalSecretWithResponse request returning *DeleteGlobalSecretResp
func (c *ClientWithResponses) DeleteGlobalSecretWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteGlobalSecretResp, error) {
	rsp, err := c.DeleteGlobalSecret(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGlobalSecretResp(rsp)
}

// GetGlobalSecretWithResponse request returning *GetGlobalSecretResp
func (c *ClientWithResponses) GetGlobalSecretWithResponse(ctx context.Context, key string, params *GetGlobalSecretParams, reqEditors ...RequestEditorFn) (*GetGlobalSecretResp, error) {
	rsp, err := c.GetGlobalSecret(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalSecretResp(rsp)
}

// GetSystemPreferencesWithResponse request returning *GetSystemPreferencesResp
func (c *ClientWithResponses) GetSystemPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemPreferencesResp, error) {
	rsp, err := c.GetSystemPreferences(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemPreferencesResp(rsp)
}

// UpdateSystemPreferencesWithBodyWithResponse request with arbitrary body returning *UpdateSystemPreferencesResp
func (c *ClientWithResponses) UpdateSystemPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSystemPreferencesResp, error) {
	rsp, err := c.UpdateSystemPreferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSystemPreferencesResp(rsp)
}

func (c *ClientWithResponses) UpdateSystemPreferencesWithResponse(ctx context.Context, body UpdateSystemPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSystemPreferencesResp, error) {
	rsp, err := c.UpdateSystemPreferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSystemPreferencesResp(rsp)
}

// GetMetadataWithResponse request returning *GetMetadataResp
func (c *ClientWithResponses) GetMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetadataResp, error) {
	rsp, err := c.GetMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetadataResp(rsp)
}

// ListTokensWithResponse request returning *ListTokensResp
func (c *ClientWithResponses) ListTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTokensResp, error) {
	rsp, err := c.ListTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTokensResp(rsp)
}

// CreateTokenWithBodyWithResponse request with arbitrary body returning *CreateTokenResp
func (c *ClientWithResponses) CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResp, error) {
	rsp, err := c.CreateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResp(rsp)
}

func (c *ClientWithResponses) CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResp, error) {
	rsp, err := c.CreateToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResp(rsp)
}

// CreateBootstrapTokenWithResponse request returning *CreateBootstrapTokenResp
func (c *ClientWithResponses) CreateBootstrapTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateBootstrapTokenResp, error) {
	rsp, err := c.CreateBootstrapToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBootstrapTokenResp(rsp)
}

// WhoamiWithResponse request returning *WhoamiResp
func (c *ClientWithResponses) WhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoamiResp, error) {
	rsp, err := c.Whoami(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWhoamiResp(rsp)
}

// DeleteTokenWithResponse request returning *DeleteTokenResp
func (c *ClientWithResponses) DeleteTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTokenResp, error) {
	rsp, err := c.DeleteToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTokenResp(rsp)
}

// GetTokenByIdWithResponse request returning *GetTokenByIdResp
func (c *ClientWithResponses) GetTokenByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTokenByIdResp, error) {
	rsp, err := c.GetTokenById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenByIdResp(rsp)
}

// UpdateTokenWithBodyWithResponse request with arbitrary body returning *UpdateTokenResp
func (c *ClientWithResponses) UpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResp, error) {
	rsp, err := c.UpdateTokenWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResp(rsp)
}

func (c *ClientWithResponses) UpdateTokenWithResponse(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResp, error) {
	rsp, err := c.UpdateToken(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResp(rsp)
}

// ParseStreamEventsResp parses an HTTP response from a StreamEventsWithResponse call
func ParseStreamEventsResp(rsp *http.Response) (*StreamEventsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamEventsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEventResp parses an HTTP response from a DeleteEventWithResponse call
func ParseDeleteEventResp(rsp *http.Response) (*DeleteEventResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEventResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetEventResp parses an HTTP response from a GetEventWithResponse call
func ParseGetEventResp(rsp *http.Response) (*GetEventResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListExtensionsResp parses an HTTP response from a ListExtensionsWithResponse call
func ParseListExtensionsResp(rsp *http.Response) (*ListExtensionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExtensionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExtensionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseInstallExtensionResp parses an HTTP response from a InstallExtensionWithResponse call
func ParseInstallExtensionResp(rsp *http.Response) (*InstallExtensionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallExtensionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InstallExtensionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUninstallExtensionResp parses an HTTP response from a UninstallExtensionWithResponse call
func ParseUninstallExtensionResp(rsp *http.Response) (*UninstallExtensionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UninstallExtensionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetExtensionResp parses an HTTP response from a GetExtensionWithResponse call
func ParseGetExtensionResp(rsp *http.Response) (*GetExtensionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetExtensionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateExtensionResp parses an HTTP response from a UpdateExtensionWithResponse call
func ParseUpdateExtensionResp(rsp *http.Response) (*UpdateExtensionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateExtensionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetExtensionDebugInfoResp parses an HTTP response from a GetExtensionDebugInfoWithResponse call
func ParseGetExtensionDebugInfoResp(rsp *http.Response) (*GetExtensionDebugInfoResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionDebugInfoResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DebugResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetExtensionLogsResp parses an HTTP response from a GetExtensionLogsWithResponse call
func ParseGetExtensionLogsResp(rsp *http.Response) (*GetExtensionLogsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionLogsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListExtensionObjectsResp parses an HTTP response from a ListExtensionObjectsWithResponse call
func ParseListExtensionObjectsResp(rsp *http.Response) (*ListExtensionObjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExtensionObjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExtensionObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutExtensionObjectResp parses an HTTP response from a PutExtensionObjectWithResponse call
func ParsePutExtensionObjectResp(rsp *http.Response) (*PutExtensionObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutExtensionObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PutExtensionObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteExtensionObjectResp parses an HTTP response from a DeleteExtensionObjectWithResponse call
func ParseDeleteExtensionObjectResp(rsp *http.Response) (*DeleteExtensionObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExtensionObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetExtensionObjectResp parses an HTTP response from a GetExtensionObjectWithResponse call
func ParseGetExtensionObjectResp(rsp *http.Response) (*GetExtensionObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetExtensionObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListExtensionSubscriptionsResp parses an HTTP response from a ListExtensionSubscriptionsWithResponse call
func ParseListExtensionSubscriptionsResp(rsp *http.Response) (*ListExtensionSubscriptionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExtensionSubscriptionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExtensionSubscriptionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListNamespacesResp parses an HTTP response from a ListNamespacesWithResponse call
func ParseListNamespacesResp(rsp *http.Response) (*ListNamespacesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListNamespacesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateNamespaceResp parses an HTTP response from a CreateNamespaceWithResponse call
func ParseCreateNamespaceResp(rsp *http.Response) (*CreateNamespaceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNamespaceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateNamespaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteNamespaceResp parses an HTTP response from a DeleteNamespaceWithResponse call
func ParseDeleteNamespaceResp(rsp *http.Response) (*DeleteNamespaceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNamespaceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetNamespaceResp parses an HTTP response from a GetNamespaceWithResponse call
func ParseGetNamespaceResp(rsp *http.Response) (*GetNamespaceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNamespaceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetNamespaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateNamespaceResp parses an HTTP response from a UpdateNamespaceWithResponse call
func ParseUpdateNamespaceResp(rsp *http.Response) (*UpdateNamespaceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNamespaceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateNamespaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListPipelinesResp parses an HTTP response from a ListPipelinesWithResponse call
func ParseListPipelinesResp(rsp *http.Response) (*ListPipelinesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelinesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPipelinesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeletePipelineResp parses an HTTP response from a DeletePipelineWithResponse call
func ParseDeletePipelineResp(rsp *http.Response) (*DeletePipelineResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetPipelineResp parses an HTTP response from a GetPipelineWithResponse call
func ParseGetPipelineResp(rsp *http.Response) (*GetPipelineResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPipelineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdatePipelineResp parses an HTTP response from a UpdatePipelineWithResponse call
func ParseUpdatePipelineResp(rsp *http.Response) (*UpdatePipelineResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListConfigsResp parses an HTTP response from a ListConfigsWithResponse call
func ParseListConfigsResp(rsp *http.Response) (*ListConfigsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConfigsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPipelineConfigsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseRegisterConfigResp parses an HTTP response from a RegisterConfigWithResponse call
func ParseRegisterConfigResp(rsp *http.Response) (*RegisterConfigResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterConfigResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterPipelineConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteConfigResp parses an HTTP response from a DeleteConfigWithResponse call
func ParseDeleteConfigResp(rsp *http.Response) (*DeleteConfigResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetConfigResp parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResp(rsp *http.Response) (*GetConfigResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPipelineConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeployConfigResp parses an HTTP response from a DeployConfigWithResponse call
func ParseDeployConfigResp(rsp *http.Response) (*DeployConfigResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployConfigResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeployPipelineConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListDeploymentsResp parses an HTTP response from a ListDeploymentsWithResponse call
func ParseListDeploymentsResp(rsp *http.Response) (*ListDeploymentsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDeploymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDeploymentResp parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResp(rsp *http.Response) (*GetDeploymentResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListPipelineObjectsResp parses an HTTP response from a ListPipelineObjectsWithResponse call
func ParseListPipelineObjectsResp(rsp *http.Response) (*ListPipelineObjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineObjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPipelineObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutPipelineObjectResp parses an HTTP response from a PutPipelineObjectWithResponse call
func ParsePutPipelineObjectResp(rsp *http.Response) (*PutPipelineObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPipelineObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PutPipelineObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeletePipelineObjectResp parses an HTTP response from a DeletePipelineObjectWithResponse call
func ParseDeletePipelineObjectResp(rsp *http.Response) (*DeletePipelineObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetPipelineObjectResp parses an HTTP response from a GetPipelineObjectWithResponse call
func ParseGetPipelineObjectResp(rsp *http.Response) (*GetPipelineObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPipelineObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListRunsResp parses an HTTP response from a ListRunsWithResponse call
func ParseListRunsResp(rsp *http.Response) (*ListRunsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRunsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseStartRunResp parses an HTTP response from a StartRunWithResponse call
func ParseStartRunResp(rsp *http.Response) (*StartRunResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRunResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StartRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCancelRunResp parses an HTTP response from a CancelRunWithResponse call
func ParseCancelRunResp(rsp *http.Response) (*CancelRunResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelRunResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetRunResp parses an HTTP response from a GetRunWithResponse call
func ParseGetRunResp(rsp *http.Response) (*GetRunResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListRunObjectsResp parses an HTTP response from a ListRunObjectsWithResponse call
func ParseListRunObjectsResp(rsp *http.Response) (*ListRunObjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunObjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRunObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutRunObjectResp parses an HTTP response from a PutRunObjectWithResponse call
func ParsePutRunObjectResp(rsp *http.Response) (*PutRunObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRunObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PutRunObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRunObjectResp parses an HTTP response from a DeleteRunObjectWithResponse call
func ParseDeleteRunObjectResp(rsp *http.Response) (*DeleteRunObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRunObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetRunObjectResp parses an HTTP response from a GetRunObjectWithResponse call
func ParseGetRunObjectResp(rsp *http.Response) (*GetRunObjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunObjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRunObjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListTaskExecutionsResp parses an HTTP response from a ListTaskExecutionsWithResponse call
func ParseListTaskExecutionsResp(rsp *http.Response) (*ListTaskExecutionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTaskExecutionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTaskExecutionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCancelTaskExecutionResp parses an HTTP response from a CancelTaskExecutionWithResponse call
func ParseCancelTaskExecutionResp(rsp *http.Response) (*CancelTaskExecutionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelTaskExecutionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTaskExecutionResp parses an HTTP response from a GetTaskExecutionWithResponse call
func ParseGetTaskExecutionResp(rsp *http.Response) (*GetTaskExecutionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskExecutionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskExecutionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseAttachTaskExecutionResp parses an HTTP response from a AttachTaskExecutionWithResponse call
func ParseAttachTaskExecutionResp(rsp *http.Response) (*AttachTaskExecutionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachTaskExecutionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteLogsResp parses an HTTP response from a DeleteLogsWithResponse call
func ParseDeleteLogsResp(rsp *http.Response) (*DeleteLogsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetLogsResp parses an HTTP response from a GetLogsWithResponse call
func ParseGetLogsResp(rsp *http.Response) (*GetLogsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListPipelineSecretsResp parses an HTTP response from a ListPipelineSecretsWithResponse call
func ParseListPipelineSecretsResp(rsp *http.Response) (*ListPipelineSecretsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPipelineSecretsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPipelineSecretsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutPipelineSecretResp parses an HTTP response from a PutPipelineSecretWithResponse call
func ParsePutPipelineSecretResp(rsp *http.Response) (*PutPipelineSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPipelineSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PutPipelineSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeletePipelineSecretResp parses an HTTP response from a DeletePipelineSecretWithResponse call
func ParseDeletePipelineSecretResp(rsp *http.Response) (*DeletePipelineSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetPipelineSecretResp parses an HTTP response from a GetPipelineSecretWithResponse call
func ParseGetPipelineSecretResp(rsp *http.Response) (*GetPipelineSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPipelineSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListSubscriptionsResp parses an HTTP response from a ListSubscriptionsWithResponse call
func ParseListSubscriptionsResp(rsp *http.Response) (*ListSubscriptionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSubscriptionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSubscriptionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateSubscriptionResp parses an HTTP response from a CreateSubscriptionWithResponse call
func ParseCreateSubscriptionResp(rsp *http.Response) (*CreateSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteSubscriptionResp parses an HTTP response from a DeleteSubscriptionWithResponse call
func ParseDeleteSubscriptionResp(rsp *http.Response) (*DeleteSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSubscriptionResp parses an HTTP response from a GetSubscriptionWithResponse call
func ParseGetSubscriptionResp(rsp *http.Response) (*GetSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateSubscriptionResp parses an HTTP response from a UpdateSubscriptionWithResponse call
func ParseUpdateSubscriptionResp(rsp *http.Response) (*UpdateSubscriptionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSubscriptionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListRolesResp parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResp(rsp *http.Response) (*ListRolesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateRoleResp parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResp(rsp *http.Response) (*CreateRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRoleResp parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResp(rsp *http.Response) (*DeleteRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetRoleResp parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResp(rsp *http.Response) (*GetRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateRoleResp parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResp(rsp *http.Response) (*UpdateRoleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListGlobalSecretsResp parses an HTTP response from a ListGlobalSecretsWithResponse call
func ParseListGlobalSecretsResp(rsp *http.Response) (*ListGlobalSecretsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGlobalSecretsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListGlobalSecretsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutGlobalSecretResp parses an HTTP response from a PutGlobalSecretWithResponse call
func ParsePutGlobalSecretResp(rsp *http.Response) (*PutGlobalSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGlobalSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PutGlobalSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteGlobalSecretResp parses an HTTP response from a DeleteGlobalSecretWithResponse call
func ParseDeleteGlobalSecretResp(rsp *http.Response) (*DeleteGlobalSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGlobalSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetGlobalSecretResp parses an HTTP response from a GetGlobalSecretWithResponse call
func ParseGetGlobalSecretResp(rsp *http.Response) (*GetGlobalSecretResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalSecretResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGlobalSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemPreferencesResp parses an HTTP response from a GetSystemPreferencesWithResponse call
func ParseGetSystemPreferencesResp(rsp *http.Response) (*GetSystemPreferencesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemPreferencesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSystemPreferencesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateSystemPreferencesResp parses an HTTP response from a UpdateSystemPreferencesWithResponse call
func ParseUpdateSystemPreferencesResp(rsp *http.Response) (*UpdateSystemPreferencesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSystemPreferencesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateSystemPreferencesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetMetadataResp parses an HTTP response from a GetMetadataWithResponse call
func ParseGetMetadataResp(rsp *http.Response) (*GetMetadataResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetadataResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSystemMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseListTokensResp parses an HTTP response from a ListTokensWithResponse call
func ParseListTokensResp(rsp *http.Response) (*ListTokensResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTokensResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateTokenResp parses an HTTP response from a CreateTokenWithResponse call
func ParseCreateTokenResp(rsp *http.Response) (*CreateTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCreateBootstrapTokenResp parses an HTTP response from a CreateBootstrapTokenWithResponse call
func ParseCreateBootstrapTokenResp(rsp *http.Response) (*CreateBootstrapTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBootstrapTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseWhoamiResp parses an HTTP response from a WhoamiWithResponse call
func ParseWhoamiResp(rsp *http.Response) (*WhoamiResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WhoamiResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WhoAmIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteTokenResp parses an HTTP response from a DeleteTokenWithResponse call
func ParseDeleteTokenResp(rsp *http.Response) (*DeleteTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTokenByIdResp parses an HTTP response from a GetTokenByIdWithResponse call
func ParseGetTokenByIdResp(rsp *http.Response) (*GetTokenByIdResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenByIdResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTokenByIDResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseUpdateTokenResp parses an HTTP response from a UpdateTokenWithResponse call
func ParseUpdateTokenResp(rsp *http.Response) (*UpdateTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}
