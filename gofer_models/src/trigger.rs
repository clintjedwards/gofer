use std::collections::HashMap;

use serde::{Deserialize, Serialize};
use strum::{Display, EnumString};

/// TriggerResultState is a description of an events specific outcome. Events are normally generated by triggers
/// so its helpful to have them be able to pass down an event, but also give an indication on what that event
/// might mean.
///
/// For example: A trigger that evaluates whether a pipeline should run on a specific date might also skip certain
/// holidays. In this case it would pass down an "skipped" event result to inform the user that their pipeline
/// would have ran, but did not due to holiday.
pub enum TriggerResult {
    Unknown,
    Success,
    Failure,
    Skipped,
}

/// Since triggers are run solely via containers, we need a way to track their state so that Gofer understands
/// what a container is currently doing and when it's ready to serve traffic.
#[derive(Debug, Display, EnumString, Serialize, Deserialize, PartialEq, Eq)]
pub enum TriggerState {
    /// Cannot determine state of Trigger, should never be in this state.
    Unknown,
    /// Going through pre-scheduling verification and prep.
    Processing,
    /// Running and ready to process requests.
    Running,
    /// Trigger has exited; usually because of an error.
    Exited,
}

/// The in-memory representation of a trigger, because triggers are somewhat ephemeral, many of the items listed
/// here quickly go out of date and are not worth storing in the database.
/// Because of this we keep an in-memory representation and store only trigger registrations.
pub struct Trigger {
    /// User given custom name for a trigger, allowing multiple triggers of the same image to be used with different
    /// configurations. Must be unique among other triggers.
    pub name: String,
    pub image: String, // The docker image string.
    /// URL is the network address used to communicate with the trigger by the main process.
    pub url: Option<String>,
    /// SchedulerID is an identifier used by the scheduler to point out which container this trigger is mapped to. Used
    /// when manipulating the container through the identifier.
    pub scheduler_id: Option<String>,
    pub started: u64,
    pub state: TriggerState,
    pub documentation: Option<String>,
    /// Key is a trigger's authentication key used to validate requests from the Gofer main service.
    /// On every request the Gofer service passes this key so that it is impossible for other service to contact
    /// and manipulate triggers directly.
    pub key: Option<String>,
}

/// When installing a new trigger, we allow the trigger installer to pass a bunch of settings that
/// allow us to go get that trigger on future startups.
pub struct TriggerRegistration {
    pub name: String,
    pub image: String,
    pub user: Option<String>,
    pub pass: Option<String>,
    pub variables: HashMap<String, String>,
}

impl From<gofer_proto::InstallTriggerRequest> for TriggerRegistration {
    fn from(v: gofer_proto::InstallTriggerRequest) -> Self {
        Self {
            name: v.name,
            image: v.image,
            user: {
                if v.user.is_empty() {
                    None
                } else {
                    Some(v.user)
                }
            },
            pass: {
                if v.pass.is_empty() {
                    None
                } else {
                    Some(v.pass)
                }
            },
            variables: v.variables,
        }
    }
}
