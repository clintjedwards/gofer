// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: gofer.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gofer_GetSystemInfo_FullMethodName                        = "/proto.Gofer/GetSystemInfo"
	Gofer_GetSystemSummary_FullMethodName                     = "/proto.Gofer/GetSystemSummary"
	Gofer_RepairOrphan_FullMethodName                         = "/proto.Gofer/RepairOrphan"
	Gofer_ToggleEventIngress_FullMethodName                   = "/proto.Gofer/ToggleEventIngress"
	Gofer_CreateToken_FullMethodName                          = "/proto.Gofer/CreateToken"
	Gofer_BootstrapToken_FullMethodName                       = "/proto.Gofer/BootstrapToken"
	Gofer_ListTokens_FullMethodName                           = "/proto.Gofer/ListTokens"
	Gofer_GetToken_FullMethodName                             = "/proto.Gofer/GetToken"
	Gofer_EnableToken_FullMethodName                          = "/proto.Gofer/EnableToken"
	Gofer_DisableToken_FullMethodName                         = "/proto.Gofer/DisableToken"
	Gofer_DeleteToken_FullMethodName                          = "/proto.Gofer/DeleteToken"
	Gofer_ListNamespaces_FullMethodName                       = "/proto.Gofer/ListNamespaces"
	Gofer_CreateNamespace_FullMethodName                      = "/proto.Gofer/CreateNamespace"
	Gofer_GetNamespace_FullMethodName                         = "/proto.Gofer/GetNamespace"
	Gofer_UpdateNamespace_FullMethodName                      = "/proto.Gofer/UpdateNamespace"
	Gofer_DeleteNamespace_FullMethodName                      = "/proto.Gofer/DeleteNamespace"
	Gofer_GetPipeline_FullMethodName                          = "/proto.Gofer/GetPipeline"
	Gofer_ListPipelines_FullMethodName                        = "/proto.Gofer/ListPipelines"
	Gofer_EnablePipeline_FullMethodName                       = "/proto.Gofer/EnablePipeline"
	Gofer_DisablePipeline_FullMethodName                      = "/proto.Gofer/DisablePipeline"
	Gofer_DeployPipeline_FullMethodName                       = "/proto.Gofer/DeployPipeline"
	Gofer_DeletePipeline_FullMethodName                       = "/proto.Gofer/DeletePipeline"
	Gofer_RegisterPipelineConfig_FullMethodName               = "/proto.Gofer/RegisterPipelineConfig"
	Gofer_ListPipelineConfigs_FullMethodName                  = "/proto.Gofer/ListPipelineConfigs"
	Gofer_GetPipelineConfig_FullMethodName                    = "/proto.Gofer/GetPipelineConfig"
	Gofer_DeletePipelineConfig_FullMethodName                 = "/proto.Gofer/DeletePipelineConfig"
	Gofer_CreatePipelineExtensionSubscription_FullMethodName  = "/proto.Gofer/CreatePipelineExtensionSubscription"
	Gofer_ListPipelineExtensionSubscriptions_FullMethodName   = "/proto.Gofer/ListPipelineExtensionSubscriptions"
	Gofer_GetPipelineExtensionSubscription_FullMethodName     = "/proto.Gofer/GetPipelineExtensionSubscription"
	Gofer_EnablePipelineExtensionSubscription_FullMethodName  = "/proto.Gofer/EnablePipelineExtensionSubscription"
	Gofer_DisablePipelineExtensionSubscription_FullMethodName = "/proto.Gofer/DisablePipelineExtensionSubscription"
	Gofer_DeletePipelineExtensionSubscription_FullMethodName  = "/proto.Gofer/DeletePipelineExtensionSubscription"
	Gofer_ListDeployments_FullMethodName                      = "/proto.Gofer/ListDeployments"
	Gofer_GetDeployment_FullMethodName                        = "/proto.Gofer/GetDeployment"
	Gofer_GetRun_FullMethodName                               = "/proto.Gofer/GetRun"
	Gofer_ListRuns_FullMethodName                             = "/proto.Gofer/ListRuns"
	Gofer_StartRun_FullMethodName                             = "/proto.Gofer/StartRun"
	Gofer_RetryRun_FullMethodName                             = "/proto.Gofer/RetryRun"
	Gofer_CancelRun_FullMethodName                            = "/proto.Gofer/CancelRun"
	Gofer_CancelAllRuns_FullMethodName                        = "/proto.Gofer/CancelAllRuns"
	Gofer_GetTaskRun_FullMethodName                           = "/proto.Gofer/GetTaskRun"
	Gofer_ListTaskRuns_FullMethodName                         = "/proto.Gofer/ListTaskRuns"
	Gofer_CancelTaskRun_FullMethodName                        = "/proto.Gofer/CancelTaskRun"
	Gofer_AttachToTaskRun_FullMethodName                      = "/proto.Gofer/AttachToTaskRun"
	Gofer_GetTaskRunLogs_FullMethodName                       = "/proto.Gofer/GetTaskRunLogs"
	Gofer_DeleteTaskRunLogs_FullMethodName                    = "/proto.Gofer/DeleteTaskRunLogs"
	Gofer_GetExtension_FullMethodName                         = "/proto.Gofer/GetExtension"
	Gofer_ListExtensions_FullMethodName                       = "/proto.Gofer/ListExtensions"
	Gofer_RunExtensionInstaller_FullMethodName                = "/proto.Gofer/RunExtensionInstaller"
	Gofer_RunPipelineConfigurator_FullMethodName              = "/proto.Gofer/RunPipelineConfigurator"
	Gofer_InstallExtension_FullMethodName                     = "/proto.Gofer/InstallExtension"
	Gofer_UninstallExtension_FullMethodName                   = "/proto.Gofer/UninstallExtension"
	Gofer_EnableExtension_FullMethodName                      = "/proto.Gofer/EnableExtension"
	Gofer_DisableExtension_FullMethodName                     = "/proto.Gofer/DisableExtension"
	Gofer_ListPipelineObjects_FullMethodName                  = "/proto.Gofer/ListPipelineObjects"
	Gofer_GetPipelineObject_FullMethodName                    = "/proto.Gofer/GetPipelineObject"
	Gofer_PutPipelineObject_FullMethodName                    = "/proto.Gofer/PutPipelineObject"
	Gofer_DeletePipelineObject_FullMethodName                 = "/proto.Gofer/DeletePipelineObject"
	Gofer_ListRunObjects_FullMethodName                       = "/proto.Gofer/ListRunObjects"
	Gofer_GetRunObject_FullMethodName                         = "/proto.Gofer/GetRunObject"
	Gofer_PutRunObject_FullMethodName                         = "/proto.Gofer/PutRunObject"
	Gofer_DeleteRunObject_FullMethodName                      = "/proto.Gofer/DeleteRunObject"
	Gofer_GetPipelineSecret_FullMethodName                    = "/proto.Gofer/GetPipelineSecret"
	Gofer_ListPipelineSecrets_FullMethodName                  = "/proto.Gofer/ListPipelineSecrets"
	Gofer_PutPipelineSecret_FullMethodName                    = "/proto.Gofer/PutPipelineSecret"
	Gofer_DeletePipelineSecret_FullMethodName                 = "/proto.Gofer/DeletePipelineSecret"
	Gofer_GetGlobalSecret_FullMethodName                      = "/proto.Gofer/GetGlobalSecret"
	Gofer_ListGlobalSecrets_FullMethodName                    = "/proto.Gofer/ListGlobalSecrets"
	Gofer_PutGlobalSecret_FullMethodName                      = "/proto.Gofer/PutGlobalSecret"
	Gofer_DeleteGlobalSecret_FullMethodName                   = "/proto.Gofer/DeleteGlobalSecret"
	Gofer_GetEvent_FullMethodName                             = "/proto.Gofer/GetEvent"
	Gofer_ListEvents_FullMethodName                           = "/proto.Gofer/ListEvents"
)

// GoferClient is the client API for Gofer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoferClient interface {
	// //////////// System RPCs //////////////
	//
	// Service RPCs exist to help with management of the Gofer service. They
	// usually perform admin type interactions with the service as a whole and
	// provide ways for admins to quickly repair Gofer broken states without
	// having to stop the entire service.
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// A general endpoint to retrieve various metrics about the Gofer service.
	GetSystemSummary(ctx context.Context, in *GetSystemSummaryRequest, opts ...grpc.CallOption) (*GetSystemSummaryResponse, error)
	// RepairOrphan is used when a single run has gotten into a state that does
	// not reflect what actually happened to the run. This can happen if the Gofer
	// service crashes for unforeseen reasons. Usually this route is not needed as
	// Gofer will make an attempt to resolve all orphaned runs upon startup. But
	// in the rare case that a run gets into a bad state during the service's
	// normal execution this route can be used to attempt to repair the orphaned
	// run or at the very least mark it as failed so it isn't stuck in a
	// unfinished state.
	RepairOrphan(ctx context.Context, in *RepairOrphanRequest, opts ...grpc.CallOption) (*RepairOrphanResponse, error)
	// ToggleEventIngress allows the admin to start or stop the execution of all
	// pipelines within Gofer. This can be useful under some security implications
	// or for the purposes of defining general downtime and service maintenance.
	ToggleEventIngress(ctx context.Context, in *ToggleEventIngressRequest, opts ...grpc.CallOption) (*ToggleEventIngressResponse, error)
	// CreateToken manifests a new API token; This token can be a management
	// token(the equivalent of root in Linux) or a client token. Management tokens
	// are the only tokens that can generate tokens.
	// Client tokens are used to manage which namespaces users have access to.
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	// BootstrapToken creates the initial management token used to create all
	// other tokens.
	BootstrapToken(ctx context.Context, in *BootstrapTokenRequest, opts ...grpc.CallOption) (*BootstrapTokenResponse, error)
	// ListTokens returns information about all tokens for a particular namespace;
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error)
	// GetToken returns information about a particular token;
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// EnableToken makes a token usable.
	EnableToken(ctx context.Context, in *EnableTokenRequest, opts ...grpc.CallOption) (*EnableTokenResponse, error)
	// DisableToken makes a token unusable.
	DisableToken(ctx context.Context, in *DisableTokenRequest, opts ...grpc.CallOption) (*DisableTokenResponse, error)
	// DeleteToken removes a token.
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
	// ListNamespaces returns all registered namespaces.
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	// CreateNamespace creates a new namespace that separates pipelines.
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// GetNamespace returns a single namespace by id.
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// UpdateNamespace updates the details of a particular namespace by id.
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	// DeleteNamespace removes a namespace by id.
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// GetPipeline returns a single pipeline by ID.
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// ListPipelines returns all registered pipelines. Can control pagination by
	// offset && limit request parameters.
	// By default ListPipelines will return the first 100 pipelines ordered by
	// creation.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// EnablePipeline allows a pipeline to execute runs by allowing it to receive
	// extension events. See DisablePipeline to prevent a pipeline from executing
	// any more runs.
	EnablePipeline(ctx context.Context, in *EnablePipelineRequest, opts ...grpc.CallOption) (*EnablePipelineResponse, error)
	// DisablePipeline prevents the pipeline from executing runs. Any extension
	// events that would normally cause the pipeline to be run are instead
	// discarded.
	DisablePipeline(ctx context.Context, in *DisablePipelineRequest, opts ...grpc.CallOption) (*DisablePipelineResponse, error)
	// DeployPipeline attempts to deploy a version of a pipeline.
	DeployPipeline(ctx context.Context, in *DeployPipelineRequest, opts ...grpc.CallOption) (*DeployPipelineResponse, error)
	// DeletePipeline deletes a pipeline permenantly. It is not recoverable.
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error)
	// RegisterPipelineConfig registers a new version of a pipeline's
	// configuration. If the pipeline does not exist it will be created.
	RegisterPipelineConfig(ctx context.Context, in *RegisterPipelineConfigRequest, opts ...grpc.CallOption) (*RegisterPipelineConfigResponse, error)
	// ListPipelineConfigs returns all registered pipeline configs.
	ListPipelineConfigs(ctx context.Context, in *ListPipelineConfigsRequest, opts ...grpc.CallOption) (*ListPipelineConfigsResponse, error)
	// GetPipelineConfig returns a single pipelineconfig by id.
	GetPipelineConfig(ctx context.Context, in *GetPipelineConfigRequest, opts ...grpc.CallOption) (*GetPipelineConfigResponse, error)
	// DeletePipelineConfig removes a pipelineconfig by id.
	DeletePipelineConfig(ctx context.Context, in *DeletePipelineConfigRequest, opts ...grpc.CallOption) (*DeletePipelineConfigResponse, error)
	// //////////// Pipeline Extension Subscription RPCs //////////////
	//
	// Pipelines can subscribe to extensions in order to extend their
	// functionality.
	//
	// Subscribe a pipeline to a extension.
	CreatePipelineExtensionSubscription(ctx context.Context, in *CreatePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*CreatePipelineExtensionSubscriptionResponse, error)
	// ListPipelineExtensionSubscriptions returns all extension subscriptions for
	// a particular pipeline.
	ListPipelineExtensionSubscriptions(ctx context.Context, in *ListPipelineExtensionSubscriptionsRequest, opts ...grpc.CallOption) (*ListPipelineExtensionSubscriptionsResponse, error)
	// GetPipelineExtensionSubscription returns a single pipeline extension
	// subscription.
	GetPipelineExtensionSubscription(ctx context.Context, in *GetPipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*GetPipelineExtensionSubscriptionResponse, error)
	// EnablePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	EnablePipelineExtensionSubscription(ctx context.Context, in *EnablePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*EnablePipelineExtensionSubscriptionResponse, error)
	// DisablePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	DisablePipelineExtensionSubscription(ctx context.Context, in *DisablePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*DisablePipelineExtensionSubscriptionResponse, error)
	// DeletePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	DeletePipelineExtensionSubscription(ctx context.Context, in *DeletePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*DeletePipelineExtensionSubscriptionResponse, error)
	// ListDeployments
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// GetDeployment
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	// GetRun returns the details of a single run.
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error)
	// ListRuns returns a list of all runs by Pipeline ID. Pagination can be
	// controlled via the offset and limit parameters of the request.
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// StartRun executes a single run of a particular pipeline.
	StartRun(ctx context.Context, in *StartRunRequest, opts ...grpc.CallOption) (*StartRunResponse, error)
	// RetryRun simply takes the vars and settings from a previous run and re-uses
	// those to launch a new run. Useful for if you want the exact settings from a
	// previous run.
	RetryRun(ctx context.Context, in *RetryRunRequest, opts ...grpc.CallOption) (*RetryRunResponse, error)
	// CancelRun stops the execution of a run in progress. Any task runs that
	// might have been running at the time Are ask to stop gracefully(SIGINT)
	// unless the force parameter is used, in which case the task runs are stopped
	// instantly(SIGKILL) and the run is cancelled.
	CancelRun(ctx context.Context, in *CancelRunRequest, opts ...grpc.CallOption) (*CancelRunResponse, error)
	// CancelAllRuns stops the execution of any in-progress runs for a specific
	// pipeline by ID.
	CancelAllRuns(ctx context.Context, in *CancelAllRunsRequest, opts ...grpc.CallOption) (*CancelAllRunsResponse, error)
	// GetTaskRun returns the details of a single task run.
	GetTaskRun(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*GetTaskRunResponse, error)
	// ListTaskRuns returns all task runs for a current run by ID.
	ListTaskRuns(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error)
	// CancelTaskRun cancels a specific task run, sending the related container a
	// SIGINT signal. If the force flag is used we instead send the container a
	// SIGKILL signal.
	//
	// Task runs that are cancelled can cause other downstream task runs to be
	// skipped depending on those downstream task run dependencies.
	CancelTaskRun(ctx context.Context, in *CancelTaskRunRequest, opts ...grpc.CallOption) (*CancelTaskRunResponse, error)
	// Attach to a running task run container. Useful for debugging.
	AttachToTaskRun(ctx context.Context, opts ...grpc.CallOption) (Gofer_AttachToTaskRunClient, error)
	// GetTaskRunLogs returns logs for a specific task run line by line in a
	// stream. The logs are returns with both STDOUT and STDERR of the associated
	// container combined.
	GetTaskRunLogs(ctx context.Context, in *GetTaskRunLogsRequest, opts ...grpc.CallOption) (Gofer_GetTaskRunLogsClient, error)
	// DeleteTaskRunLogs removes a task run's associated log object. This is
	// useful for if logs mistakenly contain sensitive data.
	DeleteTaskRunLogs(ctx context.Context, in *DeleteTaskRunLogsRequest, opts ...grpc.CallOption) (*DeleteTaskRunLogsResponse, error)
	// GetExtension returns details about a specific extension.
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*GetExtensionResponse, error)
	// ListExtensions lists all extensions currently registered within gofer.
	ListExtensions(ctx context.Context, in *ListExtensionsRequest, opts ...grpc.CallOption) (*ListExtensionsResponse, error)
	// Run the installer that helps admin user install the extension.
	RunExtensionInstaller(ctx context.Context, opts ...grpc.CallOption) (Gofer_RunExtensionInstallerClient, error)
	// Run the installer that helps pipeline users with their pipeline extension
	// configuration.
	RunPipelineConfigurator(ctx context.Context, opts ...grpc.CallOption) (Gofer_RunPipelineConfiguratorClient, error)
	// InstallExtension attempts to install a new extension.
	InstallExtension(ctx context.Context, in *InstallExtensionRequest, opts ...grpc.CallOption) (*InstallExtensionResponse, error)
	// UninstallExtension attempts to uninstall a extension.
	UninstallExtension(ctx context.Context, in *UninstallExtensionRequest, opts ...grpc.CallOption) (*UninstallExtensionResponse, error)
	// EnableExtension attempts to enable a new extension.
	EnableExtension(ctx context.Context, in *EnableExtensionRequest, opts ...grpc.CallOption) (*EnableExtensionResponse, error)
	// DisableExtension attempts to disable a new extension.
	DisableExtension(ctx context.Context, in *DisableExtensionRequest, opts ...grpc.CallOption) (*DisableExtensionResponse, error)
	// ListPipelineObjects returns a list of all pipeline object keys.
	ListPipelineObjects(ctx context.Context, in *ListPipelineObjectsRequest, opts ...grpc.CallOption) (*ListPipelineObjectsResponse, error)
	// GetPipelineObject returns a single pipeline object by pipeline ID and key.
	GetPipelineObject(ctx context.Context, in *GetPipelineObjectRequest, opts ...grpc.CallOption) (*GetPipelineObjectResponse, error)
	// PutPipelineObject uploads a single pipeline object by pipeline ID and key.
	// Objects which are put under the same key do not count towards the pipeline
	// object limit.
	PutPipelineObject(ctx context.Context, in *PutPipelineObjectRequest, opts ...grpc.CallOption) (*PutPipelineObjectResponse, error)
	// DeletePipelineObject removes a single pipeline object by pipeline ID and
	// key. Removing a pipeline object decrements the total count of the pipeline
	// object limit.
	DeletePipelineObject(ctx context.Context, in *DeletePipelineObjectRequest, opts ...grpc.CallOption) (*DeletePipelineObjectResponse, error)
	// ListRunObjects returns a list of all run object keys.
	ListRunObjects(ctx context.Context, in *ListRunObjectsRequest, opts ...grpc.CallOption) (*ListRunObjectsResponse, error)
	// GetRunObject returns the content of a single run object.
	GetRunObject(ctx context.Context, in *GetRunObjectRequest, opts ...grpc.CallOption) (*GetRunObjectResponse, error)
	// PutRunObject uploads the context of an object by run ID and key.
	PutRunObject(ctx context.Context, in *PutRunObjectRequest, opts ...grpc.CallOption) (*PutRunObjectResponse, error)
	// DeleteRunObject removes a specific run object by run ID and key.
	DeleteRunObject(ctx context.Context, in *DeleteRunObjectRequest, opts ...grpc.CallOption) (*DeleteRunObjectResponse, error)
	// GetPipelineSecret returns a single secret by pipeline ID and key.
	GetPipelineSecret(ctx context.Context, in *GetPipelineSecretRequest, opts ...grpc.CallOption) (*GetPipelineSecretResponse, error)
	// ListPipelineSecrets returns a single secret by pipeline ID and key.
	ListPipelineSecrets(ctx context.Context, in *ListPipelineSecretsRequest, opts ...grpc.CallOption) (*ListPipelineSecretsResponse, error)
	// PutPipelineSecret uploads a single secret by pipeline ID and key.
	PutPipelineSecret(ctx context.Context, in *PutPipelineSecretRequest, opts ...grpc.CallOption) (*PutPipelineSecretResponse, error)
	// DeletePipelineSecret removes a single secret by pipeline ID and
	// key.
	DeletePipelineSecret(ctx context.Context, in *DeletePipelineSecretRequest, opts ...grpc.CallOption) (*DeletePipelineSecretResponse, error)
	// GetGlobalSecret returns a single secret by  key.
	GetGlobalSecret(ctx context.Context, in *GetGlobalSecretRequest, opts ...grpc.CallOption) (*GetGlobalSecretResponse, error)
	// ListGlobalSecrets returns a single secret by global ID and key.
	ListGlobalSecrets(ctx context.Context, in *ListGlobalSecretsRequest, opts ...grpc.CallOption) (*ListGlobalSecretsResponse, error)
	// PutGlobalSecret uploads a single secret by key.
	PutGlobalSecret(ctx context.Context, in *PutGlobalSecretRequest, opts ...grpc.CallOption) (*PutGlobalSecretResponse, error)
	// DeleteGlobalSecret removes a single secret by key.
	DeleteGlobalSecret(ctx context.Context, in *DeleteGlobalSecretRequest, opts ...grpc.CallOption) (*DeleteGlobalSecretResponse, error)
	// GetEvent returns the details of a single event.
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	// ListEvents returns a streaming list of all events, ordered by
	// oldest to newest.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (Gofer_ListEventsClient, error)
}

type goferClient struct {
	cc grpc.ClientConnInterface
}

func NewGoferClient(cc grpc.ClientConnInterface) GoferClient {
	return &goferClient{cc}
}

func (c *goferClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, Gofer_GetSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetSystemSummary(ctx context.Context, in *GetSystemSummaryRequest, opts ...grpc.CallOption) (*GetSystemSummaryResponse, error) {
	out := new(GetSystemSummaryResponse)
	err := c.cc.Invoke(ctx, Gofer_GetSystemSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) RepairOrphan(ctx context.Context, in *RepairOrphanRequest, opts ...grpc.CallOption) (*RepairOrphanResponse, error) {
	out := new(RepairOrphanResponse)
	err := c.cc.Invoke(ctx, Gofer_RepairOrphan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ToggleEventIngress(ctx context.Context, in *ToggleEventIngressRequest, opts ...grpc.CallOption) (*ToggleEventIngressResponse, error) {
	out := new(ToggleEventIngressResponse)
	err := c.cc.Invoke(ctx, Gofer_ToggleEventIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) BootstrapToken(ctx context.Context, in *BootstrapTokenRequest, opts ...grpc.CallOption) (*BootstrapTokenResponse, error) {
	out := new(BootstrapTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_BootstrapToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	err := c.cc.Invoke(ctx, Gofer_ListTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnableToken(ctx context.Context, in *EnableTokenRequest, opts ...grpc.CallOption) (*EnableTokenResponse, error) {
	out := new(EnableTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_EnableToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisableToken(ctx context.Context, in *DisableTokenRequest, opts ...grpc.CallOption) (*DisableTokenResponse, error) {
	out := new(DisableTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_DisableToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	err := c.cc.Invoke(ctx, Gofer_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, Gofer_ListNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, Gofer_CreateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, Gofer_GetNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, Gofer_UpdateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, Gofer_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, Gofer_GetPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, Gofer_ListPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnablePipeline(ctx context.Context, in *EnablePipelineRequest, opts ...grpc.CallOption) (*EnablePipelineResponse, error) {
	out := new(EnablePipelineResponse)
	err := c.cc.Invoke(ctx, Gofer_EnablePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisablePipeline(ctx context.Context, in *DisablePipelineRequest, opts ...grpc.CallOption) (*DisablePipelineResponse, error) {
	out := new(DisablePipelineResponse)
	err := c.cc.Invoke(ctx, Gofer_DisablePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeployPipeline(ctx context.Context, in *DeployPipelineRequest, opts ...grpc.CallOption) (*DeployPipelineResponse, error) {
	out := new(DeployPipelineResponse)
	err := c.cc.Invoke(ctx, Gofer_DeployPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error) {
	out := new(DeletePipelineResponse)
	err := c.cc.Invoke(ctx, Gofer_DeletePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) RegisterPipelineConfig(ctx context.Context, in *RegisterPipelineConfigRequest, opts ...grpc.CallOption) (*RegisterPipelineConfigResponse, error) {
	out := new(RegisterPipelineConfigResponse)
	err := c.cc.Invoke(ctx, Gofer_RegisterPipelineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelineConfigs(ctx context.Context, in *ListPipelineConfigsRequest, opts ...grpc.CallOption) (*ListPipelineConfigsResponse, error) {
	out := new(ListPipelineConfigsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListPipelineConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipelineConfig(ctx context.Context, in *GetPipelineConfigRequest, opts ...grpc.CallOption) (*GetPipelineConfigResponse, error) {
	out := new(GetPipelineConfigResponse)
	err := c.cc.Invoke(ctx, Gofer_GetPipelineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipelineConfig(ctx context.Context, in *DeletePipelineConfigRequest, opts ...grpc.CallOption) (*DeletePipelineConfigResponse, error) {
	out := new(DeletePipelineConfigResponse)
	err := c.cc.Invoke(ctx, Gofer_DeletePipelineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CreatePipelineExtensionSubscription(ctx context.Context, in *CreatePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*CreatePipelineExtensionSubscriptionResponse, error) {
	out := new(CreatePipelineExtensionSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gofer_CreatePipelineExtensionSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelineExtensionSubscriptions(ctx context.Context, in *ListPipelineExtensionSubscriptionsRequest, opts ...grpc.CallOption) (*ListPipelineExtensionSubscriptionsResponse, error) {
	out := new(ListPipelineExtensionSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListPipelineExtensionSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipelineExtensionSubscription(ctx context.Context, in *GetPipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*GetPipelineExtensionSubscriptionResponse, error) {
	out := new(GetPipelineExtensionSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gofer_GetPipelineExtensionSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnablePipelineExtensionSubscription(ctx context.Context, in *EnablePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*EnablePipelineExtensionSubscriptionResponse, error) {
	out := new(EnablePipelineExtensionSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gofer_EnablePipelineExtensionSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisablePipelineExtensionSubscription(ctx context.Context, in *DisablePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*DisablePipelineExtensionSubscriptionResponse, error) {
	out := new(DisablePipelineExtensionSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gofer_DisablePipelineExtensionSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipelineExtensionSubscription(ctx context.Context, in *DeletePipelineExtensionSubscriptionRequest, opts ...grpc.CallOption) (*DeletePipelineExtensionSubscriptionResponse, error) {
	out := new(DeletePipelineExtensionSubscriptionResponse)
	err := c.cc.Invoke(ctx, Gofer_DeletePipelineExtensionSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, Gofer_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error) {
	out := new(GetRunResponse)
	err := c.cc.Invoke(ctx, Gofer_GetRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) StartRun(ctx context.Context, in *StartRunRequest, opts ...grpc.CallOption) (*StartRunResponse, error) {
	out := new(StartRunResponse)
	err := c.cc.Invoke(ctx, Gofer_StartRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) RetryRun(ctx context.Context, in *RetryRunRequest, opts ...grpc.CallOption) (*RetryRunResponse, error) {
	out := new(RetryRunResponse)
	err := c.cc.Invoke(ctx, Gofer_RetryRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelRun(ctx context.Context, in *CancelRunRequest, opts ...grpc.CallOption) (*CancelRunResponse, error) {
	out := new(CancelRunResponse)
	err := c.cc.Invoke(ctx, Gofer_CancelRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelAllRuns(ctx context.Context, in *CancelAllRunsRequest, opts ...grpc.CallOption) (*CancelAllRunsResponse, error) {
	out := new(CancelAllRunsResponse)
	err := c.cc.Invoke(ctx, Gofer_CancelAllRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetTaskRun(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*GetTaskRunResponse, error) {
	out := new(GetTaskRunResponse)
	err := c.cc.Invoke(ctx, Gofer_GetTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListTaskRuns(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error) {
	out := new(ListTaskRunsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListTaskRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelTaskRun(ctx context.Context, in *CancelTaskRunRequest, opts ...grpc.CallOption) (*CancelTaskRunResponse, error) {
	out := new(CancelTaskRunResponse)
	err := c.cc.Invoke(ctx, Gofer_CancelTaskRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) AttachToTaskRun(ctx context.Context, opts ...grpc.CallOption) (Gofer_AttachToTaskRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[0], Gofer_AttachToTaskRun_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goferAttachToTaskRunClient{stream}
	return x, nil
}

type Gofer_AttachToTaskRunClient interface {
	Send(*AttachToTaskRunRequest) error
	Recv() (*AttachToTaskRunOutput, error)
	grpc.ClientStream
}

type goferAttachToTaskRunClient struct {
	grpc.ClientStream
}

func (x *goferAttachToTaskRunClient) Send(m *AttachToTaskRunRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goferAttachToTaskRunClient) Recv() (*AttachToTaskRunOutput, error) {
	m := new(AttachToTaskRunOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goferClient) GetTaskRunLogs(ctx context.Context, in *GetTaskRunLogsRequest, opts ...grpc.CallOption) (Gofer_GetTaskRunLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[1], Gofer_GetTaskRunLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goferGetTaskRunLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gofer_GetTaskRunLogsClient interface {
	Recv() (*GetTaskRunLogsResponse, error)
	grpc.ClientStream
}

type goferGetTaskRunLogsClient struct {
	grpc.ClientStream
}

func (x *goferGetTaskRunLogsClient) Recv() (*GetTaskRunLogsResponse, error) {
	m := new(GetTaskRunLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goferClient) DeleteTaskRunLogs(ctx context.Context, in *DeleteTaskRunLogsRequest, opts ...grpc.CallOption) (*DeleteTaskRunLogsResponse, error) {
	out := new(DeleteTaskRunLogsResponse)
	err := c.cc.Invoke(ctx, Gofer_DeleteTaskRunLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*GetExtensionResponse, error) {
	out := new(GetExtensionResponse)
	err := c.cc.Invoke(ctx, Gofer_GetExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListExtensions(ctx context.Context, in *ListExtensionsRequest, opts ...grpc.CallOption) (*ListExtensionsResponse, error) {
	out := new(ListExtensionsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) RunExtensionInstaller(ctx context.Context, opts ...grpc.CallOption) (Gofer_RunExtensionInstallerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[2], Gofer_RunExtensionInstaller_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goferRunExtensionInstallerClient{stream}
	return x, nil
}

type Gofer_RunExtensionInstallerClient interface {
	Send(*RunExtensionInstallerClientMessage) error
	Recv() (*RunExtensionInstallerExtensionMessage, error)
	grpc.ClientStream
}

type goferRunExtensionInstallerClient struct {
	grpc.ClientStream
}

func (x *goferRunExtensionInstallerClient) Send(m *RunExtensionInstallerClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goferRunExtensionInstallerClient) Recv() (*RunExtensionInstallerExtensionMessage, error) {
	m := new(RunExtensionInstallerExtensionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goferClient) RunPipelineConfigurator(ctx context.Context, opts ...grpc.CallOption) (Gofer_RunPipelineConfiguratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[3], Gofer_RunPipelineConfigurator_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goferRunPipelineConfiguratorClient{stream}
	return x, nil
}

type Gofer_RunPipelineConfiguratorClient interface {
	Send(*RunPipelineConfiguratorClientMessage) error
	Recv() (*RunPipelineConfiguratorExtensionMessage, error)
	grpc.ClientStream
}

type goferRunPipelineConfiguratorClient struct {
	grpc.ClientStream
}

func (x *goferRunPipelineConfiguratorClient) Send(m *RunPipelineConfiguratorClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goferRunPipelineConfiguratorClient) Recv() (*RunPipelineConfiguratorExtensionMessage, error) {
	m := new(RunPipelineConfiguratorExtensionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goferClient) InstallExtension(ctx context.Context, in *InstallExtensionRequest, opts ...grpc.CallOption) (*InstallExtensionResponse, error) {
	out := new(InstallExtensionResponse)
	err := c.cc.Invoke(ctx, Gofer_InstallExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UninstallExtension(ctx context.Context, in *UninstallExtensionRequest, opts ...grpc.CallOption) (*UninstallExtensionResponse, error) {
	out := new(UninstallExtensionResponse)
	err := c.cc.Invoke(ctx, Gofer_UninstallExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnableExtension(ctx context.Context, in *EnableExtensionRequest, opts ...grpc.CallOption) (*EnableExtensionResponse, error) {
	out := new(EnableExtensionResponse)
	err := c.cc.Invoke(ctx, Gofer_EnableExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisableExtension(ctx context.Context, in *DisableExtensionRequest, opts ...grpc.CallOption) (*DisableExtensionResponse, error) {
	out := new(DisableExtensionResponse)
	err := c.cc.Invoke(ctx, Gofer_DisableExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelineObjects(ctx context.Context, in *ListPipelineObjectsRequest, opts ...grpc.CallOption) (*ListPipelineObjectsResponse, error) {
	out := new(ListPipelineObjectsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListPipelineObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipelineObject(ctx context.Context, in *GetPipelineObjectRequest, opts ...grpc.CallOption) (*GetPipelineObjectResponse, error) {
	out := new(GetPipelineObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_GetPipelineObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) PutPipelineObject(ctx context.Context, in *PutPipelineObjectRequest, opts ...grpc.CallOption) (*PutPipelineObjectResponse, error) {
	out := new(PutPipelineObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_PutPipelineObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipelineObject(ctx context.Context, in *DeletePipelineObjectRequest, opts ...grpc.CallOption) (*DeletePipelineObjectResponse, error) {
	out := new(DeletePipelineObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_DeletePipelineObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListRunObjects(ctx context.Context, in *ListRunObjectsRequest, opts ...grpc.CallOption) (*ListRunObjectsResponse, error) {
	out := new(ListRunObjectsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListRunObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetRunObject(ctx context.Context, in *GetRunObjectRequest, opts ...grpc.CallOption) (*GetRunObjectResponse, error) {
	out := new(GetRunObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_GetRunObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) PutRunObject(ctx context.Context, in *PutRunObjectRequest, opts ...grpc.CallOption) (*PutRunObjectResponse, error) {
	out := new(PutRunObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_PutRunObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeleteRunObject(ctx context.Context, in *DeleteRunObjectRequest, opts ...grpc.CallOption) (*DeleteRunObjectResponse, error) {
	out := new(DeleteRunObjectResponse)
	err := c.cc.Invoke(ctx, Gofer_DeleteRunObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipelineSecret(ctx context.Context, in *GetPipelineSecretRequest, opts ...grpc.CallOption) (*GetPipelineSecretResponse, error) {
	out := new(GetPipelineSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_GetPipelineSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelineSecrets(ctx context.Context, in *ListPipelineSecretsRequest, opts ...grpc.CallOption) (*ListPipelineSecretsResponse, error) {
	out := new(ListPipelineSecretsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListPipelineSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) PutPipelineSecret(ctx context.Context, in *PutPipelineSecretRequest, opts ...grpc.CallOption) (*PutPipelineSecretResponse, error) {
	out := new(PutPipelineSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_PutPipelineSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipelineSecret(ctx context.Context, in *DeletePipelineSecretRequest, opts ...grpc.CallOption) (*DeletePipelineSecretResponse, error) {
	out := new(DeletePipelineSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_DeletePipelineSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetGlobalSecret(ctx context.Context, in *GetGlobalSecretRequest, opts ...grpc.CallOption) (*GetGlobalSecretResponse, error) {
	out := new(GetGlobalSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_GetGlobalSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListGlobalSecrets(ctx context.Context, in *ListGlobalSecretsRequest, opts ...grpc.CallOption) (*ListGlobalSecretsResponse, error) {
	out := new(ListGlobalSecretsResponse)
	err := c.cc.Invoke(ctx, Gofer_ListGlobalSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) PutGlobalSecret(ctx context.Context, in *PutGlobalSecretRequest, opts ...grpc.CallOption) (*PutGlobalSecretResponse, error) {
	out := new(PutGlobalSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_PutGlobalSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeleteGlobalSecret(ctx context.Context, in *DeleteGlobalSecretRequest, opts ...grpc.CallOption) (*DeleteGlobalSecretResponse, error) {
	out := new(DeleteGlobalSecretResponse)
	err := c.cc.Invoke(ctx, Gofer_DeleteGlobalSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, Gofer_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (Gofer_ListEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[4], Gofer_ListEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goferListEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gofer_ListEventsClient interface {
	Recv() (*ListEventsResponse, error)
	grpc.ClientStream
}

type goferListEventsClient struct {
	grpc.ClientStream
}

func (x *goferListEventsClient) Recv() (*ListEventsResponse, error) {
	m := new(ListEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoferServer is the server API for Gofer service.
// All implementations must embed UnimplementedGoferServer
// for forward compatibility
type GoferServer interface {
	// //////////// System RPCs //////////////
	//
	// Service RPCs exist to help with management of the Gofer service. They
	// usually perform admin type interactions with the service as a whole and
	// provide ways for admins to quickly repair Gofer broken states without
	// having to stop the entire service.
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// A general endpoint to retrieve various metrics about the Gofer service.
	GetSystemSummary(context.Context, *GetSystemSummaryRequest) (*GetSystemSummaryResponse, error)
	// RepairOrphan is used when a single run has gotten into a state that does
	// not reflect what actually happened to the run. This can happen if the Gofer
	// service crashes for unforeseen reasons. Usually this route is not needed as
	// Gofer will make an attempt to resolve all orphaned runs upon startup. But
	// in the rare case that a run gets into a bad state during the service's
	// normal execution this route can be used to attempt to repair the orphaned
	// run or at the very least mark it as failed so it isn't stuck in a
	// unfinished state.
	RepairOrphan(context.Context, *RepairOrphanRequest) (*RepairOrphanResponse, error)
	// ToggleEventIngress allows the admin to start or stop the execution of all
	// pipelines within Gofer. This can be useful under some security implications
	// or for the purposes of defining general downtime and service maintenance.
	ToggleEventIngress(context.Context, *ToggleEventIngressRequest) (*ToggleEventIngressResponse, error)
	// CreateToken manifests a new API token; This token can be a management
	// token(the equivalent of root in Linux) or a client token. Management tokens
	// are the only tokens that can generate tokens.
	// Client tokens are used to manage which namespaces users have access to.
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	// BootstrapToken creates the initial management token used to create all
	// other tokens.
	BootstrapToken(context.Context, *BootstrapTokenRequest) (*BootstrapTokenResponse, error)
	// ListTokens returns information about all tokens for a particular namespace;
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)
	// GetToken returns information about a particular token;
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// EnableToken makes a token usable.
	EnableToken(context.Context, *EnableTokenRequest) (*EnableTokenResponse, error)
	// DisableToken makes a token unusable.
	DisableToken(context.Context, *DisableTokenRequest) (*DisableTokenResponse, error)
	// DeleteToken removes a token.
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	// ListNamespaces returns all registered namespaces.
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// CreateNamespace creates a new namespace that separates pipelines.
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// GetNamespace returns a single namespace by id.
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// UpdateNamespace updates the details of a particular namespace by id.
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	// DeleteNamespace removes a namespace by id.
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// GetPipeline returns a single pipeline by ID.
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// ListPipelines returns all registered pipelines. Can control pagination by
	// offset && limit request parameters.
	// By default ListPipelines will return the first 100 pipelines ordered by
	// creation.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// EnablePipeline allows a pipeline to execute runs by allowing it to receive
	// extension events. See DisablePipeline to prevent a pipeline from executing
	// any more runs.
	EnablePipeline(context.Context, *EnablePipelineRequest) (*EnablePipelineResponse, error)
	// DisablePipeline prevents the pipeline from executing runs. Any extension
	// events that would normally cause the pipeline to be run are instead
	// discarded.
	DisablePipeline(context.Context, *DisablePipelineRequest) (*DisablePipelineResponse, error)
	// DeployPipeline attempts to deploy a version of a pipeline.
	DeployPipeline(context.Context, *DeployPipelineRequest) (*DeployPipelineResponse, error)
	// DeletePipeline deletes a pipeline permenantly. It is not recoverable.
	DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error)
	// RegisterPipelineConfig registers a new version of a pipeline's
	// configuration. If the pipeline does not exist it will be created.
	RegisterPipelineConfig(context.Context, *RegisterPipelineConfigRequest) (*RegisterPipelineConfigResponse, error)
	// ListPipelineConfigs returns all registered pipeline configs.
	ListPipelineConfigs(context.Context, *ListPipelineConfigsRequest) (*ListPipelineConfigsResponse, error)
	// GetPipelineConfig returns a single pipelineconfig by id.
	GetPipelineConfig(context.Context, *GetPipelineConfigRequest) (*GetPipelineConfigResponse, error)
	// DeletePipelineConfig removes a pipelineconfig by id.
	DeletePipelineConfig(context.Context, *DeletePipelineConfigRequest) (*DeletePipelineConfigResponse, error)
	// //////////// Pipeline Extension Subscription RPCs //////////////
	//
	// Pipelines can subscribe to extensions in order to extend their
	// functionality.
	//
	// Subscribe a pipeline to a extension.
	CreatePipelineExtensionSubscription(context.Context, *CreatePipelineExtensionSubscriptionRequest) (*CreatePipelineExtensionSubscriptionResponse, error)
	// ListPipelineExtensionSubscriptions returns all extension subscriptions for
	// a particular pipeline.
	ListPipelineExtensionSubscriptions(context.Context, *ListPipelineExtensionSubscriptionsRequest) (*ListPipelineExtensionSubscriptionsResponse, error)
	// GetPipelineExtensionSubscription returns a single pipeline extension
	// subscription.
	GetPipelineExtensionSubscription(context.Context, *GetPipelineExtensionSubscriptionRequest) (*GetPipelineExtensionSubscriptionResponse, error)
	// EnablePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	EnablePipelineExtensionSubscription(context.Context, *EnablePipelineExtensionSubscriptionRequest) (*EnablePipelineExtensionSubscriptionResponse, error)
	// DisablePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	DisablePipelineExtensionSubscription(context.Context, *DisablePipelineExtensionSubscriptionRequest) (*DisablePipelineExtensionSubscriptionResponse, error)
	// DeletePipelineExtensionSubscription removes a pipeline extension
	// subscription.
	DeletePipelineExtensionSubscription(context.Context, *DeletePipelineExtensionSubscriptionRequest) (*DeletePipelineExtensionSubscriptionResponse, error)
	// ListDeployments
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// GetDeployment
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	// GetRun returns the details of a single run.
	GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error)
	// ListRuns returns a list of all runs by Pipeline ID. Pagination can be
	// controlled via the offset and limit parameters of the request.
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	// StartRun executes a single run of a particular pipeline.
	StartRun(context.Context, *StartRunRequest) (*StartRunResponse, error)
	// RetryRun simply takes the vars and settings from a previous run and re-uses
	// those to launch a new run. Useful for if you want the exact settings from a
	// previous run.
	RetryRun(context.Context, *RetryRunRequest) (*RetryRunResponse, error)
	// CancelRun stops the execution of a run in progress. Any task runs that
	// might have been running at the time Are ask to stop gracefully(SIGINT)
	// unless the force parameter is used, in which case the task runs are stopped
	// instantly(SIGKILL) and the run is cancelled.
	CancelRun(context.Context, *CancelRunRequest) (*CancelRunResponse, error)
	// CancelAllRuns stops the execution of any in-progress runs for a specific
	// pipeline by ID.
	CancelAllRuns(context.Context, *CancelAllRunsRequest) (*CancelAllRunsResponse, error)
	// GetTaskRun returns the details of a single task run.
	GetTaskRun(context.Context, *GetTaskRunRequest) (*GetTaskRunResponse, error)
	// ListTaskRuns returns all task runs for a current run by ID.
	ListTaskRuns(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error)
	// CancelTaskRun cancels a specific task run, sending the related container a
	// SIGINT signal. If the force flag is used we instead send the container a
	// SIGKILL signal.
	//
	// Task runs that are cancelled can cause other downstream task runs to be
	// skipped depending on those downstream task run dependencies.
	CancelTaskRun(context.Context, *CancelTaskRunRequest) (*CancelTaskRunResponse, error)
	// Attach to a running task run container. Useful for debugging.
	AttachToTaskRun(Gofer_AttachToTaskRunServer) error
	// GetTaskRunLogs returns logs for a specific task run line by line in a
	// stream. The logs are returns with both STDOUT and STDERR of the associated
	// container combined.
	GetTaskRunLogs(*GetTaskRunLogsRequest, Gofer_GetTaskRunLogsServer) error
	// DeleteTaskRunLogs removes a task run's associated log object. This is
	// useful for if logs mistakenly contain sensitive data.
	DeleteTaskRunLogs(context.Context, *DeleteTaskRunLogsRequest) (*DeleteTaskRunLogsResponse, error)
	// GetExtension returns details about a specific extension.
	GetExtension(context.Context, *GetExtensionRequest) (*GetExtensionResponse, error)
	// ListExtensions lists all extensions currently registered within gofer.
	ListExtensions(context.Context, *ListExtensionsRequest) (*ListExtensionsResponse, error)
	// Run the installer that helps admin user install the extension.
	RunExtensionInstaller(Gofer_RunExtensionInstallerServer) error
	// Run the installer that helps pipeline users with their pipeline extension
	// configuration.
	RunPipelineConfigurator(Gofer_RunPipelineConfiguratorServer) error
	// InstallExtension attempts to install a new extension.
	InstallExtension(context.Context, *InstallExtensionRequest) (*InstallExtensionResponse, error)
	// UninstallExtension attempts to uninstall a extension.
	UninstallExtension(context.Context, *UninstallExtensionRequest) (*UninstallExtensionResponse, error)
	// EnableExtension attempts to enable a new extension.
	EnableExtension(context.Context, *EnableExtensionRequest) (*EnableExtensionResponse, error)
	// DisableExtension attempts to disable a new extension.
	DisableExtension(context.Context, *DisableExtensionRequest) (*DisableExtensionResponse, error)
	// ListPipelineObjects returns a list of all pipeline object keys.
	ListPipelineObjects(context.Context, *ListPipelineObjectsRequest) (*ListPipelineObjectsResponse, error)
	// GetPipelineObject returns a single pipeline object by pipeline ID and key.
	GetPipelineObject(context.Context, *GetPipelineObjectRequest) (*GetPipelineObjectResponse, error)
	// PutPipelineObject uploads a single pipeline object by pipeline ID and key.
	// Objects which are put under the same key do not count towards the pipeline
	// object limit.
	PutPipelineObject(context.Context, *PutPipelineObjectRequest) (*PutPipelineObjectResponse, error)
	// DeletePipelineObject removes a single pipeline object by pipeline ID and
	// key. Removing a pipeline object decrements the total count of the pipeline
	// object limit.
	DeletePipelineObject(context.Context, *DeletePipelineObjectRequest) (*DeletePipelineObjectResponse, error)
	// ListRunObjects returns a list of all run object keys.
	ListRunObjects(context.Context, *ListRunObjectsRequest) (*ListRunObjectsResponse, error)
	// GetRunObject returns the content of a single run object.
	GetRunObject(context.Context, *GetRunObjectRequest) (*GetRunObjectResponse, error)
	// PutRunObject uploads the context of an object by run ID and key.
	PutRunObject(context.Context, *PutRunObjectRequest) (*PutRunObjectResponse, error)
	// DeleteRunObject removes a specific run object by run ID and key.
	DeleteRunObject(context.Context, *DeleteRunObjectRequest) (*DeleteRunObjectResponse, error)
	// GetPipelineSecret returns a single secret by pipeline ID and key.
	GetPipelineSecret(context.Context, *GetPipelineSecretRequest) (*GetPipelineSecretResponse, error)
	// ListPipelineSecrets returns a single secret by pipeline ID and key.
	ListPipelineSecrets(context.Context, *ListPipelineSecretsRequest) (*ListPipelineSecretsResponse, error)
	// PutPipelineSecret uploads a single secret by pipeline ID and key.
	PutPipelineSecret(context.Context, *PutPipelineSecretRequest) (*PutPipelineSecretResponse, error)
	// DeletePipelineSecret removes a single secret by pipeline ID and
	// key.
	DeletePipelineSecret(context.Context, *DeletePipelineSecretRequest) (*DeletePipelineSecretResponse, error)
	// GetGlobalSecret returns a single secret by  key.
	GetGlobalSecret(context.Context, *GetGlobalSecretRequest) (*GetGlobalSecretResponse, error)
	// ListGlobalSecrets returns a single secret by global ID and key.
	ListGlobalSecrets(context.Context, *ListGlobalSecretsRequest) (*ListGlobalSecretsResponse, error)
	// PutGlobalSecret uploads a single secret by key.
	PutGlobalSecret(context.Context, *PutGlobalSecretRequest) (*PutGlobalSecretResponse, error)
	// DeleteGlobalSecret removes a single secret by key.
	DeleteGlobalSecret(context.Context, *DeleteGlobalSecretRequest) (*DeleteGlobalSecretResponse, error)
	// GetEvent returns the details of a single event.
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	// ListEvents returns a streaming list of all events, ordered by
	// oldest to newest.
	ListEvents(*ListEventsRequest, Gofer_ListEventsServer) error
	mustEmbedUnimplementedGoferServer()
}

// UnimplementedGoferServer must be embedded to have forward compatible implementations.
type UnimplementedGoferServer struct {
}

func (UnimplementedGoferServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedGoferServer) GetSystemSummary(context.Context, *GetSystemSummaryRequest) (*GetSystemSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSummary not implemented")
}
func (UnimplementedGoferServer) RepairOrphan(context.Context, *RepairOrphanRequest) (*RepairOrphanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairOrphan not implemented")
}
func (UnimplementedGoferServer) ToggleEventIngress(context.Context, *ToggleEventIngressRequest) (*ToggleEventIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEventIngress not implemented")
}
func (UnimplementedGoferServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedGoferServer) BootstrapToken(context.Context, *BootstrapTokenRequest) (*BootstrapTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapToken not implemented")
}
func (UnimplementedGoferServer) ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (UnimplementedGoferServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedGoferServer) EnableToken(context.Context, *EnableTokenRequest) (*EnableTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableToken not implemented")
}
func (UnimplementedGoferServer) DisableToken(context.Context, *DisableTokenRequest) (*DisableTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableToken not implemented")
}
func (UnimplementedGoferServer) DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedGoferServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedGoferServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedGoferServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedGoferServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedGoferServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedGoferServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedGoferServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedGoferServer) EnablePipeline(context.Context, *EnablePipelineRequest) (*EnablePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePipeline not implemented")
}
func (UnimplementedGoferServer) DisablePipeline(context.Context, *DisablePipelineRequest) (*DisablePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePipeline not implemented")
}
func (UnimplementedGoferServer) DeployPipeline(context.Context, *DeployPipelineRequest) (*DeployPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployPipeline not implemented")
}
func (UnimplementedGoferServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedGoferServer) RegisterPipelineConfig(context.Context, *RegisterPipelineConfigRequest) (*RegisterPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPipelineConfig not implemented")
}
func (UnimplementedGoferServer) ListPipelineConfigs(context.Context, *ListPipelineConfigsRequest) (*ListPipelineConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineConfigs not implemented")
}
func (UnimplementedGoferServer) GetPipelineConfig(context.Context, *GetPipelineConfigRequest) (*GetPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineConfig not implemented")
}
func (UnimplementedGoferServer) DeletePipelineConfig(context.Context, *DeletePipelineConfigRequest) (*DeletePipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineConfig not implemented")
}
func (UnimplementedGoferServer) CreatePipelineExtensionSubscription(context.Context, *CreatePipelineExtensionSubscriptionRequest) (*CreatePipelineExtensionSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipelineExtensionSubscription not implemented")
}
func (UnimplementedGoferServer) ListPipelineExtensionSubscriptions(context.Context, *ListPipelineExtensionSubscriptionsRequest) (*ListPipelineExtensionSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineExtensionSubscriptions not implemented")
}
func (UnimplementedGoferServer) GetPipelineExtensionSubscription(context.Context, *GetPipelineExtensionSubscriptionRequest) (*GetPipelineExtensionSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineExtensionSubscription not implemented")
}
func (UnimplementedGoferServer) EnablePipelineExtensionSubscription(context.Context, *EnablePipelineExtensionSubscriptionRequest) (*EnablePipelineExtensionSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePipelineExtensionSubscription not implemented")
}
func (UnimplementedGoferServer) DisablePipelineExtensionSubscription(context.Context, *DisablePipelineExtensionSubscriptionRequest) (*DisablePipelineExtensionSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePipelineExtensionSubscription not implemented")
}
func (UnimplementedGoferServer) DeletePipelineExtensionSubscription(context.Context, *DeletePipelineExtensionSubscriptionRequest) (*DeletePipelineExtensionSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineExtensionSubscription not implemented")
}
func (UnimplementedGoferServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedGoferServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedGoferServer) GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedGoferServer) ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (UnimplementedGoferServer) StartRun(context.Context, *StartRunRequest) (*StartRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRun not implemented")
}
func (UnimplementedGoferServer) RetryRun(context.Context, *RetryRunRequest) (*RetryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryRun not implemented")
}
func (UnimplementedGoferServer) CancelRun(context.Context, *CancelRunRequest) (*CancelRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRun not implemented")
}
func (UnimplementedGoferServer) CancelAllRuns(context.Context, *CancelAllRunsRequest) (*CancelAllRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllRuns not implemented")
}
func (UnimplementedGoferServer) GetTaskRun(context.Context, *GetTaskRunRequest) (*GetTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRun not implemented")
}
func (UnimplementedGoferServer) ListTaskRuns(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskRuns not implemented")
}
func (UnimplementedGoferServer) CancelTaskRun(context.Context, *CancelTaskRunRequest) (*CancelTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTaskRun not implemented")
}
func (UnimplementedGoferServer) AttachToTaskRun(Gofer_AttachToTaskRunServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachToTaskRun not implemented")
}
func (UnimplementedGoferServer) GetTaskRunLogs(*GetTaskRunLogsRequest, Gofer_GetTaskRunLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskRunLogs not implemented")
}
func (UnimplementedGoferServer) DeleteTaskRunLogs(context.Context, *DeleteTaskRunLogsRequest) (*DeleteTaskRunLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskRunLogs not implemented")
}
func (UnimplementedGoferServer) GetExtension(context.Context, *GetExtensionRequest) (*GetExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (UnimplementedGoferServer) ListExtensions(context.Context, *ListExtensionsRequest) (*ListExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensions not implemented")
}
func (UnimplementedGoferServer) RunExtensionInstaller(Gofer_RunExtensionInstallerServer) error {
	return status.Errorf(codes.Unimplemented, "method RunExtensionInstaller not implemented")
}
func (UnimplementedGoferServer) RunPipelineConfigurator(Gofer_RunPipelineConfiguratorServer) error {
	return status.Errorf(codes.Unimplemented, "method RunPipelineConfigurator not implemented")
}
func (UnimplementedGoferServer) InstallExtension(context.Context, *InstallExtensionRequest) (*InstallExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallExtension not implemented")
}
func (UnimplementedGoferServer) UninstallExtension(context.Context, *UninstallExtensionRequest) (*UninstallExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallExtension not implemented")
}
func (UnimplementedGoferServer) EnableExtension(context.Context, *EnableExtensionRequest) (*EnableExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableExtension not implemented")
}
func (UnimplementedGoferServer) DisableExtension(context.Context, *DisableExtensionRequest) (*DisableExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableExtension not implemented")
}
func (UnimplementedGoferServer) ListPipelineObjects(context.Context, *ListPipelineObjectsRequest) (*ListPipelineObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineObjects not implemented")
}
func (UnimplementedGoferServer) GetPipelineObject(context.Context, *GetPipelineObjectRequest) (*GetPipelineObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineObject not implemented")
}
func (UnimplementedGoferServer) PutPipelineObject(context.Context, *PutPipelineObjectRequest) (*PutPipelineObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPipelineObject not implemented")
}
func (UnimplementedGoferServer) DeletePipelineObject(context.Context, *DeletePipelineObjectRequest) (*DeletePipelineObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineObject not implemented")
}
func (UnimplementedGoferServer) ListRunObjects(context.Context, *ListRunObjectsRequest) (*ListRunObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunObjects not implemented")
}
func (UnimplementedGoferServer) GetRunObject(context.Context, *GetRunObjectRequest) (*GetRunObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunObject not implemented")
}
func (UnimplementedGoferServer) PutRunObject(context.Context, *PutRunObjectRequest) (*PutRunObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRunObject not implemented")
}
func (UnimplementedGoferServer) DeleteRunObject(context.Context, *DeleteRunObjectRequest) (*DeleteRunObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunObject not implemented")
}
func (UnimplementedGoferServer) GetPipelineSecret(context.Context, *GetPipelineSecretRequest) (*GetPipelineSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineSecret not implemented")
}
func (UnimplementedGoferServer) ListPipelineSecrets(context.Context, *ListPipelineSecretsRequest) (*ListPipelineSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineSecrets not implemented")
}
func (UnimplementedGoferServer) PutPipelineSecret(context.Context, *PutPipelineSecretRequest) (*PutPipelineSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPipelineSecret not implemented")
}
func (UnimplementedGoferServer) DeletePipelineSecret(context.Context, *DeletePipelineSecretRequest) (*DeletePipelineSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineSecret not implemented")
}
func (UnimplementedGoferServer) GetGlobalSecret(context.Context, *GetGlobalSecretRequest) (*GetGlobalSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalSecret not implemented")
}
func (UnimplementedGoferServer) ListGlobalSecrets(context.Context, *ListGlobalSecretsRequest) (*ListGlobalSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalSecrets not implemented")
}
func (UnimplementedGoferServer) PutGlobalSecret(context.Context, *PutGlobalSecretRequest) (*PutGlobalSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGlobalSecret not implemented")
}
func (UnimplementedGoferServer) DeleteGlobalSecret(context.Context, *DeleteGlobalSecretRequest) (*DeleteGlobalSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalSecret not implemented")
}
func (UnimplementedGoferServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedGoferServer) ListEvents(*ListEventsRequest, Gofer_ListEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedGoferServer) mustEmbedUnimplementedGoferServer() {}

// UnsafeGoferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoferServer will
// result in compilation errors.
type UnsafeGoferServer interface {
	mustEmbedUnimplementedGoferServer()
}

func RegisterGoferServer(s grpc.ServiceRegistrar, srv GoferServer) {
	s.RegisterService(&Gofer_ServiceDesc, srv)
}

func _Gofer_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetSystemSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetSystemSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetSystemSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetSystemSummary(ctx, req.(*GetSystemSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_RepairOrphan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairOrphanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).RepairOrphan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_RepairOrphan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).RepairOrphan(ctx, req.(*RepairOrphanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ToggleEventIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEventIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ToggleEventIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ToggleEventIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ToggleEventIngress(ctx, req.(*ToggleEventIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_BootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).BootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_BootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).BootstrapToken(ctx, req.(*BootstrapTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnableToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnableToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_EnableToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnableToken(ctx, req.(*EnableTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisableToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisableToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DisableToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisableToken(ctx, req.(*DisableTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnablePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnablePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_EnablePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnablePipeline(ctx, req.(*EnablePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisablePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisablePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DisablePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisablePipeline(ctx, req.(*DisablePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeployPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeployPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeployPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeployPipeline(ctx, req.(*DeployPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeletePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_RegisterPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).RegisterPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_RegisterPipelineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).RegisterPipelineConfig(ctx, req.(*RegisterPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelineConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelineConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListPipelineConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelineConfigs(ctx, req.(*ListPipelineConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetPipelineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipelineConfig(ctx, req.(*GetPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeletePipelineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipelineConfig(ctx, req.(*DeletePipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CreatePipelineExtensionSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineExtensionSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CreatePipelineExtensionSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CreatePipelineExtensionSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CreatePipelineExtensionSubscription(ctx, req.(*CreatePipelineExtensionSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelineExtensionSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineExtensionSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelineExtensionSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListPipelineExtensionSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelineExtensionSubscriptions(ctx, req.(*ListPipelineExtensionSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipelineExtensionSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineExtensionSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipelineExtensionSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetPipelineExtensionSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipelineExtensionSubscription(ctx, req.(*GetPipelineExtensionSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnablePipelineExtensionSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePipelineExtensionSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnablePipelineExtensionSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_EnablePipelineExtensionSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnablePipelineExtensionSubscription(ctx, req.(*EnablePipelineExtensionSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisablePipelineExtensionSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePipelineExtensionSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisablePipelineExtensionSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DisablePipelineExtensionSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisablePipelineExtensionSubscription(ctx, req.(*DisablePipelineExtensionSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipelineExtensionSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineExtensionSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipelineExtensionSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeletePipelineExtensionSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipelineExtensionSubscription(ctx, req.(*DeletePipelineExtensionSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_StartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).StartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_StartRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).StartRun(ctx, req.(*StartRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_RetryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).RetryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_RetryRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).RetryRun(ctx, req.(*RetryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CancelRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelRun(ctx, req.(*CancelRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelAllRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelAllRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CancelAllRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelAllRuns(ctx, req.(*CancelAllRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetTaskRun(ctx, req.(*GetTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListTaskRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListTaskRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListTaskRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListTaskRuns(ctx, req.(*ListTaskRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_CancelTaskRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelTaskRun(ctx, req.(*CancelTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_AttachToTaskRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoferServer).AttachToTaskRun(&goferAttachToTaskRunServer{stream})
}

type Gofer_AttachToTaskRunServer interface {
	Send(*AttachToTaskRunOutput) error
	Recv() (*AttachToTaskRunRequest, error)
	grpc.ServerStream
}

type goferAttachToTaskRunServer struct {
	grpc.ServerStream
}

func (x *goferAttachToTaskRunServer) Send(m *AttachToTaskRunOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goferAttachToTaskRunServer) Recv() (*AttachToTaskRunRequest, error) {
	m := new(AttachToTaskRunRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gofer_GetTaskRunLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskRunLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoferServer).GetTaskRunLogs(m, &goferGetTaskRunLogsServer{stream})
}

type Gofer_GetTaskRunLogsServer interface {
	Send(*GetTaskRunLogsResponse) error
	grpc.ServerStream
}

type goferGetTaskRunLogsServer struct {
	grpc.ServerStream
}

func (x *goferGetTaskRunLogsServer) Send(m *GetTaskRunLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gofer_DeleteTaskRunLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRunLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteTaskRunLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeleteTaskRunLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteTaskRunLogs(ctx, req.(*DeleteTaskRunLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListExtensions(ctx, req.(*ListExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_RunExtensionInstaller_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoferServer).RunExtensionInstaller(&goferRunExtensionInstallerServer{stream})
}

type Gofer_RunExtensionInstallerServer interface {
	Send(*RunExtensionInstallerExtensionMessage) error
	Recv() (*RunExtensionInstallerClientMessage, error)
	grpc.ServerStream
}

type goferRunExtensionInstallerServer struct {
	grpc.ServerStream
}

func (x *goferRunExtensionInstallerServer) Send(m *RunExtensionInstallerExtensionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goferRunExtensionInstallerServer) Recv() (*RunExtensionInstallerClientMessage, error) {
	m := new(RunExtensionInstallerClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gofer_RunPipelineConfigurator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoferServer).RunPipelineConfigurator(&goferRunPipelineConfiguratorServer{stream})
}

type Gofer_RunPipelineConfiguratorServer interface {
	Send(*RunPipelineConfiguratorExtensionMessage) error
	Recv() (*RunPipelineConfiguratorClientMessage, error)
	grpc.ServerStream
}

type goferRunPipelineConfiguratorServer struct {
	grpc.ServerStream
}

func (x *goferRunPipelineConfiguratorServer) Send(m *RunPipelineConfiguratorExtensionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goferRunPipelineConfiguratorServer) Recv() (*RunPipelineConfiguratorClientMessage, error) {
	m := new(RunPipelineConfiguratorClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gofer_InstallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).InstallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_InstallExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).InstallExtension(ctx, req.(*InstallExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UninstallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UninstallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_UninstallExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UninstallExtension(ctx, req.(*UninstallExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnableExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnableExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_EnableExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnableExtension(ctx, req.(*EnableExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisableExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisableExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DisableExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisableExtension(ctx, req.(*DisableExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelineObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelineObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListPipelineObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelineObjects(ctx, req.(*ListPipelineObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipelineObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipelineObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetPipelineObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipelineObject(ctx, req.(*GetPipelineObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_PutPipelineObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPipelineObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).PutPipelineObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_PutPipelineObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).PutPipelineObject(ctx, req.(*PutPipelineObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipelineObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipelineObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeletePipelineObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipelineObject(ctx, req.(*DeletePipelineObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListRunObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListRunObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListRunObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListRunObjects(ctx, req.(*ListRunObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetRunObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetRunObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetRunObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetRunObject(ctx, req.(*GetRunObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_PutRunObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRunObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).PutRunObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_PutRunObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).PutRunObject(ctx, req.(*PutRunObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeleteRunObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteRunObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeleteRunObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteRunObject(ctx, req.(*DeleteRunObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipelineSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipelineSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetPipelineSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipelineSecret(ctx, req.(*GetPipelineSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelineSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelineSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListPipelineSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelineSecrets(ctx, req.(*ListPipelineSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_PutPipelineSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPipelineSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).PutPipelineSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_PutPipelineSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).PutPipelineSecret(ctx, req.(*PutPipelineSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipelineSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipelineSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeletePipelineSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipelineSecret(ctx, req.(*DeletePipelineSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetGlobalSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetGlobalSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetGlobalSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetGlobalSecret(ctx, req.(*GetGlobalSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListGlobalSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListGlobalSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_ListGlobalSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListGlobalSecrets(ctx, req.(*ListGlobalSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_PutGlobalSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGlobalSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).PutGlobalSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_PutGlobalSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).PutGlobalSecret(ctx, req.(*PutGlobalSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeleteGlobalSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteGlobalSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_DeleteGlobalSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteGlobalSecret(ctx, req.(*DeleteGlobalSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gofer_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoferServer).ListEvents(m, &goferListEventsServer{stream})
}

type Gofer_ListEventsServer interface {
	Send(*ListEventsResponse) error
	grpc.ServerStream
}

type goferListEventsServer struct {
	grpc.ServerStream
}

func (x *goferListEventsServer) Send(m *ListEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Gofer_ServiceDesc is the grpc.ServiceDesc for Gofer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gofer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gofer",
	HandlerType: (*GoferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _Gofer_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetSystemSummary",
			Handler:    _Gofer_GetSystemSummary_Handler,
		},
		{
			MethodName: "RepairOrphan",
			Handler:    _Gofer_RepairOrphan_Handler,
		},
		{
			MethodName: "ToggleEventIngress",
			Handler:    _Gofer_ToggleEventIngress_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Gofer_CreateToken_Handler,
		},
		{
			MethodName: "BootstrapToken",
			Handler:    _Gofer_BootstrapToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _Gofer_ListTokens_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Gofer_GetToken_Handler,
		},
		{
			MethodName: "EnableToken",
			Handler:    _Gofer_EnableToken_Handler,
		},
		{
			MethodName: "DisableToken",
			Handler:    _Gofer_DisableToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Gofer_DeleteToken_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Gofer_ListNamespaces_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _Gofer_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _Gofer_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Gofer_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Gofer_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _Gofer_GetPipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _Gofer_ListPipelines_Handler,
		},
		{
			MethodName: "EnablePipeline",
			Handler:    _Gofer_EnablePipeline_Handler,
		},
		{
			MethodName: "DisablePipeline",
			Handler:    _Gofer_DisablePipeline_Handler,
		},
		{
			MethodName: "DeployPipeline",
			Handler:    _Gofer_DeployPipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _Gofer_DeletePipeline_Handler,
		},
		{
			MethodName: "RegisterPipelineConfig",
			Handler:    _Gofer_RegisterPipelineConfig_Handler,
		},
		{
			MethodName: "ListPipelineConfigs",
			Handler:    _Gofer_ListPipelineConfigs_Handler,
		},
		{
			MethodName: "GetPipelineConfig",
			Handler:    _Gofer_GetPipelineConfig_Handler,
		},
		{
			MethodName: "DeletePipelineConfig",
			Handler:    _Gofer_DeletePipelineConfig_Handler,
		},
		{
			MethodName: "CreatePipelineExtensionSubscription",
			Handler:    _Gofer_CreatePipelineExtensionSubscription_Handler,
		},
		{
			MethodName: "ListPipelineExtensionSubscriptions",
			Handler:    _Gofer_ListPipelineExtensionSubscriptions_Handler,
		},
		{
			MethodName: "GetPipelineExtensionSubscription",
			Handler:    _Gofer_GetPipelineExtensionSubscription_Handler,
		},
		{
			MethodName: "EnablePipelineExtensionSubscription",
			Handler:    _Gofer_EnablePipelineExtensionSubscription_Handler,
		},
		{
			MethodName: "DisablePipelineExtensionSubscription",
			Handler:    _Gofer_DisablePipelineExtensionSubscription_Handler,
		},
		{
			MethodName: "DeletePipelineExtensionSubscription",
			Handler:    _Gofer_DeletePipelineExtensionSubscription_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _Gofer_ListDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Gofer_GetDeployment_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Gofer_GetRun_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _Gofer_ListRuns_Handler,
		},
		{
			MethodName: "StartRun",
			Handler:    _Gofer_StartRun_Handler,
		},
		{
			MethodName: "RetryRun",
			Handler:    _Gofer_RetryRun_Handler,
		},
		{
			MethodName: "CancelRun",
			Handler:    _Gofer_CancelRun_Handler,
		},
		{
			MethodName: "CancelAllRuns",
			Handler:    _Gofer_CancelAllRuns_Handler,
		},
		{
			MethodName: "GetTaskRun",
			Handler:    _Gofer_GetTaskRun_Handler,
		},
		{
			MethodName: "ListTaskRuns",
			Handler:    _Gofer_ListTaskRuns_Handler,
		},
		{
			MethodName: "CancelTaskRun",
			Handler:    _Gofer_CancelTaskRun_Handler,
		},
		{
			MethodName: "DeleteTaskRunLogs",
			Handler:    _Gofer_DeleteTaskRunLogs_Handler,
		},
		{
			MethodName: "GetExtension",
			Handler:    _Gofer_GetExtension_Handler,
		},
		{
			MethodName: "ListExtensions",
			Handler:    _Gofer_ListExtensions_Handler,
		},
		{
			MethodName: "InstallExtension",
			Handler:    _Gofer_InstallExtension_Handler,
		},
		{
			MethodName: "UninstallExtension",
			Handler:    _Gofer_UninstallExtension_Handler,
		},
		{
			MethodName: "EnableExtension",
			Handler:    _Gofer_EnableExtension_Handler,
		},
		{
			MethodName: "DisableExtension",
			Handler:    _Gofer_DisableExtension_Handler,
		},
		{
			MethodName: "ListPipelineObjects",
			Handler:    _Gofer_ListPipelineObjects_Handler,
		},
		{
			MethodName: "GetPipelineObject",
			Handler:    _Gofer_GetPipelineObject_Handler,
		},
		{
			MethodName: "PutPipelineObject",
			Handler:    _Gofer_PutPipelineObject_Handler,
		},
		{
			MethodName: "DeletePipelineObject",
			Handler:    _Gofer_DeletePipelineObject_Handler,
		},
		{
			MethodName: "ListRunObjects",
			Handler:    _Gofer_ListRunObjects_Handler,
		},
		{
			MethodName: "GetRunObject",
			Handler:    _Gofer_GetRunObject_Handler,
		},
		{
			MethodName: "PutRunObject",
			Handler:    _Gofer_PutRunObject_Handler,
		},
		{
			MethodName: "DeleteRunObject",
			Handler:    _Gofer_DeleteRunObject_Handler,
		},
		{
			MethodName: "GetPipelineSecret",
			Handler:    _Gofer_GetPipelineSecret_Handler,
		},
		{
			MethodName: "ListPipelineSecrets",
			Handler:    _Gofer_ListPipelineSecrets_Handler,
		},
		{
			MethodName: "PutPipelineSecret",
			Handler:    _Gofer_PutPipelineSecret_Handler,
		},
		{
			MethodName: "DeletePipelineSecret",
			Handler:    _Gofer_DeletePipelineSecret_Handler,
		},
		{
			MethodName: "GetGlobalSecret",
			Handler:    _Gofer_GetGlobalSecret_Handler,
		},
		{
			MethodName: "ListGlobalSecrets",
			Handler:    _Gofer_ListGlobalSecrets_Handler,
		},
		{
			MethodName: "PutGlobalSecret",
			Handler:    _Gofer_PutGlobalSecret_Handler,
		},
		{
			MethodName: "DeleteGlobalSecret",
			Handler:    _Gofer_DeleteGlobalSecret_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Gofer_GetEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachToTaskRun",
			Handler:       _Gofer_AttachToTaskRun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTaskRunLogs",
			Handler:       _Gofer_GetTaskRunLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunExtensionInstaller",
			Handler:       _Gofer_RunExtensionInstaller_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunPipelineConfigurator",
			Handler:       _Gofer_RunPipelineConfigurator_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListEvents",
			Handler:       _Gofer_ListEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gofer.proto",
}

const (
	ExtensionService_Init_FullMethodName                    = "/proto.ExtensionService/Init"
	ExtensionService_Info_FullMethodName                    = "/proto.ExtensionService/Info"
	ExtensionService_Subscribe_FullMethodName               = "/proto.ExtensionService/Subscribe"
	ExtensionService_Unsubscribe_FullMethodName             = "/proto.ExtensionService/Unsubscribe"
	ExtensionService_Shutdown_FullMethodName                = "/proto.ExtensionService/Shutdown"
	ExtensionService_ExternalEvent_FullMethodName           = "/proto.ExtensionService/ExternalEvent"
	ExtensionService_RunExtensionInstaller_FullMethodName   = "/proto.ExtensionService/RunExtensionInstaller"
	ExtensionService_RunPipelineConfigurator_FullMethodName = "/proto.ExtensionService/RunPipelineConfigurator"
)

// ExtensionServiceClient is the client API for ExtensionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionServiceClient interface {
	// Init returns when an extension is ready to serve requests.
	Init(ctx context.Context, in *ExtensionInitRequest, opts ...grpc.CallOption) (*ExtensionInitResponse, error)
	// Info returns information on the specific plugin.
	Info(ctx context.Context, in *ExtensionInfoRequest, opts ...grpc.CallOption) (*ExtensionInfoResponse, error)
	// Subscribe allows a extension to keep track of all pipelines currently
	// dependant on that extension so that we can extension them at appropriate
	// times.
	Subscribe(ctx context.Context, in *ExtensionSubscribeRequest, opts ...grpc.CallOption) (*ExtensionSubscribeResponse, error)
	// Unsubscribe allows pipelines to remove their extension subscriptions. This
	// is useful if the pipeline no longer needs to be notified about a specific
	// extension automation.
	Unsubscribe(ctx context.Context, in *ExtensionUnsubscribeRequest, opts ...grpc.CallOption) (*ExtensionUnsubscribeResponse, error)
	// Shutdown tells the extension to cleanup and gracefully shutdown. If a
	// extension does not shutdown in a time defined by the gofer API the
	// extension will instead be Force shutdown(SIGKILL). This is to say that all
	// extensions should lean toward quick cleanups and shutdowns.
	Shutdown(ctx context.Context, in *ExtensionShutdownRequest, opts ...grpc.CallOption) (*ExtensionShutdownResponse, error)
	// ExternalEvent are json blobs of gofer's /events endpoint. Normally
	// webhooks.
	ExternalEvent(ctx context.Context, in *ExtensionExternalEventRequest, opts ...grpc.CallOption) (*ExtensionExternalEventResponse, error)
	// Run the installer that helps admin user install the extension.
	RunExtensionInstaller(ctx context.Context, opts ...grpc.CallOption) (ExtensionService_RunExtensionInstallerClient, error)
	// Run the installer that helps pipeline users with their pipeline extension
	// configuration.
	RunPipelineConfigurator(ctx context.Context, opts ...grpc.CallOption) (ExtensionService_RunPipelineConfiguratorClient, error)
}

type extensionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionServiceClient(cc grpc.ClientConnInterface) ExtensionServiceClient {
	return &extensionServiceClient{cc}
}

func (c *extensionServiceClient) Init(ctx context.Context, in *ExtensionInitRequest, opts ...grpc.CallOption) (*ExtensionInitResponse, error) {
	out := new(ExtensionInitResponse)
	err := c.cc.Invoke(ctx, ExtensionService_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) Info(ctx context.Context, in *ExtensionInfoRequest, opts ...grpc.CallOption) (*ExtensionInfoResponse, error) {
	out := new(ExtensionInfoResponse)
	err := c.cc.Invoke(ctx, ExtensionService_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) Subscribe(ctx context.Context, in *ExtensionSubscribeRequest, opts ...grpc.CallOption) (*ExtensionSubscribeResponse, error) {
	out := new(ExtensionSubscribeResponse)
	err := c.cc.Invoke(ctx, ExtensionService_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) Unsubscribe(ctx context.Context, in *ExtensionUnsubscribeRequest, opts ...grpc.CallOption) (*ExtensionUnsubscribeResponse, error) {
	out := new(ExtensionUnsubscribeResponse)
	err := c.cc.Invoke(ctx, ExtensionService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) Shutdown(ctx context.Context, in *ExtensionShutdownRequest, opts ...grpc.CallOption) (*ExtensionShutdownResponse, error) {
	out := new(ExtensionShutdownResponse)
	err := c.cc.Invoke(ctx, ExtensionService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) ExternalEvent(ctx context.Context, in *ExtensionExternalEventRequest, opts ...grpc.CallOption) (*ExtensionExternalEventResponse, error) {
	out := new(ExtensionExternalEventResponse)
	err := c.cc.Invoke(ctx, ExtensionService_ExternalEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionServiceClient) RunExtensionInstaller(ctx context.Context, opts ...grpc.CallOption) (ExtensionService_RunExtensionInstallerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExtensionService_ServiceDesc.Streams[0], ExtensionService_RunExtensionInstaller_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &extensionServiceRunExtensionInstallerClient{stream}
	return x, nil
}

type ExtensionService_RunExtensionInstallerClient interface {
	Send(*ExtensionRunExtensionInstallerClientMessage) error
	Recv() (*ExtensionRunExtensionInstallerExtensionMessage, error)
	grpc.ClientStream
}

type extensionServiceRunExtensionInstallerClient struct {
	grpc.ClientStream
}

func (x *extensionServiceRunExtensionInstallerClient) Send(m *ExtensionRunExtensionInstallerClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extensionServiceRunExtensionInstallerClient) Recv() (*ExtensionRunExtensionInstallerExtensionMessage, error) {
	m := new(ExtensionRunExtensionInstallerExtensionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extensionServiceClient) RunPipelineConfigurator(ctx context.Context, opts ...grpc.CallOption) (ExtensionService_RunPipelineConfiguratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExtensionService_ServiceDesc.Streams[1], ExtensionService_RunPipelineConfigurator_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &extensionServiceRunPipelineConfiguratorClient{stream}
	return x, nil
}

type ExtensionService_RunPipelineConfiguratorClient interface {
	Send(*ExtensionRunPipelineConfiguratorClientMessage) error
	Recv() (*ExtensionRunPipelineConfiguratorExtensionMessage, error)
	grpc.ClientStream
}

type extensionServiceRunPipelineConfiguratorClient struct {
	grpc.ClientStream
}

func (x *extensionServiceRunPipelineConfiguratorClient) Send(m *ExtensionRunPipelineConfiguratorClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extensionServiceRunPipelineConfiguratorClient) Recv() (*ExtensionRunPipelineConfiguratorExtensionMessage, error) {
	m := new(ExtensionRunPipelineConfiguratorExtensionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExtensionServiceServer is the server API for ExtensionService service.
// All implementations must embed UnimplementedExtensionServiceServer
// for forward compatibility
type ExtensionServiceServer interface {
	// Init returns when an extension is ready to serve requests.
	Init(context.Context, *ExtensionInitRequest) (*ExtensionInitResponse, error)
	// Info returns information on the specific plugin.
	Info(context.Context, *ExtensionInfoRequest) (*ExtensionInfoResponse, error)
	// Subscribe allows a extension to keep track of all pipelines currently
	// dependant on that extension so that we can extension them at appropriate
	// times.
	Subscribe(context.Context, *ExtensionSubscribeRequest) (*ExtensionSubscribeResponse, error)
	// Unsubscribe allows pipelines to remove their extension subscriptions. This
	// is useful if the pipeline no longer needs to be notified about a specific
	// extension automation.
	Unsubscribe(context.Context, *ExtensionUnsubscribeRequest) (*ExtensionUnsubscribeResponse, error)
	// Shutdown tells the extension to cleanup and gracefully shutdown. If a
	// extension does not shutdown in a time defined by the gofer API the
	// extension will instead be Force shutdown(SIGKILL). This is to say that all
	// extensions should lean toward quick cleanups and shutdowns.
	Shutdown(context.Context, *ExtensionShutdownRequest) (*ExtensionShutdownResponse, error)
	// ExternalEvent are json blobs of gofer's /events endpoint. Normally
	// webhooks.
	ExternalEvent(context.Context, *ExtensionExternalEventRequest) (*ExtensionExternalEventResponse, error)
	// Run the installer that helps admin user install the extension.
	RunExtensionInstaller(ExtensionService_RunExtensionInstallerServer) error
	// Run the installer that helps pipeline users with their pipeline extension
	// configuration.
	RunPipelineConfigurator(ExtensionService_RunPipelineConfiguratorServer) error
	mustEmbedUnimplementedExtensionServiceServer()
}

// UnimplementedExtensionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExtensionServiceServer struct {
}

func (UnimplementedExtensionServiceServer) Init(context.Context, *ExtensionInitRequest) (*ExtensionInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedExtensionServiceServer) Info(context.Context, *ExtensionInfoRequest) (*ExtensionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedExtensionServiceServer) Subscribe(context.Context, *ExtensionSubscribeRequest) (*ExtensionSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedExtensionServiceServer) Unsubscribe(context.Context, *ExtensionUnsubscribeRequest) (*ExtensionUnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedExtensionServiceServer) Shutdown(context.Context, *ExtensionShutdownRequest) (*ExtensionShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedExtensionServiceServer) ExternalEvent(context.Context, *ExtensionExternalEventRequest) (*ExtensionExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalEvent not implemented")
}
func (UnimplementedExtensionServiceServer) RunExtensionInstaller(ExtensionService_RunExtensionInstallerServer) error {
	return status.Errorf(codes.Unimplemented, "method RunExtensionInstaller not implemented")
}
func (UnimplementedExtensionServiceServer) RunPipelineConfigurator(ExtensionService_RunPipelineConfiguratorServer) error {
	return status.Errorf(codes.Unimplemented, "method RunPipelineConfigurator not implemented")
}
func (UnimplementedExtensionServiceServer) mustEmbedUnimplementedExtensionServiceServer() {}

// UnsafeExtensionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionServiceServer will
// result in compilation errors.
type UnsafeExtensionServiceServer interface {
	mustEmbedUnimplementedExtensionServiceServer()
}

func RegisterExtensionServiceServer(s grpc.ServiceRegistrar, srv ExtensionServiceServer) {
	s.RegisterService(&ExtensionService_ServiceDesc, srv)
}

func _ExtensionService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).Init(ctx, req.(*ExtensionInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).Info(ctx, req.(*ExtensionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).Subscribe(ctx, req.(*ExtensionSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).Unsubscribe(ctx, req.(*ExtensionUnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).Shutdown(ctx, req.(*ExtensionShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_ExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionExternalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServiceServer).ExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionService_ExternalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServiceServer).ExternalEvent(ctx, req.(*ExtensionExternalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionService_RunExtensionInstaller_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtensionServiceServer).RunExtensionInstaller(&extensionServiceRunExtensionInstallerServer{stream})
}

type ExtensionService_RunExtensionInstallerServer interface {
	Send(*ExtensionRunExtensionInstallerExtensionMessage) error
	Recv() (*ExtensionRunExtensionInstallerClientMessage, error)
	grpc.ServerStream
}

type extensionServiceRunExtensionInstallerServer struct {
	grpc.ServerStream
}

func (x *extensionServiceRunExtensionInstallerServer) Send(m *ExtensionRunExtensionInstallerExtensionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extensionServiceRunExtensionInstallerServer) Recv() (*ExtensionRunExtensionInstallerClientMessage, error) {
	m := new(ExtensionRunExtensionInstallerClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtensionService_RunPipelineConfigurator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtensionServiceServer).RunPipelineConfigurator(&extensionServiceRunPipelineConfiguratorServer{stream})
}

type ExtensionService_RunPipelineConfiguratorServer interface {
	Send(*ExtensionRunPipelineConfiguratorExtensionMessage) error
	Recv() (*ExtensionRunPipelineConfiguratorClientMessage, error)
	grpc.ServerStream
}

type extensionServiceRunPipelineConfiguratorServer struct {
	grpc.ServerStream
}

func (x *extensionServiceRunPipelineConfiguratorServer) Send(m *ExtensionRunPipelineConfiguratorExtensionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extensionServiceRunPipelineConfiguratorServer) Recv() (*ExtensionRunPipelineConfiguratorClientMessage, error) {
	m := new(ExtensionRunPipelineConfiguratorClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExtensionService_ServiceDesc is the grpc.ServiceDesc for ExtensionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtensionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ExtensionService",
	HandlerType: (*ExtensionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ExtensionService_Init_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _ExtensionService_Info_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ExtensionService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ExtensionService_Unsubscribe_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ExtensionService_Shutdown_Handler,
		},
		{
			MethodName: "ExternalEvent",
			Handler:    _ExtensionService_ExternalEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunExtensionInstaller",
			Handler:       _ExtensionService_RunExtensionInstaller_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunPipelineConfigurator",
			Handler:       _ExtensionService_RunPipelineConfigurator_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gofer.proto",
}
