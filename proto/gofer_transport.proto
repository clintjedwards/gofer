syntax = "proto3";

package proto;

import "gofer_message_api.proto";
import "gofer_message_sdk.proto";

option go_package = "github.com/clintjedwards/gofer/proto/go";

////////////// System Transport Models //////////////

message GetSystemInfoRequest {}
message GetSystemInfoResponse {
  string commit = 1;
  string semver = 2;
}

message RepairOrphanRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
}
message RepairOrphanResponse {}

message ToggleEventIngressRequest {}
message ToggleEventIngressResponse {
  // The current value for the boolean that controls event ingress.
  bool value = 1;
}

message CreateTokenRequest {
  enum Kind {
    UNKNOWN = 0;
    MANAGEMENT = 1;
    CLIENT = 2;
  }
  Kind kind = 1;
  repeated string namespaces = 2;
  map<string, string> metadata = 3;
  // Accepts golang duration strings
  // https://pkg.go.dev/time#ParseDuration
  string expires = 4;
}
message CreateTokenResponse {
  Token details = 1;
  string token = 2;
}

message BootstrapTokenRequest {}
message BootstrapTokenResponse {
  Token details = 1;
  string token = 2;
}
message GetTokenRequest { string token = 1; }
message GetTokenResponse { Token details = 1; }
message ListTokensRequest { string namespace = 1; }
message ListTokensResponse { repeated Token tokens = 1; }
message DeleteTokenRequest { string token = 1; }
message DeleteTokenResponse {}
message EnableTokenRequest { string token = 1; }
message EnableTokenResponse {}
message DisableTokenRequest { string token = 1; }
message DisableTokenResponse {}

////////////// Namespace Transport Models //////////////

message GetNamespaceRequest {
  string id = 1; // Unique identifier
}
message GetNamespaceResponse { Namespace namespace = 1; }

message ListNamespacesRequest {
  // offset is a pagination parameter that defines where to start when counting
  // the list of objects to return.
  int64 offset = 1;

  // limit is a pagination parameter that defines how many objects to return
  // per result.
  int64 limit = 2;
}

message ListNamespacesResponse { repeated Namespace namespaces = 1; }

message CreateNamespaceRequest {
  string id = 1;
  string name = 2;
  string description = 3;
}
message CreateNamespaceResponse { Namespace namespace = 1; }

message UpdateNamespaceRequest {
  string id = 1;
  string name = 2;
  string description = 3;
}
message UpdateNamespaceResponse {}

message DeleteNamespaceRequest {
  string id = 1; // Unique identifier
}
message DeleteNamespaceResponse {}

////////////// Pipeline Transport Models //////////////

message GetPipelineRequest {
  string namespace_id = 1; // Unique namespace identifier
  string id = 2;           // Unique identifier
  // Pipeline version to retrieve. 0 Returns the currently active version.
  int64 version = 3;
}
message GetPipelineResponse { Pipeline pipeline = 1; }

message ListPipelinesRequest {
  // offset is a pagination parameter that defines where to start when counting
  // the list of pipelines to return.
  int64 offset = 1;

  // limit is a pagination parameter that defines how many pipelines to return
  // per result.
  int64 limit = 2;
  string namespace_id = 3; // Unique namespace identifier
}
message ListPipelinesResponse { repeated PipelineMetadata pipelines = 1; }

message DisablePipelineRequest {
  string namespace_id = 1; // Unique namespace identifier
  string id = 2;           // Unique namespace identifier
}
message DisablePipelineResponse {}

message EnablePipelineRequest {
  string namespace_id = 1; // Unique namespace identifier
  string id = 2;           // Unique identifier
}
message EnablePipelineResponse {}

message RegisterPipelineConfigRequest {
  string namespace_id = 1; // Unique namespace identifier
  UserPipelineConfig pipeline_config = 2;
}
message RegisterPipelineConfigResponse { Pipeline pipeline = 1; }

message DeployPipelineRequest {
  string namespace_id = 1; // Unique namespace identifier
  string id = 2;
  int64 version = 3;
  bool force = 4;
}
message DeployPipelineResponse { int64 deployment_id = 1; }

message DeletePipelineRequest {
  string namespace_id = 1; // Unique namespace identifier
  string id = 2;           // Pipeline ID
}
message DeletePipelineResponse {}

////////////// Pipeline Config Transport Models //////////////

message GetPipelineConfigRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  // Pipeline version to retrieve. 0 Returns the currently active version.
  int64 version = 3;
}
message GetPipelineConfigResponse { PipelineConfig config = 1; }

message ListPipelineConfigsRequest {
  // offset is a pagination parameter that defines where to start when counting
  // the list of objects to return.
  int64 offset = 1;

  // limit is a pagination parameter that defines how many objects to return
  // per result.
  int64 limit = 2;
  string namespace_id = 3; // Unique namespace identifier
  string pipeline_id = 4;  // Unique pipeline identifier
}

message ListPipelineConfigsResponse { repeated PipelineConfig configs = 1; }

message DeletePipelineConfigRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  // Pipeline version to retrieve. 0 Deletes the currently active version.
  int64 version = 3;
}
message DeletePipelineConfigResponse {}

////////////// Pipeline Extension Subscription Transport Models //////////////

message CreatePipelineExtensionSubscriptionRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  string extension_name = 3;
  string extension_label = 4;
  map<string, string> settings = 5;
}

message CreatePipelineExtensionSubscriptionResponse {}

message GetPipelineExtensionSubscriptionRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  string extension_name = 3;
  string extension_label = 4;
}

message GetPipelineExtensionSubscriptionResponse {
  PipelineExtensionSubscription subscription = 1;
}

message ListPipelineExtensionSubscriptionsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
}

message ListPipelineExtensionSubscriptionsResponse {
  repeated PipelineExtensionSubscription subscriptions = 1;
}

message EnablePipelineExtensionSubscriptionRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  string extension_name = 3;
  string extension_label = 4;
}
message EnablePipelineExtensionSubscriptionResponse {}

message DisablePipelineExtensionSubscriptionRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  string extension_name = 3;
  string extension_label = 4;
}
message DisablePipelineExtensionSubscriptionResponse {}

message DeletePipelineExtensionSubscriptionRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;  // Unique pipeline identifier
  string extension_name = 3;
  string extension_label = 4;
}
message DeletePipelineExtensionSubscriptionResponse {}

////////////// Deployment Transport Models //////////////
message ListDeploymentsRequest {
  // offset is a pagination parameter that defines where to start when counting
  // the list of Deployments to return.
  int64 offset = 1;

  // limit is a pagination parameter that defines how many Deployments to return
  // per result.
  int64 limit = 2;
  string namespace_id = 3; // Unique namespace identifier
  string pipeline_id = 4;
}

message ListDeploymentsResponse { repeated Deployment Deployments = 1; }

message GetDeploymentRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 id = 3; // Unique deployment identifier.
}
message GetDeploymentResponse { Deployment deployment = 1; }

////////////// Runs Transport Models //////////////

message GetRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 id = 3; // Run ID
}
message GetRunResponse { Run run = 1; }

message BatchGetRunsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  repeated int64 ids = 3; // Run IDs
}
message BatchGetRunsResponse { repeated Run runs = 1; }

message ListRunsRequest {
  // offset is a pagination parameter that defines where to start when
  // counting the list of pipelines to return
  int64 offset = 1;

  // limit is a pagination parameter that defines how many pipelines to return
  // per result.
  int64 limit = 2;
  string namespace_id = 3; // Unique namespace identifier
  string pipeline_id = 4;
}
message ListRunsResponse { repeated Run runs = 1; }

message StartRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;

  // variables allows for the replacement of task environment variables, it
  // overrides all other environment variables if there is a name collision.
  map<string, string> variables = 3;
  Initiator initiator = 4; // Who started the run and for what purpose?
}
message StartRunResponse { Run run = 1; }

message RetryRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;        // Run ID
  Initiator initiator = 4; // Who started the run and for what purpose?
}
message RetryRunResponse { Run run = 1; }

message CancelRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3; // Run ID

  // force will cause Gofer to hard kill any outstanding task run containers.
  // Usually this means that the container receives a SIGKILL.
  bool force = 4;
}
message CancelRunResponse {}

message CancelAllRunsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;

  // force will cause Gofer to hard kill any outstanding task run containers.
  // Usually this means that the container receives a SIGKILL.
  bool force = 3;
}
message CancelAllRunsResponse { repeated int64 runs = 1; }

////////////// Task Run Transport Models //////////////

message ListTaskRunsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
}
message ListTaskRunsResponse { repeated TaskRun task_runs = 1; }

message GetTaskRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string id = 4; // Task Run ID
}
message GetTaskRunResponse { TaskRun task_run = 1; }

message CancelTaskRunRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string id = 4; // Task Run ID

  // force will cause Gofer to hard kill this task run containers.
  // Usually this means that the container receives a SIGKILL.
  bool force = 5;
}
message CancelTaskRunResponse {}

message AttachToTaskRunRequest {
  oneof requestType {
    // On the first request an init request sets up the connection to the
    // container.
    AttachToTaskRunInit init = 1;
    // On following requests an input request passes text to the container.
    AttachToTaskRunInput input = 2;
  }
}
message AttachToTaskRunInit {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string id = 4;               // Task Run ID
  repeated string command = 5; // Which command to execute in container
}
message AttachToTaskRunInput { string input = 1; }
message AttachToTaskRunOutput { string output = 1; }

message GetTaskRunLogsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string id = 4; // Task Run ID
}
message GetTaskRunLogsResponse {
  string log_line = 1; // The string content of the current log line.
  int64 line_num = 2;  // The current line number.
}

message DeleteTaskRunLogsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string id = 4; // Task Run ID
}
message DeleteTaskRunLogsResponse {}

////////////// Extension Transport Models //////////////

message GetExtensionRequest {
  string name = 1; // The unique name for a particular extension
}
message GetExtensionResponse { Extension extension = 1; }

message ListExtensionsRequest {}
message ListExtensionsResponse { repeated Extension extensions = 1; }

message InstallExtensionRequest {
  string name = 1;
  string image = 2;
  string user = 3;
  string pass = 4;
  map<string, string> variables = 5;
}
message InstallExtensionResponse {}

message UninstallExtensionRequest { string name = 1; }
message UninstallExtensionResponse {}

message EnableExtensionRequest { string name = 1; }
message EnableExtensionResponse {}

message DisableExtensionRequest { string name = 1; }
message DisableExtensionResponse {}

message RunExtensionInstallerClientMessage {
  message Init {
    string image = 1;
    string user = 2;
    string pass = 3;
  }

  oneof message_type {
    Init init = 1;
    string msg = 2;
  }
}
message RunExtensionInstallerExtensionMessage {
  message ConfigSetting {
    string config = 1;
    string value = 2;
  }

  oneof message_type {
    // Normal extension messages that should be passed back to the user.
    string msg = 1;

    // A question from the extension that needs an answer. The extension will
    // wait for an answer after this request. This specific message type
    // allows the cli to know when to prompt the user for an answer.
    string query = 2;

    // Config setting messages communicate when the extension has suggested a
    // configuration based on the user input.
    ConfigSetting config_setting = 3;
  }
}

message RunPipelineConfiguratorClientMessage {
  message Init {
    // name of the extension you want to run the pipeline
    // configurator for
    string name = 1;
  }

  oneof message_type {
    Init init = 1;
    string msg = 2;
  }
}
message RunPipelineConfiguratorExtensionMessage {
  message ParamSetting {
    string param = 1;
    string value = 2;
  }

  oneof message_type {
    // Normal extension messages that should be passed back to the user.
    string msg = 1;

    // A question from the extension that needs an answer. The extension will
    // wait for an answer after this request. This specific message type
    // allows the cli to know when to prompt the user for an answer.
    string query = 2;

    // Param setting messages communicate when the extension has suggested a
    // configuration based on the user input.
    ParamSetting param_setting = 3;
  }
}

////////////// Extension Service Transport Models //////////////

message ExtensionInitRequest { map<string, string> config = 1; }
message ExtensionInitResponse {}

message ExtensionInfoRequest {}
message ExtensionInfoResponse {
  // kind corresponds a unique extension identifier, this is passed as a envvar
  // via the main process(and as such can be left empty), as the main process
  // container the configuration for which extension "kind" corresponds to which
  // extension container.
  string name = 1;

  // Extensions are allowed to provide more extensive documentation on
  // how to use and configure them.
  string documentation = 2;

  // A listing of all registered pipelines in the format: <namespace>/<pipeline>
  repeated string registered = 3;
}

message ExtensionSubscribeRequest {
  string namespace_id = 1; // unique identifier for associated namespace.
  string pipeline_id = 2;  // unique identifier for associated pipeline.
  string pipeline_extension_label = 3; // pipeline specific subscription id

  // Pipelines are allowed to pass a configuration to extensions denoting what
  // specific settings they might like for a specific extension. The acceptable
  // values of this config map is defined by the extensions and should be
  // mentioned in documentation.
  //
  // Additionally, the extension should verify config settings and pass back an
  // error when it does not meet requirements.
  //
  // Note: The keys in this map are forced to be uppercase. This is important
  // when checking for their existance when writing a extension.
  map<string, string> config = 4;
}
message ExtensionSubscribeResponse {}

message ExtensionUnsubscribeRequest {
  string namespace_id = 1; // unique identifier for associated namespace
  string pipeline_id = 2;  // unique identifier for associated pipeline
  string pipeline_extension_label = 3; // pipeline specific subscription id
}
message ExtensionUnsubscribeResponse {}

message ExtensionShutdownRequest {}
message ExtensionShutdownResponse {}

message ExtensionExternalEventRequest { bytes payload = 1; }
message ExtensionExternalEventResponse {}

message ExtensionRunExtensionInstallerClientMessage { string msg = 1; }
message ExtensionRunExtensionInstallerExtensionMessage {
  message ConfigSetting {
    string config = 1;
    string value = 2;
  }

  oneof message_type {
    // Normal extension messages that should be passed back to the user.
    string msg = 1;

    // A question from the extension that needs an answer. The extension will
    // wait for an answer after this request. This specific message type
    // allows the cli to know when to prompt the user for an answer.
    string query = 2;

    // Config setting messages communicate when the extension has suggested a
    // configuration based on the user input.
    ConfigSetting config_setting = 3;
  }
}

message ExtensionRunPipelineConfiguratorClientMessage { string msg = 1; }
message ExtensionRunPipelineConfiguratorExtensionMessage {
  message ParamSetting {
    string param = 1;
    string value = 2;
  }

  oneof message_type {
    // Normal extension messages that should be passed back to the user.
    string msg = 1;

    // A question from the extension that needs an answer. The extension will
    // wait for an answer after this request. This specific message type
    // allows the cli to know when to prompt the user for an answer.
    string query = 2;

    // Param setting messages communicate when the extension has suggested a
    // configuration based on the user input.
    ParamSetting param_setting = 3;
  }
}

////////////// Events Transport Models //////////////

message GetEventRequest { int64 id = 1; } // Event ID
message GetEventResponse { Event event = 1; }

message ListEventsRequest {
  // defaults to false; meaning oldest to newest events by default.
  bool reverse = 1;
  // Tell Gofer to continually stream new events instead of closing the stream
  // after it gets to the end.
  bool follow = 2;
}
message ListEventsResponse { Event event = 1; }

////////////// Object store Transport Models //////////////

message GetPipelineObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
}
message GetPipelineObjectResponse { bytes content = 1; }

message ListPipelineObjectsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
}
message ListPipelineObjectsResponse { repeated ObjectStoreKey keys = 1; }

message PutPipelineObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
  bytes content = 4;
  bool force = 5; // Overwrites an already existing value.
}
message PutPipelineObjectResponse {
  // The number of bytes uploaded.
  int64 bytes = 1;

  // The total amount of objects for this particular pipeline.
  int64 object_limit = 2;

  // The key for the object that was evicted for the latest key.
  string object_evicted = 3;
}

message DeletePipelineObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
}
message DeletePipelineObjectResponse {}

message GetRunObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string key = 4;
}
message GetRunObjectResponse { bytes content = 1; }

message ListRunObjectsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
}
message ListRunObjectsResponse { repeated ObjectStoreKey keys = 1; }

message PutRunObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string key = 4;
  bytes content = 5;
  bool force = 6; // Overwrites an already existing value.
}
message PutRunObjectResponse { int64 bytes = 1; }

message DeleteRunObjectRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  int64 run_id = 3;
  string key = 4;
}
message DeleteRunObjectResponse {}

////////////// Secret store Transport Models //////////////

message GetPipelineSecretRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
  bool include_secret = 4; // Whether to include plaintext secret
}
message GetPipelineSecretResponse {
  SecretStoreKey metadata = 1;
  string secret = 2;
}

message ListPipelineSecretsRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
}
message ListPipelineSecretsResponse { repeated SecretStoreKey keys = 1; }

message PutPipelineSecretRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
  string content = 4;
  bool force = 5; // Overwrites an already existing value.
}
message PutPipelineSecretResponse {
  // The number of bytes uploaded.
  int64 bytes = 1;
}

message DeletePipelineSecretRequest {
  string namespace_id = 1; // Unique namespace identifier
  string pipeline_id = 2;
  string key = 3;
}
message DeletePipelineSecretResponse {}

////////////// Secret store Transport Models //////////////

message GetGlobalSecretRequest {
  string key = 1;
  bool include_secret = 2; // Whether to include plaintext secret
}
message GetGlobalSecretResponse {
  SecretStoreKey metadata = 1;
  string secret = 2;
}

message ListGlobalSecretsRequest {}
message ListGlobalSecretsResponse { repeated SecretStoreKey keys = 1; }

message PutGlobalSecretRequest {
  string key = 1;
  string content = 2;
  repeated string namespaces = 3;
  bool force = 4; // Overwrites already existing values.
}
message PutGlobalSecretResponse {
  // The number of bytes uploaded.
  int64 bytes = 1;
}

message DeleteGlobalSecretRequest { string key = 1; }
message DeleteGlobalSecretResponse {}
