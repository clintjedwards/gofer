syntax = "proto3";

package proto;

option go_package = "github.com/clintjedwards/gofer/proto/go";

// Documentation for these models can be found in the "models" package as these
// are just protobuf representations of those models.
//
// Why represent what amounts to the same model twice in protobuf AND a struct
// you ask?
//
//   Essentially, because the separation of the transport layer and the
//   application layer is a good thing. There are probably many reasons, but
//   the most straightforward is that we might want to represent something in
//   the database or within the application that might not be easily
//   representable in protobuf, a structure mainly made for transport.
//
//   There might also be things that we don't want to expose outside and so
//   the separation gives us a chance to not mess that up by simply forgetting a
//   json:"-".

message Namespace {
  string id = 1;
  string name = 2;
  string description = 3;
  int64 created = 4;
  int64 modified = 5;
}

message Variable {
  string key = 1;
  string value = 2;
  string source = 3;
}

message Pipeline {
  PipelineMetadata metadata = 1;
  PipelineConfig config = 2;
}

message PipelineMetadata {
  string namespace = 1;
  string id = 2;
  int64 created = 3;
  int64 modified = 4;
  enum PipelineState {
    PIPELINE_STATE_UNKNOWN = 0;
    ACTIVE = 1;
    DISABLED = 2;
  }
  PipelineState state = 5;
}

message PipelineConfig {
  string namespace = 1;
  string pipeline = 2;
  int64 version = 3;
  int64 parallelism = 4;
  string name = 5;
  string description = 6;
  map<string, CustomTask> custom_tasks = 7;
  map<string, PipelineCommonTaskSettings> common_tasks = 8;
  enum PipelineConfigState {
    PIPELINE_CONFIG_STATE_UNKNOWN = 0;
    UNRELEASED = 1;
    LIVE = 2;
    DEPRECATED = 3;
  }
  PipelineConfigState state = 9;
  int64 registered = 10;
  int64 deprecated = 11;
}

message PipelineExtensionSubscriptionStatusReason {
  enum PipelineExtensionSubscriptionStatusReasonKind {
    PIPELINE_EXTENSION_STATUS_REASON_UNKNOWN = 0;
    ACTIVE = 1;
    ERROR = 2;
    DISABLED = 3;
  }
  PipelineExtensionSubscriptionStatusReasonKind reason = 1;
  string description = 2;
}

message PipelineExtensionSubscription {
  string namespace = 1;
  string pipeline = 2;
  string name = 3;
  string label = 4;
  map<string, string> settings = 5;
  enum Status {
    STATUS_UNKNOWN = 0;
    ACTIVE = 1;
    ERROR = 2;
    DISABLED = 3;
  }
  Status status = 6;
  PipelineExtensionSubscriptionStatusReason status_reason = 7;
}

message DeploymentStatusReason {
  enum DeploymentStatusReasonKind {
    DEPLOYMENT_STATUS_REASON_UNKNOWN = 0;
  }
  DeploymentStatusReasonKind reason = 1;
  string description = 2;
}

message Deployment {
  string namespace = 1;
  string pipeline = 2;
  int64 id = 3;
  int64 start_version = 4;
  int64 end_version = 5;
  int64 started = 6;
  int64 ended = 7;
  enum DeploymentState {
    DEPLOYMENT_STATE_UNKNOWN = 0;
    RUNNING = 1;
    COMPLETE = 2;
  }
  DeploymentState state = 8;
  enum DeploymentStatus {
    DEPLOYMENT_STATUS_UNKNOWN = 0;
    FAILED = 1;
    SUCCESSFUL = 2;
  }
  DeploymentStatus status = 9;
  DeploymentStatusReason status_reason = 10;
  repeated Event logs = 11;
}

message Run {
  string namespace = 1;
  string pipeline = 2;
  int64 version = 3;
  int64 id = 4;
  int64 started = 5;
  int64 ended = 6;
  enum RunState {
    RUN_STATE_UNKNOWN = 0;
    PENDING = 1;
    RUNNING = 2;
    COMPLETE = 3;
  }
  RunState state = 7;
  enum RunStatus {
    RUN_STATUS_UNKNOWN = 0;
    SUCCESSFUL = 1;
    FAILED = 2;
    CANCELLED = 3;
  }
  RunStatus status = 8;
  RunStatusReason status_reason = 9;
  message RunExtensionInfo {
    string name = 1;
    string label = 2;
  }
  RunExtensionInfo extension = 10;
  repeated Variable variables = 11;
  bool store_objects_expired = 12;
}

message RunStatusReason {
  enum RunStatusReasonKind {
    RUN_STATUS_REASON_UNKNOWN = 0;
    ABNORMAL_EXIT = 1;
    SCHEDULER_ERROR = 2;
    FAILED_PRECONDITION = 3;
    USER_CANCELLED = 4;
    ADMIN_CANCELLED = 5;
  }
  RunStatusReasonKind reason = 1;
  string description = 2;
}

message RegistryAuth {
  string user = 1;
  string pass = 2;
}

message CustomTask {
  string id = 1;
  string description = 2;
  string image = 3;
  RegistryAuth registry_auth = 4;
  enum RequiredParentStatus {
    REQUIRED_PARENT_STATUS_UNKNOWN = 0;
    ANY = 1;
    SUCCESS = 2;
    FAILURE = 3;
  }
  map<string, RequiredParentStatus> depends_on = 5;
  repeated Variable variables = 6;
  repeated string entrypoint = 7;
  repeated string command = 8;
  bool inject_api_token = 9;
}

message PipelineExtensionSettings {
  string name = 1;
  string label = 2;
  map<string, string> settings = 3;
}

message PipelineCommonTaskSettings {
  string name = 1;
  string label = 2;
  enum RequiredParentStatus {
    REQUIRED_PARENT_STATUS_UNKNOWN = 0;
    ANY = 1;
    SUCCESS = 2;
    FAILURE = 3;
  }
  string description = 3;
  map<string, RequiredParentStatus> depends_on = 4;
  map<string, string> settings = 5;
  bool inject_api_token = 6;
}

message CommonTask {
  PipelineCommonTaskSettings settings = 1;
  CommonTaskRegistration registration = 2;
}

message TaskRunStatusReason {
  enum Reason {
    UNKNOWN = 0;
    ABNORMAL_EXIT = 1;
    SCHEDULER_ERROR = 2;
    FAILED_PRECONDITION = 3;
    CANCELLED = 4;
    ORPHANED = 5;
  }
  Reason reason = 1;
  string description = 2;
}

message TaskRun {
  int64 created = 1;
  int64 ended = 2;
  int64 exit_code = 3;
  TaskRunStatusReason status_reason = 4;
  string id = 5;
  bool logs_expired = 6;
  bool logs_removed = 7;
  string namespace = 8;
  string pipeline = 9;
  int64 version = 10;
  int64 run = 11;
  int64 started = 12;
  enum TaskRunState {
    UNKNOWN_STATE = 0;
    PROCESSING = 1;
    WAITING = 2;
    RUNNING = 3;
    COMPLETE = 4;
  }
  TaskRunState state = 13;
  enum TaskRunStatus {
    UNKNOWN_STATUS = 0;
    SUCCESSFUL = 1;
    FAILED = 2;
    CANCELLED = 3;
    SKIPPED = 4;
  }
  TaskRunStatus status = 14;
  enum TaskKind {
    UNKNOWN_TASKKIND = 0;
    COMMON = 1;
    CUSTOM = 2;
  }
  TaskKind task_kind = 15;
  oneof task {
    CustomTask custom_task = 16;
    CommonTask common_task = 17;
  }
  repeated Variable variables = 18;
}

message Extension {
  string name = 1;
  string image = 2;
  string url = 3;
  int64 started = 4;
  enum ExtensionState {
    UNKNOWN_STATE = 0;
    PROCESSING = 1;
    RUNNING = 2;
    EXITED = 3;
  }
  ExtensionState state = 5;
  enum ExtensionStatus {
    UNKNOWN_STATUS = 0;
    ENABLED = 1;
    DISABLED = 2;
  }
  ExtensionStatus status = 6;
  string documentation = 7;
}

message ExtensionRegistration {
  string name = 1;
  string image = 2;
  string user = 3;
  string pass = 4;
  map<string, string> variables = 5;
  int64 created = 6;
  enum ExtensionStatus {
    UNKNOWN_STATUS = 0;
    ENABLED = 1;
    DISABLED = 2;
  }
  ExtensionStatus status = 7;
}

message CommonTaskRegistration {
  string name = 1;
  string image = 2;
  string user = 3;
  string pass = 4;
  repeated Variable variables = 5;
  int64 created = 6;
  enum Status {
    UNKNOWN = 0;
    ENABLED = 1;
    DISABLED = 2;
  }
  Status status = 7;
  string documentation = 8;
}

message Event {
  int64 id = 1;
  string kind = 2;    // What type of event
  string details = 3; // Json output of the event
  int64 emitted = 4;
}

message Token {
  int64 created = 1;
  enum Kind {
    UNKNOWN = 0;
    MANAGEMENT = 1;
    CLIENT = 2;
  }
  Kind kind = 2;
  repeated string namespaces = 3;
  map<string, string> metadata = 4;
  int64 expires = 5;
  bool disabled = 6;
}

message ExtensionResult {
  enum Status {
    UNKNOWN = 0;
    FAILURE = 1;
    SUCCESS = 2;
    SKIPPED = 3;
  }
  Status status = 1;
  string details = 2;
}

message SecretStoreKey {
  string key = 1;
  repeated string namespaces = 2;
  bool extensions_only = 3;
  int64 created = 4;
}

message ObjectStoreKey {
  string key = 1;
  int64 created = 2;
}
