// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: gofer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoferClient is the client API for Gofer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoferClient interface {
	////////////// System RPCs //////////////
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// ListNamespaces returns all registered namespaces.
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	// CreateNamespace creates a new namespace that separates pipelines.
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// GetNamespace returns a single namespace by id.
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// UpdateNamespace updates the details of a particular namespace by id.
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	// DeleteNamespace removes a namespace by id.
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// GetPipeline returns a single pipeline by ID.
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// ListPipelines returns all registered pipelines. Can control pagination by
	// offset && limit request parameters.
	// By default ListPipelines will return the first 100 pipelines ordered by
	// creation.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// EnablePipeline allows a pipeline to execute runs by allowing it to receive
	// trigger events. See DisablePipeline to prevent a pipeline from executing
	// any more runs.
	EnablePipeline(ctx context.Context, in *EnablePipelineRequest, opts ...grpc.CallOption) (*EnablePipelineResponse, error)
	// DisablePipeline prevents the pipeline from executing runs. Any trigger
	// events that would normally cause the pipeline to be run are instead
	// discarded.
	DisablePipeline(ctx context.Context, in *DisablePipelineRequest, opts ...grpc.CallOption) (*DisablePipelineResponse, error)
	// CreatePipeline creates a new pipeline from the protobuf input. This is
	// usually autogenerated from the command line tool.
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	// UpdatePipeline updates a pipeline from the protobuf input. This input is
	// usually autogenerated from the command line tool.
	// Updating a pipeline requires the pipeline to adhere
	// to two constraints:
	//    1) The pipeline must not have any current runs in progress.
	//    2) The pipeline must be in a disabled state.
	UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error)
	// DeletePipeline deletes a pipeline permenantly. It is not recoverable.
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error)
	// GetRun returns the details of a single run.
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error)
	// ListRuns returns a list of all runs by Pipeline ID. Pagination can be
	// controlled via the offset and limit parameters of the request.
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// StartRun executes a single run of a particular pipeline.
	StartRun(ctx context.Context, in *StartRunRequest, opts ...grpc.CallOption) (*StartRunResponse, error)
	// RetryRun simply takes the vars and settings from a previous run and re-uses
	// those to launch a new run. Useful for if you want the exact settings from a
	// previous run.
	RetryRun(ctx context.Context, in *RetryRunRequest, opts ...grpc.CallOption) (*RetryRunResponse, error)
	// CancelRun stops the execution of a run in progress. Any task runs that
	// might have been running at the time Are ask to stop gracefully(SIGINT)
	// unless the force parameter is used, in which case the task runs are stopped
	// instantly(SIGKILL) and the run is cancelled.
	CancelRun(ctx context.Context, in *CancelRunRequest, opts ...grpc.CallOption) (*CancelRunResponse, error)
	// CancelAllRuns stops the execution of any in-progress runs for a specific
	// pipeline by ID.
	CancelAllRuns(ctx context.Context, in *CancelAllRunsRequest, opts ...grpc.CallOption) (*CancelAllRunsResponse, error)
	// GetTaskRun returns the details of a single task run.
	GetTaskRun(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*GetTaskRunResponse, error)
	// ListTaskRuns returns all task runs for a current run by ID.
	ListTaskRuns(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error)
	// CancelTaskRun cancels a specific task run, sending the related container a
	// SIGINT signal. If the force flag is used we instead send the container a
	// SIGKILL signal.
	//
	// Task runs that are cancelled can cause other downstream task runs to be
	// skipped depending on those downstream task run dependencies.
	CancelTaskRun(ctx context.Context, in *CancelTaskRunRequest, opts ...grpc.CallOption) (*CancelTaskRunResponse, error)
	// GetTaskRunLogs returns logs for a specific task run line by line in a
	// stream. The logs are returns with both STDOUT and STDERR of the associated
	// container combined.
	GetTaskRunLogs(ctx context.Context, in *GetTaskRunLogsRequest, opts ...grpc.CallOption) (Gofer_GetTaskRunLogsClient, error)
	// DeleteTaskRunLogs removes a task run's associated log object. This is
	// useful for if logs mistakenly contain sensitive data.
	DeleteTaskRunLogs(ctx context.Context, in *DeleteTaskRunLogsRequest, opts ...grpc.CallOption) (*DeleteTaskRunLogsResponse, error)
	// GetTrigger returns details about a specific trigger.
	GetTrigger(ctx context.Context, in *GetTriggerRequest, opts ...grpc.CallOption) (*GetTriggerResponse, error)
	// ListTriggers lists all triggers currently registered within gofer.
	ListTriggers(ctx context.Context, in *ListTriggersRequest, opts ...grpc.CallOption) (*ListTriggersResponse, error)
	// GetTriggerInstalInstructions retrieves install instructions for a
	// particular trigger.
	GetTriggerInstallInstructions(ctx context.Context, in *GetTriggerInstallInstructionsRequest, opts ...grpc.CallOption) (*GetTriggerInstallInstructionsResponse, error)
	// InstallTrigger attempts to install a new trigger.
	InstallTrigger(ctx context.Context, in *InstallTriggerRequest, opts ...grpc.CallOption) (*InstallTriggerResponse, error)
	// UninstallTrigger attempts to uninstall a trigger.
	UninstallTrigger(ctx context.Context, in *UninstallTriggerRequest, opts ...grpc.CallOption) (*UninstallTriggerResponse, error)
	// EnableTrigger attempts to enable a new trigger.
	EnableTrigger(ctx context.Context, in *EnableTriggerRequest, opts ...grpc.CallOption) (*EnableTriggerResponse, error)
	// DisableTrigger attempts to disable a new trigger.
	DisableTrigger(ctx context.Context, in *DisableTriggerRequest, opts ...grpc.CallOption) (*DisableTriggerResponse, error)
	// GetCommonTask returns details about a specific commontask.
	GetCommonTask(ctx context.Context, in *GetCommonTaskRequest, opts ...grpc.CallOption) (*GetCommonTaskResponse, error)
	// ListCommonTasks lists all common tasks currently registered within gofer.
	ListCommonTasks(ctx context.Context, in *ListCommonTasksRequest, opts ...grpc.CallOption) (*ListCommonTasksResponse, error)
	// InstallCommonTask attempts to install a new common task.
	InstallCommonTask(ctx context.Context, in *InstallCommonTaskRequest, opts ...grpc.CallOption) (*InstallCommonTaskResponse, error)
	// UninstallCommonTask attempts to uninstall a common task.
	UninstallCommonTask(ctx context.Context, in *UninstallCommonTaskRequest, opts ...grpc.CallOption) (*UninstallCommonTaskResponse, error)
	// EnableCommonTask attempts to enable a new common task.
	EnableCommonTask(ctx context.Context, in *EnableCommonTaskRequest, opts ...grpc.CallOption) (*EnableCommonTaskResponse, error)
	// DisableCommonTask attempts to disable a new common task.
	DisableCommonTask(ctx context.Context, in *DisableCommonTaskRequest, opts ...grpc.CallOption) (*DisableCommonTaskResponse, error)
	// GetEvent returns the details of a single event.
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	// ListEvents returns a streaming list of all events, ordered by
	// oldest to newest.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (Gofer_ListEventsClient, error)
}

type goferClient struct {
	cc grpc.ClientConnInterface
}

func NewGoferClient(cc grpc.ClientConnInterface) GoferClient {
	return &goferClient{cc}
}

func (c *goferClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnablePipeline(ctx context.Context, in *EnablePipelineRequest, opts ...grpc.CallOption) (*EnablePipelineResponse, error) {
	out := new(EnablePipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/EnablePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisablePipeline(ctx context.Context, in *DisablePipelineRequest, opts ...grpc.CallOption) (*DisablePipelineResponse, error) {
	out := new(DisablePipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DisablePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error) {
	out := new(UpdatePipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/UpdatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error) {
	out := new(DeletePipelineResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error) {
	out := new(GetRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) StartRun(ctx context.Context, in *StartRunRequest, opts ...grpc.CallOption) (*StartRunResponse, error) {
	out := new(StartRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/StartRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) RetryRun(ctx context.Context, in *RetryRunRequest, opts ...grpc.CallOption) (*RetryRunResponse, error) {
	out := new(RetryRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/RetryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelRun(ctx context.Context, in *CancelRunRequest, opts ...grpc.CallOption) (*CancelRunResponse, error) {
	out := new(CancelRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/CancelRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelAllRuns(ctx context.Context, in *CancelAllRunsRequest, opts ...grpc.CallOption) (*CancelAllRunsResponse, error) {
	out := new(CancelAllRunsResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/CancelAllRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetTaskRun(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*GetTaskRunResponse, error) {
	out := new(GetTaskRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetTaskRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListTaskRuns(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error) {
	out := new(ListTaskRunsResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListTaskRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) CancelTaskRun(ctx context.Context, in *CancelTaskRunRequest, opts ...grpc.CallOption) (*CancelTaskRunResponse, error) {
	out := new(CancelTaskRunResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/CancelTaskRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetTaskRunLogs(ctx context.Context, in *GetTaskRunLogsRequest, opts ...grpc.CallOption) (Gofer_GetTaskRunLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[0], "/proto.Gofer/GetTaskRunLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &goferGetTaskRunLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gofer_GetTaskRunLogsClient interface {
	Recv() (*GetTaskRunLogsResponse, error)
	grpc.ClientStream
}

type goferGetTaskRunLogsClient struct {
	grpc.ClientStream
}

func (x *goferGetTaskRunLogsClient) Recv() (*GetTaskRunLogsResponse, error) {
	m := new(GetTaskRunLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goferClient) DeleteTaskRunLogs(ctx context.Context, in *DeleteTaskRunLogsRequest, opts ...grpc.CallOption) (*DeleteTaskRunLogsResponse, error) {
	out := new(DeleteTaskRunLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DeleteTaskRunLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetTrigger(ctx context.Context, in *GetTriggerRequest, opts ...grpc.CallOption) (*GetTriggerResponse, error) {
	out := new(GetTriggerResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListTriggers(ctx context.Context, in *ListTriggersRequest, opts ...grpc.CallOption) (*ListTriggersResponse, error) {
	out := new(ListTriggersResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListTriggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetTriggerInstallInstructions(ctx context.Context, in *GetTriggerInstallInstructionsRequest, opts ...grpc.CallOption) (*GetTriggerInstallInstructionsResponse, error) {
	out := new(GetTriggerInstallInstructionsResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetTriggerInstallInstructions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) InstallTrigger(ctx context.Context, in *InstallTriggerRequest, opts ...grpc.CallOption) (*InstallTriggerResponse, error) {
	out := new(InstallTriggerResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/InstallTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UninstallTrigger(ctx context.Context, in *UninstallTriggerRequest, opts ...grpc.CallOption) (*UninstallTriggerResponse, error) {
	out := new(UninstallTriggerResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/UninstallTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnableTrigger(ctx context.Context, in *EnableTriggerRequest, opts ...grpc.CallOption) (*EnableTriggerResponse, error) {
	out := new(EnableTriggerResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/EnableTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisableTrigger(ctx context.Context, in *DisableTriggerRequest, opts ...grpc.CallOption) (*DisableTriggerResponse, error) {
	out := new(DisableTriggerResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DisableTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetCommonTask(ctx context.Context, in *GetCommonTaskRequest, opts ...grpc.CallOption) (*GetCommonTaskResponse, error) {
	out := new(GetCommonTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetCommonTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListCommonTasks(ctx context.Context, in *ListCommonTasksRequest, opts ...grpc.CallOption) (*ListCommonTasksResponse, error) {
	out := new(ListCommonTasksResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/ListCommonTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) InstallCommonTask(ctx context.Context, in *InstallCommonTaskRequest, opts ...grpc.CallOption) (*InstallCommonTaskResponse, error) {
	out := new(InstallCommonTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/InstallCommonTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) UninstallCommonTask(ctx context.Context, in *UninstallCommonTaskRequest, opts ...grpc.CallOption) (*UninstallCommonTaskResponse, error) {
	out := new(UninstallCommonTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/UninstallCommonTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) EnableCommonTask(ctx context.Context, in *EnableCommonTaskRequest, opts ...grpc.CallOption) (*EnableCommonTaskResponse, error) {
	out := new(EnableCommonTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/EnableCommonTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) DisableCommonTask(ctx context.Context, in *DisableCommonTaskRequest, opts ...grpc.CallOption) (*DisableCommonTaskResponse, error) {
	out := new(DisableCommonTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/DisableCommonTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/proto.Gofer/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goferClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (Gofer_ListEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gofer_ServiceDesc.Streams[1], "/proto.Gofer/ListEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &goferListEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gofer_ListEventsClient interface {
	Recv() (*ListEventsResponse, error)
	grpc.ClientStream
}

type goferListEventsClient struct {
	grpc.ClientStream
}

func (x *goferListEventsClient) Recv() (*ListEventsResponse, error) {
	m := new(ListEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoferServer is the server API for Gofer service.
// All implementations must embed UnimplementedGoferServer
// for forward compatibility
type GoferServer interface {
	////////////// System RPCs //////////////
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// ListNamespaces returns all registered namespaces.
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// CreateNamespace creates a new namespace that separates pipelines.
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// GetNamespace returns a single namespace by id.
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// UpdateNamespace updates the details of a particular namespace by id.
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	// DeleteNamespace removes a namespace by id.
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// GetPipeline returns a single pipeline by ID.
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// ListPipelines returns all registered pipelines. Can control pagination by
	// offset && limit request parameters.
	// By default ListPipelines will return the first 100 pipelines ordered by
	// creation.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// EnablePipeline allows a pipeline to execute runs by allowing it to receive
	// trigger events. See DisablePipeline to prevent a pipeline from executing
	// any more runs.
	EnablePipeline(context.Context, *EnablePipelineRequest) (*EnablePipelineResponse, error)
	// DisablePipeline prevents the pipeline from executing runs. Any trigger
	// events that would normally cause the pipeline to be run are instead
	// discarded.
	DisablePipeline(context.Context, *DisablePipelineRequest) (*DisablePipelineResponse, error)
	// CreatePipeline creates a new pipeline from the protobuf input. This is
	// usually autogenerated from the command line tool.
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	// UpdatePipeline updates a pipeline from the protobuf input. This input is
	// usually autogenerated from the command line tool.
	// Updating a pipeline requires the pipeline to adhere
	// to two constraints:
	//    1) The pipeline must not have any current runs in progress.
	//    2) The pipeline must be in a disabled state.
	UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error)
	// DeletePipeline deletes a pipeline permenantly. It is not recoverable.
	DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error)
	// GetRun returns the details of a single run.
	GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error)
	// ListRuns returns a list of all runs by Pipeline ID. Pagination can be
	// controlled via the offset and limit parameters of the request.
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	// StartRun executes a single run of a particular pipeline.
	StartRun(context.Context, *StartRunRequest) (*StartRunResponse, error)
	// RetryRun simply takes the vars and settings from a previous run and re-uses
	// those to launch a new run. Useful for if you want the exact settings from a
	// previous run.
	RetryRun(context.Context, *RetryRunRequest) (*RetryRunResponse, error)
	// CancelRun stops the execution of a run in progress. Any task runs that
	// might have been running at the time Are ask to stop gracefully(SIGINT)
	// unless the force parameter is used, in which case the task runs are stopped
	// instantly(SIGKILL) and the run is cancelled.
	CancelRun(context.Context, *CancelRunRequest) (*CancelRunResponse, error)
	// CancelAllRuns stops the execution of any in-progress runs for a specific
	// pipeline by ID.
	CancelAllRuns(context.Context, *CancelAllRunsRequest) (*CancelAllRunsResponse, error)
	// GetTaskRun returns the details of a single task run.
	GetTaskRun(context.Context, *GetTaskRunRequest) (*GetTaskRunResponse, error)
	// ListTaskRuns returns all task runs for a current run by ID.
	ListTaskRuns(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error)
	// CancelTaskRun cancels a specific task run, sending the related container a
	// SIGINT signal. If the force flag is used we instead send the container a
	// SIGKILL signal.
	//
	// Task runs that are cancelled can cause other downstream task runs to be
	// skipped depending on those downstream task run dependencies.
	CancelTaskRun(context.Context, *CancelTaskRunRequest) (*CancelTaskRunResponse, error)
	// GetTaskRunLogs returns logs for a specific task run line by line in a
	// stream. The logs are returns with both STDOUT and STDERR of the associated
	// container combined.
	GetTaskRunLogs(*GetTaskRunLogsRequest, Gofer_GetTaskRunLogsServer) error
	// DeleteTaskRunLogs removes a task run's associated log object. This is
	// useful for if logs mistakenly contain sensitive data.
	DeleteTaskRunLogs(context.Context, *DeleteTaskRunLogsRequest) (*DeleteTaskRunLogsResponse, error)
	// GetTrigger returns details about a specific trigger.
	GetTrigger(context.Context, *GetTriggerRequest) (*GetTriggerResponse, error)
	// ListTriggers lists all triggers currently registered within gofer.
	ListTriggers(context.Context, *ListTriggersRequest) (*ListTriggersResponse, error)
	// GetTriggerInstalInstructions retrieves install instructions for a
	// particular trigger.
	GetTriggerInstallInstructions(context.Context, *GetTriggerInstallInstructionsRequest) (*GetTriggerInstallInstructionsResponse, error)
	// InstallTrigger attempts to install a new trigger.
	InstallTrigger(context.Context, *InstallTriggerRequest) (*InstallTriggerResponse, error)
	// UninstallTrigger attempts to uninstall a trigger.
	UninstallTrigger(context.Context, *UninstallTriggerRequest) (*UninstallTriggerResponse, error)
	// EnableTrigger attempts to enable a new trigger.
	EnableTrigger(context.Context, *EnableTriggerRequest) (*EnableTriggerResponse, error)
	// DisableTrigger attempts to disable a new trigger.
	DisableTrigger(context.Context, *DisableTriggerRequest) (*DisableTriggerResponse, error)
	// GetCommonTask returns details about a specific commontask.
	GetCommonTask(context.Context, *GetCommonTaskRequest) (*GetCommonTaskResponse, error)
	// ListCommonTasks lists all common tasks currently registered within gofer.
	ListCommonTasks(context.Context, *ListCommonTasksRequest) (*ListCommonTasksResponse, error)
	// InstallCommonTask attempts to install a new common task.
	InstallCommonTask(context.Context, *InstallCommonTaskRequest) (*InstallCommonTaskResponse, error)
	// UninstallCommonTask attempts to uninstall a common task.
	UninstallCommonTask(context.Context, *UninstallCommonTaskRequest) (*UninstallCommonTaskResponse, error)
	// EnableCommonTask attempts to enable a new common task.
	EnableCommonTask(context.Context, *EnableCommonTaskRequest) (*EnableCommonTaskResponse, error)
	// DisableCommonTask attempts to disable a new common task.
	DisableCommonTask(context.Context, *DisableCommonTaskRequest) (*DisableCommonTaskResponse, error)
	// GetEvent returns the details of a single event.
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	// ListEvents returns a streaming list of all events, ordered by
	// oldest to newest.
	ListEvents(*ListEventsRequest, Gofer_ListEventsServer) error
	mustEmbedUnimplementedGoferServer()
}

// UnimplementedGoferServer must be embedded to have forward compatible implementations.
type UnimplementedGoferServer struct {
}

func (UnimplementedGoferServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedGoferServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedGoferServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedGoferServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedGoferServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedGoferServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedGoferServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedGoferServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedGoferServer) EnablePipeline(context.Context, *EnablePipelineRequest) (*EnablePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePipeline not implemented")
}
func (UnimplementedGoferServer) DisablePipeline(context.Context, *DisablePipelineRequest) (*DisablePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePipeline not implemented")
}
func (UnimplementedGoferServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedGoferServer) UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (UnimplementedGoferServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedGoferServer) GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedGoferServer) ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (UnimplementedGoferServer) StartRun(context.Context, *StartRunRequest) (*StartRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRun not implemented")
}
func (UnimplementedGoferServer) RetryRun(context.Context, *RetryRunRequest) (*RetryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryRun not implemented")
}
func (UnimplementedGoferServer) CancelRun(context.Context, *CancelRunRequest) (*CancelRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRun not implemented")
}
func (UnimplementedGoferServer) CancelAllRuns(context.Context, *CancelAllRunsRequest) (*CancelAllRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllRuns not implemented")
}
func (UnimplementedGoferServer) GetTaskRun(context.Context, *GetTaskRunRequest) (*GetTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRun not implemented")
}
func (UnimplementedGoferServer) ListTaskRuns(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskRuns not implemented")
}
func (UnimplementedGoferServer) CancelTaskRun(context.Context, *CancelTaskRunRequest) (*CancelTaskRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTaskRun not implemented")
}
func (UnimplementedGoferServer) GetTaskRunLogs(*GetTaskRunLogsRequest, Gofer_GetTaskRunLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskRunLogs not implemented")
}
func (UnimplementedGoferServer) DeleteTaskRunLogs(context.Context, *DeleteTaskRunLogsRequest) (*DeleteTaskRunLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskRunLogs not implemented")
}
func (UnimplementedGoferServer) GetTrigger(context.Context, *GetTriggerRequest) (*GetTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrigger not implemented")
}
func (UnimplementedGoferServer) ListTriggers(context.Context, *ListTriggersRequest) (*ListTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTriggers not implemented")
}
func (UnimplementedGoferServer) GetTriggerInstallInstructions(context.Context, *GetTriggerInstallInstructionsRequest) (*GetTriggerInstallInstructionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerInstallInstructions not implemented")
}
func (UnimplementedGoferServer) InstallTrigger(context.Context, *InstallTriggerRequest) (*InstallTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallTrigger not implemented")
}
func (UnimplementedGoferServer) UninstallTrigger(context.Context, *UninstallTriggerRequest) (*UninstallTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallTrigger not implemented")
}
func (UnimplementedGoferServer) EnableTrigger(context.Context, *EnableTriggerRequest) (*EnableTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTrigger not implemented")
}
func (UnimplementedGoferServer) DisableTrigger(context.Context, *DisableTriggerRequest) (*DisableTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTrigger not implemented")
}
func (UnimplementedGoferServer) GetCommonTask(context.Context, *GetCommonTaskRequest) (*GetCommonTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonTask not implemented")
}
func (UnimplementedGoferServer) ListCommonTasks(context.Context, *ListCommonTasksRequest) (*ListCommonTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommonTasks not implemented")
}
func (UnimplementedGoferServer) InstallCommonTask(context.Context, *InstallCommonTaskRequest) (*InstallCommonTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallCommonTask not implemented")
}
func (UnimplementedGoferServer) UninstallCommonTask(context.Context, *UninstallCommonTaskRequest) (*UninstallCommonTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallCommonTask not implemented")
}
func (UnimplementedGoferServer) EnableCommonTask(context.Context, *EnableCommonTaskRequest) (*EnableCommonTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCommonTask not implemented")
}
func (UnimplementedGoferServer) DisableCommonTask(context.Context, *DisableCommonTaskRequest) (*DisableCommonTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCommonTask not implemented")
}
func (UnimplementedGoferServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedGoferServer) ListEvents(*ListEventsRequest, Gofer_ListEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedGoferServer) mustEmbedUnimplementedGoferServer() {}

// UnsafeGoferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoferServer will
// result in compilation errors.
type UnsafeGoferServer interface {
	mustEmbedUnimplementedGoferServer()
}

func RegisterGoferServer(s grpc.ServiceRegistrar, srv GoferServer) {
	s.RegisterService(&Gofer_ServiceDesc, srv)
}

func _Gofer_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnablePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnablePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/EnablePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnablePipeline(ctx, req.(*EnablePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisablePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisablePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DisablePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisablePipeline(ctx, req.(*DisablePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/UpdatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UpdatePipeline(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_StartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).StartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/StartRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).StartRun(ctx, req.(*StartRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_RetryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).RetryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/RetryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).RetryRun(ctx, req.(*RetryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/CancelRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelRun(ctx, req.(*CancelRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelAllRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelAllRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/CancelAllRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelAllRuns(ctx, req.(*CancelAllRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetTaskRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetTaskRun(ctx, req.(*GetTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListTaskRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListTaskRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListTaskRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListTaskRuns(ctx, req.(*ListTaskRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_CancelTaskRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).CancelTaskRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/CancelTaskRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).CancelTaskRun(ctx, req.(*CancelTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetTaskRunLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskRunLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoferServer).GetTaskRunLogs(m, &goferGetTaskRunLogsServer{stream})
}

type Gofer_GetTaskRunLogsServer interface {
	Send(*GetTaskRunLogsResponse) error
	grpc.ServerStream
}

type goferGetTaskRunLogsServer struct {
	grpc.ServerStream
}

func (x *goferGetTaskRunLogsServer) Send(m *GetTaskRunLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gofer_DeleteTaskRunLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRunLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DeleteTaskRunLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DeleteTaskRunLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DeleteTaskRunLogs(ctx, req.(*DeleteTaskRunLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetTrigger(ctx, req.(*GetTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListTriggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListTriggers(ctx, req.(*ListTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetTriggerInstallInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerInstallInstructionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetTriggerInstallInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetTriggerInstallInstructions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetTriggerInstallInstructions(ctx, req.(*GetTriggerInstallInstructionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_InstallTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).InstallTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/InstallTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).InstallTrigger(ctx, req.(*InstallTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UninstallTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UninstallTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/UninstallTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UninstallTrigger(ctx, req.(*UninstallTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnableTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnableTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/EnableTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnableTrigger(ctx, req.(*EnableTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisableTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisableTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DisableTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisableTrigger(ctx, req.(*DisableTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommonTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetCommonTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetCommonTask(ctx, req.(*GetCommonTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListCommonTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommonTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).ListCommonTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/ListCommonTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).ListCommonTasks(ctx, req.(*ListCommonTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_InstallCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallCommonTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).InstallCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/InstallCommonTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).InstallCommonTask(ctx, req.(*InstallCommonTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_UninstallCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallCommonTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).UninstallCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/UninstallCommonTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).UninstallCommonTask(ctx, req.(*UninstallCommonTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_EnableCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCommonTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).EnableCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/EnableCommonTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).EnableCommonTask(ctx, req.(*EnableCommonTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_DisableCommonTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCommonTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).DisableCommonTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/DisableCommonTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).DisableCommonTask(ctx, req.(*DisableCommonTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoferServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gofer/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoferServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gofer_ListEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoferServer).ListEvents(m, &goferListEventsServer{stream})
}

type Gofer_ListEventsServer interface {
	Send(*ListEventsResponse) error
	grpc.ServerStream
}

type goferListEventsServer struct {
	grpc.ServerStream
}

func (x *goferListEventsServer) Send(m *ListEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Gofer_ServiceDesc is the grpc.ServiceDesc for Gofer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gofer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gofer",
	HandlerType: (*GoferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _Gofer_GetSystemInfo_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Gofer_ListNamespaces_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _Gofer_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _Gofer_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Gofer_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Gofer_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _Gofer_GetPipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _Gofer_ListPipelines_Handler,
		},
		{
			MethodName: "EnablePipeline",
			Handler:    _Gofer_EnablePipeline_Handler,
		},
		{
			MethodName: "DisablePipeline",
			Handler:    _Gofer_DisablePipeline_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _Gofer_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _Gofer_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _Gofer_DeletePipeline_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Gofer_GetRun_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _Gofer_ListRuns_Handler,
		},
		{
			MethodName: "StartRun",
			Handler:    _Gofer_StartRun_Handler,
		},
		{
			MethodName: "RetryRun",
			Handler:    _Gofer_RetryRun_Handler,
		},
		{
			MethodName: "CancelRun",
			Handler:    _Gofer_CancelRun_Handler,
		},
		{
			MethodName: "CancelAllRuns",
			Handler:    _Gofer_CancelAllRuns_Handler,
		},
		{
			MethodName: "GetTaskRun",
			Handler:    _Gofer_GetTaskRun_Handler,
		},
		{
			MethodName: "ListTaskRuns",
			Handler:    _Gofer_ListTaskRuns_Handler,
		},
		{
			MethodName: "CancelTaskRun",
			Handler:    _Gofer_CancelTaskRun_Handler,
		},
		{
			MethodName: "DeleteTaskRunLogs",
			Handler:    _Gofer_DeleteTaskRunLogs_Handler,
		},
		{
			MethodName: "GetTrigger",
			Handler:    _Gofer_GetTrigger_Handler,
		},
		{
			MethodName: "ListTriggers",
			Handler:    _Gofer_ListTriggers_Handler,
		},
		{
			MethodName: "GetTriggerInstallInstructions",
			Handler:    _Gofer_GetTriggerInstallInstructions_Handler,
		},
		{
			MethodName: "InstallTrigger",
			Handler:    _Gofer_InstallTrigger_Handler,
		},
		{
			MethodName: "UninstallTrigger",
			Handler:    _Gofer_UninstallTrigger_Handler,
		},
		{
			MethodName: "EnableTrigger",
			Handler:    _Gofer_EnableTrigger_Handler,
		},
		{
			MethodName: "DisableTrigger",
			Handler:    _Gofer_DisableTrigger_Handler,
		},
		{
			MethodName: "GetCommonTask",
			Handler:    _Gofer_GetCommonTask_Handler,
		},
		{
			MethodName: "ListCommonTasks",
			Handler:    _Gofer_ListCommonTasks_Handler,
		},
		{
			MethodName: "InstallCommonTask",
			Handler:    _Gofer_InstallCommonTask_Handler,
		},
		{
			MethodName: "UninstallCommonTask",
			Handler:    _Gofer_UninstallCommonTask_Handler,
		},
		{
			MethodName: "EnableCommonTask",
			Handler:    _Gofer_EnableCommonTask_Handler,
		},
		{
			MethodName: "DisableCommonTask",
			Handler:    _Gofer_DisableCommonTask_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Gofer_GetEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskRunLogs",
			Handler:       _Gofer_GetTaskRunLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListEvents",
			Handler:       _Gofer_ListEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gofer.proto",
}

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// Watch blocks until the trigger has a pipeline that should be run, then it
	// returns.
	Watch(ctx context.Context, in *TriggerWatchRequest, opts ...grpc.CallOption) (*TriggerWatchResponse, error)
	// Info returns information on the specific plugin
	Info(ctx context.Context, in *TriggerInfoRequest, opts ...grpc.CallOption) (*TriggerInfoResponse, error)
	// Subscribe allows a trigger to keep track of all pipelines currently
	// dependant on that trigger so that we can trigger them at appropriate times.
	Subscribe(ctx context.Context, in *TriggerSubscribeRequest, opts ...grpc.CallOption) (*TriggerSubscribeResponse, error)
	// Unsubscribe allows pipelines to remove their trigger subscriptions. This is
	// useful if the pipeline no longer needs to be notified about a specific
	// trigger automation.
	Unsubscribe(ctx context.Context, in *TriggerUnsubscribeRequest, opts ...grpc.CallOption) (*TriggerUnsubscribeResponse, error)
	// Shutdown tells the trigger to cleanup and gracefully shutdown. If a trigger
	// does not shutdown in a time defined by the gofer API the trigger will
	// instead be Force shutdown(SIGKILL). This is to say that all triggers should
	// lean toward quick cleanups and shutdowns.
	Shutdown(ctx context.Context, in *TriggerShutdownRequest, opts ...grpc.CallOption) (*TriggerShutdownResponse, error)
	// ExternalEvent are json blobs of gofer's /events endpoint. Normally
	// webhooks.
	ExternalEvent(ctx context.Context, in *TriggerExternalEventRequest, opts ...grpc.CallOption) (*TriggerExternalEventResponse, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) Watch(ctx context.Context, in *TriggerWatchRequest, opts ...grpc.CallOption) (*TriggerWatchResponse, error) {
	out := new(TriggerWatchResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Info(ctx context.Context, in *TriggerInfoRequest, opts ...grpc.CallOption) (*TriggerInfoResponse, error) {
	out := new(TriggerInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Subscribe(ctx context.Context, in *TriggerSubscribeRequest, opts ...grpc.CallOption) (*TriggerSubscribeResponse, error) {
	out := new(TriggerSubscribeResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Unsubscribe(ctx context.Context, in *TriggerUnsubscribeRequest, opts ...grpc.CallOption) (*TriggerUnsubscribeResponse, error) {
	out := new(TriggerUnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Shutdown(ctx context.Context, in *TriggerShutdownRequest, opts ...grpc.CallOption) (*TriggerShutdownResponse, error) {
	out := new(TriggerShutdownResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ExternalEvent(ctx context.Context, in *TriggerExternalEventRequest, opts ...grpc.CallOption) (*TriggerExternalEventResponse, error) {
	out := new(TriggerExternalEventResponse)
	err := c.cc.Invoke(ctx, "/proto.TriggerService/ExternalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations must embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	// Watch blocks until the trigger has a pipeline that should be run, then it
	// returns.
	Watch(context.Context, *TriggerWatchRequest) (*TriggerWatchResponse, error)
	// Info returns information on the specific plugin
	Info(context.Context, *TriggerInfoRequest) (*TriggerInfoResponse, error)
	// Subscribe allows a trigger to keep track of all pipelines currently
	// dependant on that trigger so that we can trigger them at appropriate times.
	Subscribe(context.Context, *TriggerSubscribeRequest) (*TriggerSubscribeResponse, error)
	// Unsubscribe allows pipelines to remove their trigger subscriptions. This is
	// useful if the pipeline no longer needs to be notified about a specific
	// trigger automation.
	Unsubscribe(context.Context, *TriggerUnsubscribeRequest) (*TriggerUnsubscribeResponse, error)
	// Shutdown tells the trigger to cleanup and gracefully shutdown. If a trigger
	// does not shutdown in a time defined by the gofer API the trigger will
	// instead be Force shutdown(SIGKILL). This is to say that all triggers should
	// lean toward quick cleanups and shutdowns.
	Shutdown(context.Context, *TriggerShutdownRequest) (*TriggerShutdownResponse, error)
	// ExternalEvent are json blobs of gofer's /events endpoint. Normally
	// webhooks.
	ExternalEvent(context.Context, *TriggerExternalEventRequest) (*TriggerExternalEventResponse, error)
	mustEmbedUnimplementedTriggerServiceServer()
}

// UnimplementedTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) Watch(context.Context, *TriggerWatchRequest) (*TriggerWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedTriggerServiceServer) Info(context.Context, *TriggerInfoRequest) (*TriggerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedTriggerServiceServer) Subscribe(context.Context, *TriggerSubscribeRequest) (*TriggerSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTriggerServiceServer) Unsubscribe(context.Context, *TriggerUnsubscribeRequest) (*TriggerUnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedTriggerServiceServer) Shutdown(context.Context, *TriggerShutdownRequest) (*TriggerShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedTriggerServiceServer) ExternalEvent(context.Context, *TriggerExternalEventRequest) (*TriggerExternalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalEvent not implemented")
}
func (UnimplementedTriggerServiceServer) mustEmbedUnimplementedTriggerServiceServer() {}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Watch(ctx, req.(*TriggerWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Info(ctx, req.(*TriggerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Subscribe(ctx, req.(*TriggerSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Unsubscribe(ctx, req.(*TriggerUnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Shutdown(ctx, req.(*TriggerShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ExternalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerExternalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ExternalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TriggerService/ExternalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ExternalEvent(ctx, req.(*TriggerExternalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Watch",
			Handler:    _TriggerService_Watch_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _TriggerService_Info_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _TriggerService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _TriggerService_Unsubscribe_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _TriggerService_Shutdown_Handler,
		},
		{
			MethodName: "ExternalEvent",
			Handler:    _TriggerService_ExternalEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gofer.proto",
}
