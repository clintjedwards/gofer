syntax = "proto3";

package proto;

option go_package = "github.com/clintjedwards/gofer/proto";

import "gofer_transport.proto";

service Gofer {
  ////////////// System RPCs //////////////
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);

  ////////////// Namespace RPCs //////////////
  //
  // Namespaces are dividers for logically separating workloads. Every resource
  // belongs to a particular namespace.

  // ListNamespaces returns all registered namespaces.
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);

  // CreateNamespace creates a new namespace that separates pipelines.
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse);

  // GetNamespace returns a single namespace by id.
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse);

  // UpdateNamespace updates the details of a particular namespace by id.
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);

  // DeleteNamespace removes a namespace by id.
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);

  ////////////// Pipeline RPCs //////////////
  //
  // A Pipeline is a graph of containers that accomplish some goal. Pipelines
  // are created via a Pipeline configuration file and can be set to be run
  // automatically via attached triggers.

  // GetPipeline returns a single pipeline by ID.
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse);

  // ListPipelines returns all registered pipelines. Can control pagination by
  // offset && limit request parameters.
  // By default ListPipelines will return the first 100 pipelines ordered by
  // creation.
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse);

  // EnablePipeline allows a pipeline to execute runs by allowing it to receive
  // trigger events. See DisablePipeline to prevent a pipeline from executing
  // any more runs.
  rpc EnablePipeline(EnablePipelineRequest) returns (EnablePipelineResponse);

  // DisablePipeline prevents the pipeline from executing runs. Any trigger
  // events that would normally cause the pipeline to be run are instead
  // discarded.
  rpc DisablePipeline(DisablePipelineRequest) returns (DisablePipelineResponse);

  // CreatePipeline creates a new pipeline from the protobuf input. This is
  // usually autogenerated from the command line tool.
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse);

  // UpdatePipeline updates a pipeline from the protobuf input. This input is
  // usually autogenerated from the command line tool.
  // Updating a pipeline requires the pipeline to adhere
  // to two constraints:
  //    1) The pipeline must not have any current runs in progress.
  //    2) The pipeline must be in a disabled state.
  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse);

  // DeletePipeline deletes a pipeline permenantly. It is not recoverable.
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse);

  ////////////// Run RPCs //////////////
  //
  // A run is a specific execution of a pipeline at a specific point in time.
  // A run is made up of multiple tasks that all run according to their
  // dependency on each other. Runs can be started either manually by the API or
  // automatically by associating the pipeline with a trigger.

  // GetRun returns the details of a single run.
  rpc GetRun(GetRunRequest) returns (GetRunResponse);

  // ListRuns returns a list of all runs by Pipeline ID. Pagination can be
  // controlled via the offset and limit parameters of the request.
  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse);

  // StartRun executes a single run of a particular pipeline.
  rpc StartRun(StartRunRequest) returns (StartRunResponse);

  // RetryRun simply takes the vars and settings from a previous run and re-uses
  // those to launch a new run. Useful for if you want the exact settings from a
  // previous run.
  rpc RetryRun(RetryRunRequest) returns (RetryRunResponse);

  // CancelRun stops the execution of a run in progress. Any task runs that
  // might have been running at the time Are ask to stop gracefully(SIGINT)
  // unless the force parameter is used, in which case the task runs are stopped
  // instantly(SIGKILL) and the run is cancelled.
  rpc CancelRun(CancelRunRequest) returns (CancelRunResponse);

  // CancelAllRuns stops the execution of any in-progress runs for a specific
  // pipeline by ID.
  rpc CancelAllRuns(CancelAllRunsRequest) returns (CancelAllRunsResponse);

  ////////////// Task Run RPCs //////////////
  //
  // A task run is the lowest unit of execution for a gofer pipeline. A task run
  // is the tracking of a task, which is to say a task run is simply the
  // tracking of a container that is in the act of being executed.

  // GetTaskRun returns the details of a single task run.
  rpc GetTaskRun(GetTaskRunRequest) returns (GetTaskRunResponse);

  // ListTaskRuns returns all task runs for a current run by ID.
  rpc ListTaskRuns(ListTaskRunsRequest) returns (ListTaskRunsResponse);

  // CancelTaskRun cancels a specific task run, sending the related container a
  // SIGINT signal. If the force flag is used we instead send the container a
  // SIGKILL signal.
  //
  // Task runs that are cancelled can cause other downstream task runs to be
  // skipped depending on those downstream task run dependencies.
  rpc CancelTaskRun(CancelTaskRunRequest) returns (CancelTaskRunResponse);

  // GetTaskRunLogs returns logs for a specific task run line by line in a
  // stream. The logs are returns with both STDOUT and STDERR of the associated
  // container combined.
  rpc GetTaskRunLogs(GetTaskRunLogsRequest)
      returns (stream GetTaskRunLogsResponse);

  // DeleteTaskRunLogs removes a task run's associated log object. This is
  // useful for if logs mistakenly contain sensitive data.
  rpc DeleteTaskRunLogs(DeleteTaskRunLogsRequest)
      returns (DeleteTaskRunLogsResponse);

  ////////////// Trigger RPCs //////////////
  //
  // A trigger is an automated way to execute pipeline runs. Pipelines
  // "subscribe" to one or more triggers (usually with some individual
  // configuration) and those triggers send "events" back to gofer about when to
  // trigger a new pipeline run.

  // GetTrigger returns details about a specific trigger.
  rpc GetTrigger(GetTriggerRequest) returns (GetTriggerResponse);

  // ListTriggers lists all triggers currently registered within gofer.
  rpc ListTriggers(ListTriggersRequest) returns (ListTriggersResponse);

  // GetTriggerInstalInstructions retrieves install instructions for a
  // particular trigger.
  rpc GetTriggerInstallInstructions(GetTriggerInstallInstructionsRequest)
      returns (GetTriggerInstallInstructionsResponse);

  // InstallTrigger attempts to install a new trigger.
  rpc InstallTrigger(InstallTriggerRequest) returns (InstallTriggerResponse);

  // UninstallTrigger attempts to uninstall a trigger.
  rpc UninstallTrigger(UninstallTriggerRequest)
      returns (UninstallTriggerResponse);

  // EnableTrigger attempts to enable a new trigger.
  rpc EnableTrigger(EnableTriggerRequest) returns (EnableTriggerResponse);

  // DisableTrigger attempts to disable a new trigger.
  rpc DisableTrigger(DisableTriggerRequest) returns (DisableTriggerResponse);

  ////////////// Common Task RPCs //////////////
  //
  // A Common Task is a Gofer provided task that can be set up in advanced to
  // make some action easier for a particular user. For example posting to
  // Slack.

  // GetCommonTask returns details about a specific commontask.
  rpc GetCommonTask(GetCommonTaskRequest) returns (GetCommonTaskResponse);

  // ListCommonTasks lists all common tasks currently registered within gofer.
  rpc ListCommonTasks(ListCommonTasksRequest) returns (ListCommonTasksResponse);

  // InstallCommonTask attempts to install a new common task.
  rpc InstallCommonTask(InstallCommonTaskRequest)
      returns (InstallCommonTaskResponse);

  // UninstallCommonTask attempts to uninstall a common task.
  rpc UninstallCommonTask(UninstallCommonTaskRequest)
      returns (UninstallCommonTaskResponse);

  // EnableCommonTask attempts to enable a new common task.
  rpc EnableCommonTask(EnableCommonTaskRequest)
      returns (EnableCommonTaskResponse);

  // DisableCommonTask attempts to disable a new common task.
  rpc DisableCommonTask(DisableCommonTaskRequest)
      returns (DisableCommonTaskResponse);

  ////////////// Event RPCs //////////////
  //
  // Gofer emits events for actions that happen within it's purview. You can use
  // the event api to get a list of all events or request specific events.

  // GetEvent returns the details of a single event.
  rpc GetEvent(GetEventRequest) returns (GetEventResponse);

  // ListEvents returns a streaming list of all events, ordered by
  // oldest to newest.
  rpc ListEvents(ListEventsRequest) returns (stream ListEventsResponse);
}

service TriggerService {
  // Watch blocks until the trigger has a pipeline that should be run, then it
  // returns.
  rpc Watch(TriggerWatchRequest) returns (TriggerWatchResponse);

  // Info returns information on the specific plugin
  rpc Info(TriggerInfoRequest) returns (TriggerInfoResponse);

  // Subscribe allows a trigger to keep track of all pipelines currently
  // dependant on that trigger so that we can trigger them at appropriate times.
  rpc Subscribe(TriggerSubscribeRequest) returns (TriggerSubscribeResponse);

  // Unsubscribe allows pipelines to remove their trigger subscriptions. This is
  // useful if the pipeline no longer needs to be notified about a specific
  // trigger automation.
  rpc Unsubscribe(TriggerUnsubscribeRequest)
      returns (TriggerUnsubscribeResponse);

  // Shutdown tells the trigger to cleanup and gracefully shutdown. If a trigger
  // does not shutdown in a time defined by the gofer API the trigger will
  // instead be Force shutdown(SIGKILL). This is to say that all triggers should
  // lean toward quick cleanups and shutdowns.
  rpc Shutdown(TriggerShutdownRequest) returns (TriggerShutdownResponse);

  // ExternalEvent are json blobs of gofer's /events endpoint. Normally
  // webhooks.
  rpc ExternalEvent(TriggerExternalEventRequest)
      returns (TriggerExternalEventResponse);
}
