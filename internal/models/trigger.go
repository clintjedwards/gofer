package models

import (
	"github.com/clintjedwards/gofer/proto"
)

// TriggerResultState is a description of an events specific outcome. Events are normally generated by triggers
// so its helpful to have them be able to pass down an event but also give an indication on what that event
// might mean.
//
// For example: A trigger that evaluates whether a pipeline should run on a specific date might also skip certain
// holidays. In this case it would pass down an "skipped" event result to inform the user that their pipeline
// would have ran, but did not due to holiday.
type TriggerResultState string

const (
	TriggerResultStateUnknown TriggerResultState = "UNKNOWN" // Event did not have a result; should never be in this state.
	TriggerResultStateSuccess TriggerResultState = "SUCCESS" // Trigger evaluation was successful.
	TriggerResultStateFailure TriggerResultState = "FAILURE" // Trigger evaluation was not successful.
	TriggerResultStateSkipped TriggerResultState = "SKIPPED" // Trigger evaluation was skipped
)

type TriggerResult struct {
	Details string // details about the trigger's current result.
	State   TriggerResultState
}

func (t *TriggerResult) ToProto() *proto.TriggerResult {
	return &proto.TriggerResult{
		State:   proto.TriggerResult_State(proto.TriggerResult_State_value[string(t.State)]),
		Details: t.Details,
	}
}

func (t *TriggerResult) FromProto(p *proto.TriggerResult) {
	t.Details = p.Details
	t.State = TriggerResultState(p.State.String())
}

type Trigger struct {
	// Key is a trigger's authentication key used to validate requests from the Gofer main service.
	// On every request the Gofer service passes this key so that it is impossible for other service to contact
	// and manipulate triggers directly.
	Key string `json:"-"`

	// Kind is a unique identifier for the trigger usually in plain english.
	Kind string `json:"kind" storm:"id,unique"`

	// URL is the network address used to communicate with the trigger by the main process.
	URL string `json:"url"`

	// SchedulerID is an identifier used by the scheduler to point out which container this trigger is mapped to. Used
	// when manipulating the container through the identifier.
	SchedulerID   string         `json:"scheduler_id"`
	Started       int64          `json:"started"` // The start time of the trigger in epoch milliseconds.
	State         ContainerState `json:"state"`
	Documentation string         `json:"documentation"` // The documentation link for this specific trigger.
}

func (t *Trigger) ToProto() *proto.Trigger {
	return &proto.Trigger{
		Kind:          t.Kind,
		Url:           t.URL,
		SchedulerId:   t.SchedulerID,
		Started:       t.Started,
		State:         proto.Trigger_State(proto.Trigger_State_value[string(t.State)]),
		Documentation: t.Documentation,
	}
}
